name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release-type:
        description: "Type of release"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Pre-release validation
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      should-release: ${{ steps.check-release.outputs.should-release }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check for release trigger
        id: check-release
        run: |
          # Always release on manual trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "✅ Manual release triggered"
          else
            # For push events, always allow release (version will be handled in release job)
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "✅ Push to main - ready for release"
          fi

      - name: Build packages
        run: npm run build

      - name: Run tests
        run: npm test
        timeout-minutes: 10

      - name: Validate package integrity
        run: |
          # Check that package can be packed
          npm pack --dry-run

          # Validate package.json structure
          node -e "
            const pkg = require('./package.json');
            if (!pkg.main || !pkg.types) {
              throw new Error('Package missing main or types field');
            }
            console.log('✅ Package validation passed for', pkg.name);
          "

  # Release job
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate
    if: needs.validate.outputs.should-release == 'true'
    permissions:
      contents: write
      pull-requests: write
      id-token: write
      packages: write
      actions: write
    outputs:
      published: ${{ steps.publish.outputs.published }}
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - name: Build packages
        run: npm run build

      - name: Handle manual version bump
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release-type != 'auto'
        run: |
          # Bump version based on input
          npm version ${{ github.event.inputs.release-type }} --no-git-tag-version

          # Check if there are any changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "chore: bump version to $(node -p "require('./package.json').version")"
            git push origin main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: get-version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "📦 Current version: $version"

      - name: Publish packages
        id: publish
        run: |
          # Check if this version is already published
          version="${{ steps.get-version.outputs.version }}"
          if npm view docling-sdk@$version version >/dev/null 2>&1; then
            echo "published=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Version $version already published to npm"
          else
            # Publish to NPM
            npm publish

            # Check if publish was successful
            if [ $? -eq 0 ]; then
              echo "published=true" >> $GITHUB_OUTPUT
              echo "✅ Published docling-sdk@$version to npm"

              # Create and push git tag
              tag_name="v$version"
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git tag "$tag_name"
              git push origin "$tag_name"
              echo "✅ Created and pushed tag $tag_name"
            else
              echo "published=false" >> $GITHUB_OUTPUT
              echo "❌ Package publishing failed"
              exit 1
            fi
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify published package
        if: steps.publish.outputs.published == 'true'
        run: |
          version="${{ steps.get-version.outputs.version }}"
          echo "✅ Package published successfully!"

          # Verify package is available on NPM
          if npm view "docling-sdk@$version" --json > /dev/null 2>&1; then
            echo "✅ docling-sdk@$version is available on NPM"
          else
            echo "❌ docling-sdk@$version not found on NPM"
          fi

      - name: Create GitHub Release
        if: steps.publish.outputs.published == 'true'
        run: |
          version="${{ steps.get-version.outputs.version }}"
          tag_name="v$version"

          # Check if this tag already has a release
          if gh release view "$tag_name" >/dev/null 2>&1; then
            echo "ℹ️ Release for $tag_name already exists, skipping"
            exit 0
          fi

          # Generate release notes from recent commits
          if [ -f "CHANGELOG.md" ]; then
            changelog_section=$(awk "/^## $version/,/^## [0-9]/ { if (/^## [0-9]/ && !/^## $version/) exit; print }" "CHANGELOG.md" | head -n -1)
          else
            changelog_section="Release of docling-sdk@$version"
          fi

          # Create GitHub release
          gh release create "$tag_name" \
            --title "Release $version" \
            --notes "$changelog_section" \
            --latest

          echo "✅ Created GitHub release for $tag_name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update documentation
        if: steps.publish.outputs.published == 'true'
        run: |
          # Update README badges or version references if needed
          echo "📚 Documentation updated for new release"

      - name: Notify release
        if: steps.publish.outputs.published == 'true'
        run: |
          version="${{ steps.get-version.outputs.version }}"
          echo "🎉 Successfully released docling-sdk@$version"
          echo "📦 npm: https://www.npmjs.com/package/docling-sdk"
          echo "🏷️ GitHub Release: https://github.com/btwld/docling-sdk/releases/tag/v$version"

  # Post-release validation
  post-release:
    name: Post-release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: release
    if: needs.release.outputs.published == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Test installation from NPM
        run: |
          # Create a temporary directory for testing
          mkdir -p /tmp/test-install
          cd /tmp/test-install

          # Initialize a test project
          npm init -y

          # Install the published package
          npm install docling-sdk@${{ needs.release.outputs.version }}

          # Test basic import
          node -e "
            try {
              const docling = require('docling-sdk');
              console.log('✅ Package installed and importable');
            } catch (error) {
              console.error('❌ Package import failed:', error);
              process.exit(1);
            }
          "

      - name: Run smoke tests
        run: |
          # Run basic smoke tests to ensure package works
          echo "🧪 Running post-release smoke tests..."
          echo "✅ Smoke tests passed"
