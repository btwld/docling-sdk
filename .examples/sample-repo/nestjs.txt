TITLE: Installing NestJS CLI and Creating a New Project
DESCRIPTION: Commands to install the NestJS CLI globally and create a new project. The CLI will generate the project structure with necessary boilerplate files.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/first-steps.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i -g @nestjs/cli
$ nest new project-name
```

----------------------------------------

TITLE: Importing Feature Module in Root Module
DESCRIPTION: Shows how to import a feature module into the root AppModule of a NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CatsModule } from './cats/cats.module';

@Module({
  imports: [CatsModule],
})
export class AppModule {}
```

----------------------------------------

TITLE: Creating Basic NestJS Controller with TypeScript
DESCRIPTION: Demonstrates how to create a basic controller using the @Controller decorator with a route prefix. Shows implementation of a GET endpoint that returns all cats.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Controller, Get } from '@nestjs/common';

@Controller('cats')
export class CatsController {
  @Get()
  findAll(): string {
    return 'This action returns all cats';
  }
}
```

----------------------------------------

TITLE: Creating a Public Route Decorator in NestJS
DESCRIPTION: Shows how to create a custom decorator using SetMetadata to mark routes as public when using global authentication. This decorator allows certain endpoints to bypass authentication checks.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_24

LANGUAGE: typescript
CODE:
```
import { SetMetadata } from '@nestjs/common';

export const IS_PUBLIC_KEY = 'isPublic';
export const Public = () => SetMetadata(IS_PUBLIC_KEY, true);
```

----------------------------------------

TITLE: Configuring Swagger CLI Plugin with Options in nest-cli.json
DESCRIPTION: Advanced configuration for the Swagger CLI plugin with custom options. This allows fine-tuning of the plugin's behavior.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
{
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "plugins": [
      {
        "name": "@nestjs/swagger",
        "options": {
          "classValidatorShim": false,
          "introspectComments": true,
          "skipAutoHttpCode": true
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Implementing JWT Authentication Service in NestJS
DESCRIPTION: AuthService implementation with user validation and JWT token generation functionality. Includes methods for user validation and login token creation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { UsersService } from '../users/users.service';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService
  ) {}

  async validateUser(username: string, pass: string): Promise<any> {
    const user = await this.usersService.findOne(username);
    if (user && user.password === pass) {
      const { password, ...result } = user;
      return result;
    }
    return null;
  }

  async login(user: any) {
    const payload = { username: user.username, sub: user.userId };
    return {
      access_token: this.jwtService.sign(payload),
    };
  }
}
```

----------------------------------------

TITLE: Installing NestJS with Nest CLI
DESCRIPTION: Commands to install the Nest CLI globally and scaffold a new NestJS project. This is the recommended approach for first-time users to create a conventional project structure.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/introduction.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i -g @nestjs/cli
$ nest new project-name
```

----------------------------------------

TITLE: Protected Routes Controller Implementation
DESCRIPTION: Authentication controller implementing protected and public routes using JWT guard.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
import {
  Body,
  Controller,
  Get,
  HttpCode,
  HttpStatus,
  Post,
  Request,
  UseGuards
} from '@nestjs/common';
import { AuthGuard } from './auth.guard';
import { AuthService } from './auth.service';

@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @HttpCode(HttpStatus.OK)
  @Post('login')
  signIn(@Body() signInDto: Record<string, any>) {
    return this.authService.signIn(signInDto.username, signInDto.password);
  }

  @UseGuards(AuthGuard)
  @Get('profile')
  getProfile(@Request() req) {
    return req.user;
  }
}
```

----------------------------------------

TITLE: Creating a Custom Environment Validation Function with class-validator in NestJS
DESCRIPTION: Implements a custom validation function using class-transformer and class-validator to validate environment variables. Includes an Environment enum and validation constraints for NODE_ENV and PORT.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_20

LANGUAGE: typescript
CODE:
```
import { plainToInstance } from 'class-transformer';
import { IsEnum, IsNumber, Max, Min, validateSync } from 'class-validator';

enum Environment {
  Development = "development",
  Production = "production",
  Test = "test",
  Provision = "provision",
}

class EnvironmentVariables {
  @IsEnum(Environment)
  NODE_ENV: Environment;

  @IsNumber()
  @Min(0)
  @Max(65535)
  PORT: number;
}

export function validate(config: Record<string, unknown>) {
  const validatedConfig = plainToInstance(
    EnvironmentVariables,
    config,
    { enableImplicitConversion: true },
  );
  const errors = validateSync(validatedConfig, { skipMissingProperties: false });

  if (errors.length > 0) {
    throw new Error(errors.toString());
  }
  return validatedConfig;
}
```

----------------------------------------

TITLE: Defining a Provider Service in TypeScript (NestJS)
DESCRIPTION: This snippet demonstrates how to create a basic provider service using the @Injectable() decorator in NestJS. It defines a CatsService class with a private array of cats and a method to retrieve all cats.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { Cat } from './interfaces/cat.interface';

@Injectable()
export class CatsService {
  private readonly cats: Cat[] = [];

  findAll(): Cat[] {
    return this.cats;
  }
}
```

----------------------------------------

TITLE: Implementing CatsController with Dependency Injection in NestJS
DESCRIPTION: Illustrates how to use the CatsService in a CatsController. The service is injected through the constructor, demonstrating dependency injection in action.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/components.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Controller, Get, Post, Body } from '@nestjs/common';
import { CreateCatDto } from './dto/create-cat.dto';
import { CatsService } from './cats.service';
import { Cat } from './interfaces/cat.interface';

@Controller('cats')
export class CatsController {
  constructor(private catsService: CatsService) {}

  @Post()
  async create(@Body() createCatDto: CreateCatDto) {
    this.catsService.create(createCatDto);
  }

  @Get()
  async findAll(): Promise<Cat[]> {
    return this.catsService.findAll();
  }
}
```

----------------------------------------

TITLE: Full Resource Controller in NestJS
DESCRIPTION: Provides a complete example of a NestJS controller with methods for creating, reading, updating, and deleting resources, demonstrating the use of various decorators and DTOs.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
import { Controller, Get, Query, Post, Body, Put, Param, Delete } from '@nestjs/common';
import { CreateCatDto, UpdateCatDto, ListAllEntities } from './dto';

@Controller('cats')
export class CatsController {
  @Post()
  create(@Body() createCatDto: CreateCatDto) {
    return 'This action adds a new cat';
  }

  @Get()
  findAll(@Query() query: ListAllEntities) {
    return `This action returns all cats (limit: ${query.limit} items)`;
  }

  @Get(':id')
  findOne(@Param('id') id: string) {
    return `This action returns a #${id} cat`;
  }

  @Put(':id')
  update(@Param('id') id: string, @Body() updateCatDto: UpdateCatDto) {
    return `This action updates a #${id} cat`;
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return `This action removes a #${id} cat`;
  }
}
```

----------------------------------------

TITLE: Registering ValidationPipe Globally
DESCRIPTION: This code snippet demonstrates how to register the `ValidationPipe` globally in a NestJS application. This ensures that all endpoints are protected by the validation rules defined in DTOs or validation classes. It sets up the NestJS application and applies the ValidationPipe.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_2

LANGUAGE: typescript
CODE:
```
async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalPipes(new ValidationPipe());
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();
```

----------------------------------------

TITLE: Implementing a Catch-All Exception Filter in NestJS
DESCRIPTION: Shows implementation of a platform-agnostic exception filter that catches all unhandled exceptions using HttpAdapterHost to deliver responses, regardless of the exception type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { HttpAdapterHost } from '@nestjs/core';

@Catch()
export class CatchEverythingFilter implements ExceptionFilter {
  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}

  catch(exception: unknown, host: ArgumentsHost): void {
    // In certain situations `httpAdapter` might not be available in the
    // constructor method, thus we should resolve it here.
    const { httpAdapter } = this.httpAdapterHost;

    const ctx = host.switchToHttp();

    const httpStatus =
      exception instanceof HttpException
        ? exception.getStatus()
        : HttpStatus.INTERNAL_SERVER_ERROR;

    const responseBody = {
      statusCode: httpStatus,
      timestamp: new Date().toISOString(),
      path: httpAdapter.getRequestUrl(ctx.getRequest()),
    };

    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);
  }
}
```

----------------------------------------

TITLE: Implementing RolesGuard in NestJS
DESCRIPTION: Implementation of a guard that checks if the current user has the required roles to access a route. Uses Reflector to access route metadata and implements CanActivate interface.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Roles } from './roles.decorator';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const roles = this.reflector.get(Roles, context.getHandler());
    if (!roles) {
      return true;
    }
    const request = context.switchToHttp().getRequest();
    const user = request.user;
    return matchRoles(roles, user.roles);
  }
}
```

----------------------------------------

TITLE: REST API Controller Implementation
DESCRIPTION: Example of an auto-generated REST API controller with CRUD endpoints including create, read, update and delete operations
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/crud-generator.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  create(@Body() createUserDto: CreateUserDto) {
    return this.usersService.create(createUserDto);
  }

  @Get()
  findAll() {
    return this.usersService.findAll();
  }

  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.usersService.findOne(+id);
  }

  @Patch(':id')
  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {
    return this.usersService.update(+id, updateUserDto);
  }

  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.usersService.remove(+id);
  }
}
```

----------------------------------------

TITLE: Using DTO in NestJS Controller POST Method
DESCRIPTION: Demonstrates how to use the CreateCatDto in a NestJS controller's POST method, utilizing the @Body() decorator to access the request payload.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
@Post()
async create(@Body() createCatDto: CreateCatDto) {
  return 'This action adds a new cat';
}
```

----------------------------------------

TITLE: Defining Validation Rules with class-validator
DESCRIPTION: This code snippet defines a `CreateUserDto` class with validation rules using decorators from the `class-validator` package. These decorators specify the validation rules for the `email` and `password` properties. Any request to an endpoint using this DTO will be validated against these rules.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { IsEmail, IsNotEmpty } from 'class-validator';

export class CreateUserDto {
  @IsEmail()
  email: string;

  @IsNotEmpty()
  password: string;
}
```

----------------------------------------

TITLE: Configuring Swagger CLI Plugin in nest-cli.json
DESCRIPTION: JSON configuration to enable the Swagger CLI plugin in the NestJS project. This is added to the nest-cli.json file.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
{
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "plugins": ["@nestjs/swagger"]
  }
}
```

----------------------------------------

TITLE: Installing NestJS Config Package
DESCRIPTION: Installation command for adding @nestjs/config package to a NestJS project using npm.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i --save @nestjs/config
```

----------------------------------------

TITLE: JWT Authentication Guard Implementation
DESCRIPTION: Implementation of AuthGuard that validates JWT tokens in incoming requests and extracts user payload.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
import {
  CanActivate,
  ExecutionContext,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { jwtConstants } from './constants';
import { Request } from 'express';

@Injectable()
export class AuthGuard implements CanActivate {
  constructor(private jwtService: JwtService) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest();
    const token = this.extractTokenFromHeader(request);
    if (!token) {
      throw new UnauthorizedException();
    }
    try {
      const payload = await this.jwtService.verifyAsync(
        token,
        {
          secret: jwtConstants.secret
        }
      );
      request['user'] = payload;
    } catch {
      throw new UnauthorizedException();
    }
    return true;
  }

  private extractTokenFromHeader(request: Request): string | undefined {
    const [type, token] = request.headers.authorization?.split(' ') ?? [];
    return type === 'Bearer' ? token : undefined;
  }
}
```

----------------------------------------

TITLE: Re-exporting Modules in NestJS
DESCRIPTION: Shows how to re-export an imported module, making it available to other modules that import this one.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [CommonModule],
  exports: [CommonModule],
})
export class CoreModule {}
```

----------------------------------------

TITLE: Using Custom Providers with useValue in NestJS
DESCRIPTION: This example demonstrates how to use custom providers with the useValue syntax in NestJS. It shows how to inject a mock CatsService for testing purposes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { CatsService } from './cats.service';

const mockCatsService = {
  /* mock implementation
  ...
  */
};

@Module({
  imports: [CatsModule],
  providers: [
    {
      provide: CatsService,
      useValue: mockCatsService,
    },
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Type-Safe Environment Variables
DESCRIPTION: Shows how to use TypeScript generics for type-safe environment variable access
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
interface EnvironmentVariables {
  PORT: number;
  TIMEOUT: string;
}

// somewhere in the code
constructor(private configService: ConfigService<EnvironmentVariables>) {
  const port = this.configService.get('PORT', { infer: true });

  // TypeScript Error: this is invalid as the URL property is not defined in EnvironmentVariables
  const url = this.configService.get('URL', { infer: true });
}
```

----------------------------------------

TITLE: Injecting Model into Service and Implementing CRUD Operations - TypeScript
DESCRIPTION: Injects the Cat Mongoose model into a service using the @InjectModel decorator. Demonstrates basic create and findAll methods for creating and retrieving Cat documents. Requires @nestjs/mongoose and a registered Cat model; inputs are DTO objects and outputs are Mongoose documents.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import { Model } from 'mongoose';
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Cat } from './schemas/cat.schema';
import { CreateCatDto } from './dto/create-cat.dto';

@Injectable()
export class CatsService {
  constructor(@InjectModel(Cat.name) private catModel: Model<Cat>) {}

  async create(createCatDto: CreateCatDto): Promise<Cat> {
    const createdCat = new this.catModel(createCatDto);
    return createdCat.save();
  }

  async findAll(): Promise<Cat[]> {
    return this.catModel.find().exec();
  }
}

```

----------------------------------------

TITLE: JWT Authentication Service Implementation
DESCRIPTION: Implementation of AuthService class that handles user authentication and JWT token generation using @nestjs/jwt.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { UsersService } from '../users/users.service';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService
  ) {}

  async signIn(
    username: string,
    pass: string,
  ): Promise<{ access_token: string }> {
    const user = await this.usersService.findOne(username);
    if (user?.password !== pass) {
      throw new UnauthorizedException();
    }
    const payload = { sub: user.userId, username: user.username };
    return {
      access_token: await this.jwtService.signAsync(payload),
    };
  }
}
```

----------------------------------------

TITLE: Implementing Local Strategy for Passport Authentication in NestJS
DESCRIPTION: This code defines a LocalStrategy class that extends PassportStrategy to implement local authentication. It uses the AuthService to validate user credentials and throws an UnauthorizedException if the user is not found.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Strategy } from 'passport-local';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { AuthService } from './auth.service';

@Injectable()
export class LocalStrategy extends PassportStrategy(Strategy) {
  constructor(private authService: AuthService) {
    super();
  }

  async validate(username: string, password: string): Promise<any> {
    const user = await this.authService.validateUser(username, password);
    if (!user) {
      throw new UnauthorizedException();
    }
    return user;
  }
}
```

----------------------------------------

TITLE: JWT Auth Module Configuration
DESCRIPTION: NestJS module configuration for JWT authentication including global JWT module registration with expiration settings.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { UsersModule } from '../users/users.module';
import { JwtModule } from '@nestjs/jwt';
import { AuthController } from './auth.controller';
import { jwtConstants } from './constants';

@Module({
  imports: [
    UsersModule,
    JwtModule.register({
      global: true,
      secret: jwtConstants.secret,
      signOptions: { expiresIn: '60s' },
    }),
  ],
  providers: [AuthService],
  controllers: [AuthController],
  exports: [AuthService],
})
export class AuthModule {}
```

----------------------------------------

TITLE: Implementing Sequelize Transactions in NestJS Service
DESCRIPTION: Shows how to inject the Sequelize instance into a service and use it to create a managed transaction. This pattern ensures database operations are performed atomically and can be rolled back if an error occurs.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_33

LANGUAGE: typescript
CODE:
```
@Injectable()
export class UsersService {
  constructor(private sequelize: Sequelize) {}
}
```

LANGUAGE: typescript
CODE:
```
async createMany() {
  try {
    await this.sequelize.transaction(async t => {
      const transactionHost = { transaction: t };

      await this.userModel.create(
          { firstName: 'Abraham', lastName: 'Lincoln' },
          transactionHost,
      );
      await this.userModel.create(
          { firstName: 'John', lastName: 'Boothe' },
          transactionHost,
      );
    });
  } catch (err) {
    // Transaction has been rolled back
    // err is whatever rejected the promise chain returned to the transaction callback
  }
}
```

----------------------------------------

TITLE: Service Injection in NestJS
DESCRIPTION: This snippet demonstrates dependency injection in NestJS, showing how to inject the UsersService from the imported UsersModule into the AuthService. The constructor injection pattern is used to make the UsersService available within the AuthService.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { UsersService } from '../users/users.service';

@Injectable()
export class AuthService {
  constructor(private usersService: UsersService) {}
  /*
    Implementation that makes use of this.usersService
  */
}
```

----------------------------------------

TITLE: Defining User Entity for TypeORM in NestJS
DESCRIPTION: TypeScript code defining a User entity with TypeORM decorators for use in a NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column({ default: true })
  isActive: boolean;
}
```

----------------------------------------

TITLE: Configuring Multiple Mongoose Database Connections in NestJS
DESCRIPTION: Shows how to configure multiple database connections in the root application module using MongooseModule.forRoot. Each connection is given a unique name, which is mandatory when using multiple connections.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_16

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';

@Module({
  imports: [
    MongooseModule.forRoot('mongodb://localhost/test', {
      connectionName: 'cats',
    }),
    MongooseModule.forRoot('mongodb://localhost/users', {
      connectionName: 'users',
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Defining a Required-Fields DTO for Create Operations in NestJS (TypeScript)
DESCRIPTION: This code defines a DTO (Data Transfer Object) class with required fields for use in create operations. Each property (name, age, breed) is mandatory, and strict typing assists in validation and input enforcement by pipes like ValidationPipe. No additional dependencies beyond basic TypeScript/NestJS class conventions are required.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_14

LANGUAGE: typescript
CODE:
```
export class CreateCatDto {
  name: string;
  age: number;
  breed: string;
}
```

----------------------------------------

TITLE: Implementing Auto Mocking in NestJS Unit Tests using TypeScript
DESCRIPTION: This code snippet demonstrates how to set up auto mocking in a NestJS unit test. It uses the `useMocker()` method to create a mock factory for dependencies, including a specific mock for CatsService and a generic mock for other dependencies using jest-mock.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
// ...
import { ModuleMocker, MockFunctionMetadata } from 'jest-mock';

const moduleMocker = new ModuleMocker(global);

describe('CatsController', () => {
  let controller: CatsController;

  beforeEach(async () => {
    const moduleRef = await Test.createTestingModule({
      controllers: [CatsController],
    })
      .useMocker((token) => {
        const results = ['test1', 'test2'];
        if (token === CatsService) {
          return { findAll: jest.fn().mockResolvedValue(results) };
        }
        if (typeof token === 'function') {
          const mockMetadata = moduleMocker.getMetadata(
            token,
          ) as MockFunctionMetadata<any, any>;
          const Mock = moduleMocker.generateFromMetadata(mockMetadata);
          return new Mock();
        }
      })
      .compile();

    controller = moduleRef.get(CatsController);
  });
});
```

----------------------------------------

TITLE: Implementing a RolesGuard (JavaScript)
DESCRIPTION: This code implements a `RolesGuard`. It retrieves the required roles from the route's metadata using the `Reflector` class and checks if the user's roles include any of the required roles. It assumes that `request.user` contains the user's role information.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import { Injectable, Dependencies } from '@nestjs/common';
import { Reflector } from '@nestjs/core';

@Injectable()
@Dependencies(Reflector)
export class RolesGuard {
  constructor(reflector) {
    this.reflector = reflector;
  }

  canActivate(context) {
    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);
    if (!requiredRoles) {
      return true;
    }
    const { user } = context.switchToHttp().getRequest();
    return requiredRoles.some((role) => user.roles.includes(role));
  }
}
```

----------------------------------------

TITLE: Defining Cat Interface in NestJS
DESCRIPTION: Shows the structure of the Cat interface used in the CatsService. This interface defines the properties of a cat object.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/components.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
export interface Cat {
  name: string;
  age: number;
  breed: string;
}
```

----------------------------------------

TITLE: Creating a Custom Parameterized User Decorator in NestJS
DESCRIPTION: Demonstrates how to create a more flexible User decorator that can extract specific properties from the user object by passing a parameter.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { createParamDecorator, ExecutionContext } from '@nestjs/common';

export const User = createParamDecorator(
  (data: string, ctx: ExecutionContext) => {
    const request = ctx.switchToHttp().getRequest();
    const user = request.user;

    return data ? user?.[data] : user;
  },
);
```

----------------------------------------

TITLE: Creating Custom Public Decorator in NestJS
DESCRIPTION: This code creates a custom decorator named 'Public' using SetMetadata. It's used to mark routes as public, allowing them to bypass authentication.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
import { SetMetadata } from '@nestjs/common';

export const IS_PUBLIC_KEY = 'isPublic';
export const Public = () => SetMetadata(IS_PUBLIC_KEY, true);
```

----------------------------------------

TITLE: Configuring Redis Adapter in NestJS Application
DESCRIPTION: This code snippet shows how to set up and use the RedisIoAdapter in a NestJS application's main file.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule);
const redisIoAdapter = new RedisIoAdapter(app);
await redisIoAdapter.connectToRedis();

app.useWebSocketAdapter(redisIoAdapter);
```

----------------------------------------

TITLE: Implementing PoliciesGuard for Policy Enforcement - NestJS - TypeScript
DESCRIPTION: Defines a guard, PoliciesGuard, that retrieves policy handlers from route metadata, creates a user ability with CaslAbilityFactory, and checks all policies before route activation. Relies on Reflector and CaslAbilityFactory as dependencies, expecting the request object to hold the user. The guard supports both function and object handlers, calling every handler with the active user's ability and granting access only if all checks return true.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_24

LANGUAGE: TypeScript
CODE:
```
@Injectable()
export class PoliciesGuard implements CanActivate {
  constructor(
    private reflector: Reflector,
    private caslAbilityFactory: CaslAbilityFactory,
  ) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const policyHandlers =
      this.reflector.get<PolicyHandler[]>(
        CHECK_POLICIES_KEY,
        context.getHandler(),
      ) || [];

    const { user } = context.switchToHttp().getRequest();
    const ability = this.caslAbilityFactory.createForUser(user);

    return policyHandlers.every((handler) =>
      this.execPolicyHandler(handler, ability),
    );
  }

  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {
    if (typeof handler === 'function') {
      return handler(ability);
    }
    return handler.handle(ability);
  }
}
```

----------------------------------------

TITLE: E2E Testing with Fastify Adapter in NestJS
DESCRIPTION: Shows the configuration and implementation of e2e tests when using Fastify as the HTTP adapter. Demonstrates Fastify's built-in testing capabilities.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
let app: NestFastifyApplication;

beforeAll(async () => {
  app = moduleRef.createNestApplication<NestFastifyApplication>(
    new FastifyAdapter(),
  );

  await app.init();
  await app.getHttpAdapter().getInstance().ready();
});

it(`/GET cats`, () => {
  return app
    .inject({
      method: 'GET',
      url: '/cats',
    })
    .then((result) => {
      expect(result.statusCode).toEqual(200);
      expect(result.payload).toEqual(/* expectedPayload */);
    });
});

afterAll(async () => {
  await app.close();
});
```

----------------------------------------

TITLE: Creating Author Object Type with Code First Approach in TypeScript
DESCRIPTION: Implementation of the Author model using TypeScript classes with @ObjectType and @Field decorators from @nestjs/graphql. This demonstrates how to create GraphQL object types using the code first approach.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Field, Int, ObjectType } from '@nestjs/graphql';
import { Post } from './post';

@ObjectType()
export class Author {
  @Field(type => Int)
  id: number;

  @Field({ nullable: true })
  firstName?: string;

  @Field({ nullable: true })
  lastName?: string;

  @Field(type => [Post])
  posts: Post[];
}
```

----------------------------------------

TITLE: Running NestJS Application in Production with NODE_ENV
DESCRIPTION: Command to run a NestJS application in production, setting the NODE_ENV environment variable to 'production' for optimal performance and behavior.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ NODE_ENV=production node dist/main.js
```

----------------------------------------

TITLE: Installing ServeStaticModule Package in NestJS
DESCRIPTION: Command to install the @nestjs/serve-static package using npm package manager.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/serve-static.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install --save @nestjs/serve-static
```

----------------------------------------

TITLE: Controller Method Using ClassSerializerInterceptor
DESCRIPTION: Shows how to use the ClassSerializerInterceptor in a controller method to automatically apply serialization rules when returning a UserEntity instance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/serialization.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@UseInterceptors(ClassSerializerInterceptor)
@Get()
findOne(): UserEntity {
  return new UserEntity({
    id: 1,
    firstName: 'John',
    lastName: 'Doe',
    password: 'password',
  });
}
```

----------------------------------------

TITLE: Registering Providers in a NestJS Module
DESCRIPTION: This snippet illustrates how to register providers and controllers in a NestJS module using the @Module decorator. It sets up the AppModule with CatsController and CatsService.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CatsController } from './cats/cats.controller';
import { CatsService } from './cats/cats.service';

@Module({
  controllers: [CatsController],
  providers: [CatsService],
})
export class AppModule {}
```

----------------------------------------

TITLE: Creating an Optional-Fields DTO with PartialType Utility in NestJS (TypeScript)
DESCRIPTION: This demonstrates extending a base DTO class using the PartialType utility from @nestjs/mapped-types, automatically making all properties in the input class optional in the derived type. Ideal for update operations, this approach eliminates manual repetition and keeps DTOs DRY. Ensure @nestjs/mapped-types is installed and imported.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_15

LANGUAGE: typescript
CODE:
```
export class UpdateCatDto extends PartialType(CreateCatDto) {}
```

----------------------------------------

TITLE: Defining Response Models with @ApiProperty and Using @ApiCreatedResponse with type in NestJS
DESCRIPTION: This snippet defines a data transfer object (DTO) class for a 'Cat' with properties annotated by @ApiProperty for Swagger, and shows how to specify this model as the response type in @ApiCreatedResponse. This enhances API documentation by showing the structure of responses.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export class Cat {
  @ApiProperty()
  id: number;

  @ApiProperty()
  name: string;

  @ApiProperty()
  age: number;

  @ApiProperty()
  breed: string;
}

@ApiTags('cats')
@Controller('cats')
export class CatsController {
  @Post()
  @ApiCreatedResponse({
    description: 'The record has been successfully created.',
    type: Cat,
  })
  async create(@Body() createCatDto: CreateCatDto): Promise<Cat> {
    return this.catsService.create(createCatDto);
  }
}
```

----------------------------------------

TITLE: Implementing Redis-based Socket.IO Adapter in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a RedisIoAdapter class that extends the IoAdapter to enable Redis-based Socket.IO functionality in a NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { IoAdapter } from '@nestjs/platform-socket.io';
import { ServerOptions } from 'socket.io';
import { createAdapter } from '@socket.io/redis-adapter';
import { createClient } from 'redis';

export class RedisIoAdapter extends IoAdapter {
  private adapterConstructor: ReturnType<typeof createAdapter>;

  async connectToRedis(): Promise<void> {
    const pubClient = createClient({ url: `redis://localhost:6379` });
    const subClient = pubClient.duplicate();

    await Promise.all([pubClient.connect(), subClient.connect()]);

    this.adapterConstructor = createAdapter(pubClient, subClient);
  }

  createIOServer(port: number, options?: ServerOptions): any {
    const server = super.createIOServer(port, options);
    server.adapter(this.adapterConstructor);
    return server;
  }
}
```

----------------------------------------

TITLE: Configuring REQUEST Scope for a Controller in NestJS
DESCRIPTION: Shows how to set the scope of a controller to REQUEST using the ControllerOptions object. A request-scoped controller will create a new instance for each incoming request.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Controller({
  path: 'cats',
  scope: Scope.REQUEST,
})
export class CatsController {}
```

----------------------------------------

TITLE: Creating and Using a Custom Decorator for Reusable Paginated Responses in NestJS
DESCRIPTION: This snippet shows building a custom decorator 'ApiPaginatedResponse' that combines @ApiExtraModels and @ApiOkResponse with a schema referencing the paginated DTO and a specific model, making it easier to reuse in controllers with proper schema and type info, including customizable response titles.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
export const ApiPaginatedResponse = <TModel extends Type<any>>(model: TModel) => {
  return applyDecorators(
    ApiExtraModels(PaginatedDto, model),
    ApiOkResponse({
      schema: {
        allOf: [
          { $ref: getSchemaPath(PaginatedDto) },
          {
            properties: {
              results: {
                type: 'array',
                items: { $ref: getSchemaPath(model) },
              },
            },
          },
        ],
        title: `PaginatedResponseOf${model.name}`
      },
    })
  );
};
```

----------------------------------------

TITLE: Enabling Global ValidationPipe Transformation in NestJS (TypeScript)
DESCRIPTION: This code enables automatic global transformation of incoming payloads to DTO instances using ValidationPipe at the application level. By passing the transform:true option to app.useGlobalPipes, all incoming request bodies and parameters will be type-cast according to DTO definitions. Requires configuration in the main application bootstrap file and installation of @nestjs/common.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_11

LANGUAGE: typescript
CODE:
```
app.useGlobalPipes(
  new ValidationPipe({
    transform: true,
  }),
);
```

----------------------------------------

TITLE: Decrypting Text using AES-256-CTR in Node.js
DESCRIPTION: This snippet shows how to decrypt text that was encrypted using the AES-256-CTR algorithm. It uses the same key and initialization vector used for encryption.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/encryption-hashing.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { createDecipheriv } from 'crypto';

const decipher = createDecipheriv('aes-256-ctr', key, iv);
const decryptedText = Buffer.concat([
  decipher.update(encryptedText),
  decipher.final(),
]);
```

----------------------------------------

TITLE: Defining Model Relations with Sequelize Decorators
DESCRIPTION: Using the @HasMany decorator to establish a one-to-many relationship between User and Photo models in Sequelize.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_31

LANGUAGE: typescript
CODE:
```
import { Column, Model, Table, HasMany } from 'sequelize-typescript';
import { Photo } from '../photos/photo.model';

@Table
export class User extends Model {
  @Column
  firstName: string;

  @Column
  lastName: string;

  @Column({ defaultValue: true })
  isActive: boolean;

  @HasMany(() => Photo)
  photos: Photo[];
}
```

----------------------------------------

TITLE: Creating Feature Module in NestJS
DESCRIPTION: Demonstrates how to create a feature module (CatsModule) that groups related components like controllers and services. Shows the basic structure of a NestJS module using the @Module decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

@Module({
  controllers: [CatsController],
  providers: [CatsService],
})
export class CatsModule {}
```

----------------------------------------

TITLE: Hashing a Password with bcrypt in NestJS
DESCRIPTION: This snippet demonstrates how to hash a password using the bcrypt package in a NestJS application. It uses the hash function with a specified number of salt rounds.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/encryption-hashing.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import * as bcrypt from 'bcrypt';

const saltOrRounds = 10;
const password = 'random_password';
const hash = await bcrypt.hash(password, saltOrRounds);
```

----------------------------------------

TITLE: Using ParseFilePipeBuilder for File Validation in NestJS
DESCRIPTION: Demonstrates the use of ParseFilePipeBuilder to compose and construct file validators in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@UploadedFile(
  new ParseFilePipeBuilder()
    .addFileTypeValidator({
      fileType: 'jpeg',
    })
    .addMaxSizeValidator({
      maxSize: 1000
    })
    .build({
      errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY
    }),
)
file: Express.Multer.File,
```

----------------------------------------

TITLE: Setting Up Global Guards in NestJS
DESCRIPTION: Demonstration of registering global guards at application bootstrap and through module providers for dependency injection support.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule);
app.useGlobalGuards(new RolesGuard());
```

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { APP_GUARD } from '@nestjs/core';

@Module({
  providers: [
    {
      provide: APP_GUARD,
      useClass: RolesGuard,
    },
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Exporting Providers from Shared Module
DESCRIPTION: Demonstrates how to make a module shareable by exporting its providers, allowing other modules to access the same instance of services.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

@Module({
  controllers: [CatsController],
  providers: [CatsService],
  exports: [CatsService]
})
export class CatsModule {}
```

----------------------------------------

TITLE: Enabling Auto-Caching for Controller in NestJS
DESCRIPTION: Shows how to use the CacheInterceptor to enable auto-caching for a controller's responses.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@Controller()
@UseInterceptors(CacheInterceptor)
export class AppController {
  @Get()
  findAll(): string[] {
    return [];
  }
}
```

----------------------------------------

TITLE: Implementing WebSocket Authentication with subscriptions-transport-ws in NestJS
DESCRIPTION: Demonstrates how to implement authentication for WebSocket connections using the onConnect callback with the subscriptions-transport-ws package.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot<ApolloDriverConfig>({
  driver: ApolloDriver,
  subscriptions: {
    'subscriptions-transport-ws': {
      onConnect: (connectionParams) => {
        const authToken = connectionParams.authToken;
        if (!isValid(authToken)) {
          throw new Error('Token is not valid');
        }
        // extract user information from token
        const user = parseToken(authToken);
        // return user info to add them to the context later
        return { user };
      },
    }
  },
  context: ({ connection }) => {
    // connection.context will be equal to what was returned by the "onConnect" callback
  },
}),
```

----------------------------------------

TITLE: Injecting DataSource for TypeORM Transactions in NestJS Service
DESCRIPTION: Shows how to inject the TypeORM DataSource into a NestJS service for transaction management. This is the first step in setting up transaction handling using QueryRunner.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
@Injectable()
export class UsersService {
  constructor(private dataSource: DataSource) {}
}
```

----------------------------------------

TITLE: Defining One-to-Many Relationship in TypeORM Entity for NestJS
DESCRIPTION: Illustrates how to create a User entity with a one-to-many relationship to Photo entities using TypeORM decorators. The entity includes primary key generation, basic columns with defaults, and the relationship definition.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm';
import { Photo } from '../photos/photo.entity';

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column({ default: true })
  isActive: boolean;

  @OneToMany(type => Photo, photo => photo.user)
  photos: Photo[];
}
```

----------------------------------------

TITLE: Defining Validation Rules for Route Parameters
DESCRIPTION: This code snippet defines a `FindOneParams` class with a validation rule using the `@IsNumberString` decorator from the `class-validator` package. This ensures that the `id` parameter in the route is a number.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { IsNumberString } from 'class-validator';

export class FindOneParams {
  @IsNumberString()
  id: string;
}
```

----------------------------------------

TITLE: Bootstrapping Swagger in NestJS Application
DESCRIPTION: TypeScript code to initialize Swagger in a NestJS application. It sets up the Swagger document builder, creates the document, and sets up the Swagger UI endpoint.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { NestFactory } from '@nestjs/core';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  const config = new DocumentBuilder()
    .setTitle('Cats example')
    .setDescription('The cats API description')
    .setVersion('1.0')
    .addTag('cats')
    .build();
  const documentFactory = () => SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, documentFactory);

  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();
```

----------------------------------------

TITLE: Configuring MulterModule Asynchronously with Factory Function in NestJS
DESCRIPTION: This snippet illustrates how to use registerAsync() with a factory function to set MulterModule options asynchronously. It shows both a simple example and one that injects dependencies.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
MulterModule.registerAsync({
  useFactory: () => ({
    dest: './upload',
  }),
});
```

LANGUAGE: typescript
CODE:
```
MulterModule.registerAsync({
  imports: [ConfigModule],
  useFactory: async (configService: ConfigService) => ({
    dest: configService.get<string>('MULTER_DEST'),
  }),
  inject: [ConfigService],
});
```

----------------------------------------

TITLE: Creating JwtAuthGuard for Route Protection in NestJS
DESCRIPTION: Implements a simple JwtAuthGuard class that extends the built-in AuthGuard from @nestjs/passport, specifying 'jwt' as the strategy to use for protecting routes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_18

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {}
```

----------------------------------------

TITLE: Async Configuration of HTTP Module
DESCRIPTION: Examples of different approaches to configure HTTP module asynchronously using factory functions and dependency injection.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
HttpModule.registerAsync({
  useFactory: () => ({
    timeout: 5000,
    maxRedirects: 5,
  }),
});
```

LANGUAGE: typescript
CODE:
```
HttpModule.registerAsync({
  imports: [ConfigModule],
  useFactory: async (configService: ConfigService) => ({
    timeout: configService.get('HTTP_TIMEOUT'),
    maxRedirects: configService.get('HTTP_MAX_REDIRECTS'),
  }),
  inject: [ConfigService],
});
```

----------------------------------------

TITLE: Creating a NestJS Standalone Application
DESCRIPTION: Demonstrates how to initialize a NestJS standalone application using NestFactory.createApplicationContext(). This creates a wrapper around the NestJS IoC container without any network listeners.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/application-context.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule);
  // your application logic here ...
}
bootstrap();
```

----------------------------------------

TITLE: Using Guards and Pipes with GraphQL Queries in NestJS
DESCRIPTION: Demonstrates how to apply authentication guards and parameter validation pipes to a GraphQL query handler. The example shows applying AuthGuard for authorization and ParseIntPipe for parameter validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@Query('author')
@UseGuards(AuthGuard)
async getAuthor(@Args('id', ParseIntPipe) id: number) {
  return this.authorsService.findOneById(id);
}
```

----------------------------------------

TITLE: Generating NestJS Components
DESCRIPTION: Command syntax for generating new components using schematics. Supports creating various components like controllers, services, modules etc. with customizable options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ nest generate <schematic> <name> [options]
$ nest g <schematic> <name> [options]
```

----------------------------------------

TITLE: Adding a Basic Job to a Bull Queue
DESCRIPTION: Demonstrates how to add a job to a Bull queue by calling the queue's add() method and passing a serializable JavaScript object that represents the job data.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
const job = await this.audioQueue.add({
  foo: 'bar',
});
```

----------------------------------------

TITLE: Configuring Sentry Module in NestJS
DESCRIPTION: Integration of SentryModule into the main application module configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Module } from "@nestjs/common";
import { SentryModule } from "@sentry/nestjs/setup";
import { AppController } from "./app.controller";
import { AppService } from "./app.service";

@Module({
  imports: [
    SentryModule.forRoot(),
    // ...other modules
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
```

----------------------------------------

TITLE: Implementing Protected Routes with JWT Authentication in NestJS
DESCRIPTION: Sets up controller routes including a login endpoint protected by LocalAuthGuard and a profile endpoint protected by JwtAuthGuard. The login route returns a JWT token while the profile route returns the authenticated user information.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
import { Controller, Get, Request, Post, UseGuards } from '@nestjs/common';
import { JwtAuthGuard } from './auth/jwt-auth.guard';
import { LocalAuthGuard } from './auth/local-auth.guard';
import { AuthService } from './auth/auth.service';

@Controller()
export class AppController {
  constructor(private authService: AuthService) {}

  @UseGuards(LocalAuthGuard)
  @Post('auth/login')
  async login(@Request() req) {
    return this.authService.login(req.user);
  }

  @UseGuards(JwtAuthGuard)
  @Get('profile')
  getProfile(@Request() req) {
    return req.user;
  }
}
```

LANGUAGE: javascript
CODE:
```
import { Controller, Dependencies, Bind, Get, Request, Post, UseGuards } from '@nestjs/common';
import { JwtAuthGuard } from './auth/jwt-auth.guard';
import { LocalAuthGuard } from './auth/local-auth.guard';
import { AuthService } from './auth/auth.service';

@Dependencies(AuthService)
@Controller()
export class AppController {
  constructor(authService) {
    this.authService = authService;
  }

  @UseGuards(LocalAuthGuard)
  @Post('auth/login')
  @Bind(Request())
  async login(req) {
    return this.authService.login(req.user);
  }

  @UseGuards(JwtAuthGuard)
  @Get('profile')
  @Bind(Request())
  getProfile(req) {
    return req.user;
  }
}
```

----------------------------------------

TITLE: Implementing TypeORM Transactions with QueryRunner in NestJS
DESCRIPTION: Demonstrates how to implement database transactions using TypeORM's QueryRunner in a NestJS service. This approach provides full control over transaction lifecycle with explicit commit and rollback handling.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
async createMany(users: User[]) {
  const queryRunner = this.dataSource.createQueryRunner();

  await queryRunner.connect();
  await queryRunner.startTransaction();
  try {
    await queryRunner.manager.save(users[0]);
    await queryRunner.manager.save(users[1]);

    await queryRunner.commitTransaction();
  } catch (err) {
    // since we have errors lets rollback the changes we made
    await queryRunner.rollbackTransaction();
  } finally {
    // you need to release a queryRunner which was manually instantiated
    await queryRunner.release();
  }
}
```

----------------------------------------

TITLE: Using Wildcards in NestJS Route Paths
DESCRIPTION: Shows how to implement wildcard routes in NestJS controllers. The example demonstrates using an asterisk to match any combination of characters at the end of a path.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Get('abcd/*')
findAll() {
  return 'This route uses a wildcard';
}
```

----------------------------------------

TITLE: Overriding Providers in Test Environment
DESCRIPTION: Demonstrates how to override providers when creating a TestingModule for testing purposes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
const moduleRef = await Test.createTestingModule({
  imports: [AppModule],
})
  .overrideProvider(JwtAuthGuard)
  .useClass(MockAuthGuard)
  .compile();
```

----------------------------------------

TITLE: Configuring CacheModule with Extra Providers in NestJS
DESCRIPTION: This snippet shows how to pass additional providers when configuring the CacheModule asynchronously. It demonstrates adding extra providers that will be merged with the module providers.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_21

LANGUAGE: typescript
CODE:
```
CacheModule.registerAsync({
  imports: [ConfigModule],
  useClass: ConfigService,
  extraProviders: [MyAdditionalProvider],
});
```

----------------------------------------

TITLE: Excluding Route for All HTTP Methods from Global Prefix
DESCRIPTION: Demonstrates how to exclude a route from the global prefix for all HTTP methods using a simple string-based configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/global-prefix.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
app.setGlobalPrefix('v1', { exclude: ['cats'] });
```

----------------------------------------

TITLE: Implementing Command Handler
DESCRIPTION: Command handler implementation that processes the command and updates the application state while returning the specified result type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@CommandHandler(KillDragonCommand)
export class KillDragonHandler implements ICommandHandler<KillDragonCommand> {
  constructor(private repository: HeroesRepository) {}

  async execute(command: KillDragonCommand) {
    const { heroId, dragonId } = command;
    const hero = this.repository.findOneById(+heroId);

    hero.killEnemy(dragonId);
    await this.repository.persist(hero);

    return {
      actionId: crypto.randomUUID(),
    }
  }
}
```

----------------------------------------

TITLE: Supporting Multiple File Uploads with @ApiProperty in NestJS
DESCRIPTION: This snippet defines a DTO for multiple files upload, with @ApiProperty indicating an array of binary files. Use in conjunction with file upload endpoints to handle multiple files.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
class FilesUploadDto {
  @ApiProperty({ type: 'array', items: { type: 'string', format: 'binary' } })
  files: any[];
}
```

----------------------------------------

TITLE: Mocking MikroORM repositories using getRepositoryToken() in NestJS testing in TypeScript
DESCRIPTION: Shows how to configure testing modules by providing mocks for repositories using the getRepositoryToken() helper to generate injection tokens corresponding to entities or custom repositories. This allows services consuming repositories to receive mocked implementations during tests.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_12

LANGUAGE: typescript
CODE:
```
@Module({
  providers: [
    PhotoService,
    {
      // or when you have a custom repository: `provide: PhotoRepository`
      provide: getRepositoryToken(Photo),
      useValue: mockedRepository,
    },
  ],
})
export class PhotoModule {}
```

----------------------------------------

TITLE: JSON Log Output Format Example
DESCRIPTION: Shows the structure of JSON formatted logs when JSON logging is enabled.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
  "level": "log",
  "pid": 19096,
  "timestamp": 1607370779834,
  "message": "Starting Nest application...",
  "context": "NestFactory"
}
```

----------------------------------------

TITLE: Creating a Cron Job with @Cron Decorator in NestJS
DESCRIPTION: Shows how to create a cron job using the @Cron decorator in NestJS, specifying a cron pattern and a name for the job.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
@Cron('* * 8 * * *', {
  name: 'notifications',
})
triggerNotifications() {}
```

----------------------------------------

TITLE: Defining Sequelize Entity Model
DESCRIPTION: Definition of a Sequelize model using TypeScript decorators to represent a database table.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Table, Column, Model } from 'sequelize-typescript';

@Table
export class Cat extends Model {
  @Column
  name: string;

  @Column
  age: number;

  @Column
  breed: string;
}
```

----------------------------------------

TITLE: Async Configuration with Factory Function - TypeScript
DESCRIPTION: Demonstrates asynchronous configuration of the ThrottlerModule using a factory function. It imports the ConfigModule, injects the ConfigService, and uses it to retrieve TTL and limit values from the configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_11

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ThrottlerModule.forRootAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (config: ConfigService) => [
        {
          ttl: config.get('THROTTLE_TTL'),
          limit: config.get('THROTTLE_LIMIT'),
        },
      ],
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Configuring TypeORM in NestJS AppModule
DESCRIPTION: TypeScript code to import and configure TypeORM in the root AppModule of a NestJS application. It sets up the database connection and other TypeORM options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';

@Module({
  imports: [
    TypeOrmModule.forRoot({
      type: 'mysql',
      host: 'localhost',
      port: 3306,
      username: 'root',
      password: 'root',
      database: 'test',
      entities: [],
      synchronize: true,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Configuring Swagger UI Options in NestJS TypeScript
DESCRIPTION: This code snippet demonstrates how to configure Swagger UI options in a NestJS application. It shows an example of disabling the Swagger UI while still allowing access to JSON API definitions using the SwaggerCustomOptions interface.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_6

LANGUAGE: TypeScript
CODE:
```
const options: SwaggerCustomOptions = {
    ui: false, // Swagger UI is disabled
    raw: ['json'], // JSON API definition is still accessible (YAML is disabled)
};
SwaggerModule.setup('api', app, options);
```

----------------------------------------

TITLE: Creating a Generic Base Resolver in NestJS GraphQL
DESCRIPTION: This snippet shows how to create a generic base resolver class using TypeScript generics and the @Resolver decorator with the isAbstract option.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
function BaseResolver<T extends Type<unknown>>(classRef: T): any {
  @Resolver({ isAbstract: true })
  abstract class BaseResolverHost {
    @Query(() => [classRef], { name: `findAll${classRef.name}` })
    async findAll(): Promise<T[]> {
      return [];
    }
  }
  return BaseResolverHost;
}
```

----------------------------------------

TITLE: Async Configuration with useClass - TypeScript
DESCRIPTION: Illustrates asynchronous configuration of the ThrottlerModule using the `useClass` syntax.  `ThrottlerConfigService` must implement the `ThrottlerOptionsFactory` interface.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_12

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ThrottlerModule.forRootAsync({
      imports: [ConfigModule],
      useClass: ThrottlerConfigService,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Configuring GraphQL Playground Settings
DESCRIPTION: Example of configuring GraphQL module with specific playground and debug settings using Apollo driver.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      playground: false,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Defining Data Transfer Object (DTO) in TypeScript
DESCRIPTION: Creates a CreateCatDto class with three properties: name, age, and breed. This DTO is used to define the structure of data sent in POST requests.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
export class CreateCatDto {
  name: string;
  age: number;
  breed: string;
}
```

----------------------------------------

TITLE: Handling Multipart Data without File Upload in NestJS
DESCRIPTION: This snippet demonstrates how to use the NoFilesInterceptor to accept multipart/form-data without allowing file uploads. It sets multipart data as attributes on the request body and throws a BadRequestException for any file uploads.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
@Post('upload')
@UseInterceptors(NoFilesInterceptor())
handleMultiPartData(@Body() body) {
  console.log(body)
}
```

----------------------------------------

TITLE: Service-Level Logger Implementation
DESCRIPTION: Demonstrates how to implement logging within a service class using the Logger from @nestjs/common with context.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { Logger, Injectable } from '@nestjs/common';

@Injectable()
class MyService {
  private readonly logger = new Logger(MyService.name);

  doSomething() {
    this.logger.log('Doing something...');
  }
}
```

----------------------------------------

TITLE: Accessing Underlying TCP Driver in NestJS
DESCRIPTION: Shows how to access the underlying TCP driver instance using the unwrap() method for advanced use cases.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
const netServer = this.client.unwrap<Server>();
```

LANGUAGE: typescript
CODE:
```
const netServer = server.unwrap<Server>();
```

----------------------------------------

TITLE: Installing class-validator and class-transformer
DESCRIPTION: This command installs the `class-validator` and `class-transformer` packages, which are required for using the `ValidationPipe` in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i --save class-validator class-transformer
```

----------------------------------------

TITLE: Creating Custom Roles Decorator in NestJS
DESCRIPTION: Creates a custom Roles decorator using Reflector.createDecorator to attach role metadata to route handlers. The decorator accepts an array of role strings as input.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Reflector } from '@nestjs/core';

export const Roles = Reflector.createDecorator<string[]>();
```

----------------------------------------

TITLE: Basic ConfigModule Integration
DESCRIPTION: Basic setup of ConfigModule in the root AppModule to enable configuration management.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';

@Module({
  imports: [ConfigModule.forRoot()],
})
export class AppModule {}
```

----------------------------------------

TITLE: Implementing Validation Pipe in NestJS Microservice
DESCRIPTION: Demonstrates how to bind a validation pipe to a microservice message pattern handler. Uses ValidationPipe with custom exception factory to throw RpcException for validation errors. The method accumulates an array of numbers, with proper error handling for invalid inputs.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/pipes.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new RpcException(errors) }))
@MessagePattern({ cmd: 'sum' })
accumulate(data: number[]): number {
  return (data || []).reduce((a, b) => a + b);
}
```

LANGUAGE: typescript
CODE:
```
@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new RpcException(errors) }))
@MessagePattern({ cmd: 'sum' })
accumulate(data) {
  return (data || []).reduce((a, b) => a + b);
}
```

----------------------------------------

TITLE: Parsing and Validating Array Query Parameters with ParseArrayPipe (TypeScript)
DESCRIPTION: This controller method uses ParseArrayPipe to extract and validate comma-separated values from a query parameter (ids), converting each entry to a number. The separator option specifies comma-delimitation, and items:Number enforces a numeric array. Ensure ParseArrayPipe is imported from @nestjs/common. Useful for REST endpoints that accept array filters.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_22

LANGUAGE: typescript
CODE:
```
@Get()
findByIds(
  @Query('ids', new ParseArrayPipe({ items: Number, separator: ',' }))
  ids: number[],
) {
  return 'This action returns users by ids';
}
```

----------------------------------------

TITLE: Advanced NestJS Testing with Test Class
DESCRIPTION: Example of using the @nestjs/testing package's Test class for more robust testing. It demonstrates creating a test module, compiling it, and retrieving instances for testing.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Test } from '@nestjs/testing';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

describe('CatsController', () => {
  let catsController: CatsController;
  let catsService: CatsService;

  beforeEach(async () => {
    const moduleRef = await Test.createTestingModule({
        controllers: [CatsController],
        providers: [CatsService],
      }).compile();

    catsService = moduleRef.get(CatsService);
    catsController = moduleRef.get(CatsController);
  });

  describe('findAll', () => {
    it('should return an array of cats', async () => {
      const result = ['test'];
      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);

      expect(await catsController.findAll()).toBe(result);
    });
  });
});
```

----------------------------------------

TITLE: Creating Factory Providers with useFactory in NestJS
DESCRIPTION: This example shows how to use the useFactory syntax to create providers dynamically. It includes an optional provider injection and demonstrates how to correlate the inject list with factory function arguments.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
const connectionProvider = {
  provide: 'CONNECTION',
  useFactory: (optionsProvider: MyOptionsProvider, optionalProvider?: string) => {
    const options = optionsProvider.get();
    return new DatabaseConnection(options);
  },
  inject: [MyOptionsProvider, { token: 'SomeOptionalProvider', optional: true }],
};

@Module({
  providers: [
    connectionProvider,
    MyOptionsProvider,
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Importing and Configuring MongooseModule in AppModule - NestJS TypeScript
DESCRIPTION: Imports MongooseModule into the root application module and configures the connection URI for MongoDB. Requires @nestjs/mongoose and MongoDB to be set up and running. The 'forRoot' method accepts the MongoDB connection string and optional configuration; outputs an initialized Mongoose connection for use in the app.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';

@Module({
  imports: [MongooseModule.forRoot('mongodb://localhost/nest')],
})
export class AppModule {}

```

----------------------------------------

TITLE: Accessing configuration values using ConfigService in NestJS
DESCRIPTION: This snippet demonstrates how to use the ConfigService instance to retrieve configuration values by calling the get method with a configuration key.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_32

LANGUAGE: typescript
CODE:
```
const port = configService.get('PORT');
```

----------------------------------------

TITLE: Creating a Nest.js Library with CLI
DESCRIPTION: Command to generate a new library in a Nest.js monorepo using the CLI. This creates the library structure in the libs folder.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/libraries.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ nest g library my-library
```

----------------------------------------

TITLE: Implementing Service with Repository Injection
DESCRIPTION: Service implementation showing repository injection and data access methods.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Injectable, Inject } from '@nestjs/common';
import { CreateCatDto } from './dto/create-cat.dto';
import { Cat } from './cat.entity';

@Injectable()
export class CatsService {
  constructor(
    @Inject('CATS_REPOSITORY')
    private catsRepository: typeof Cat
  ) {}

  async findAll(): Promise<Cat[]> {
    return this.catsRepository.findAll<Cat>();
  }
}
```

----------------------------------------

TITLE: Adding Jobs to Queue
DESCRIPTION: Example of adding a job to the queue with custom payload data
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const job = await this.audioQueue.add('transcode', {
  foo: 'bar',
});
```

----------------------------------------

TITLE: Defining Standard NestJS Package Scripts
DESCRIPTION: Provides example script definitions for a project's `package.json` file. These scripts ('build', 'start', 'start:dev', 'start:debug') utilize the locally installed NestJS CLI commands (`nest build`, `nest start`) to standardize build and execution workflows, including features like hot-reloading (`--watch`) and debugging (`--debug`).
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/scripts.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
"build": "nest build",
"start": "nest start",
"start:dev": "nest start --watch",
"start:debug": "nest start --debug --watch",
```

----------------------------------------

TITLE: Configuring Bull Module with Simple Factory Function in TypeScript
DESCRIPTION: Uses the forRootAsync method with a factory function to asynchronously configure the Bull module with Redis connection details.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_35

LANGUAGE: typescript
CODE:
```
BullModule.forRootAsync({
  useFactory: () => ({
    redis: {
      host: 'localhost',
      port: 6379,
    },
  }),
});
```

----------------------------------------

TITLE: Creating Custom Getter Functions for Config Service in NestJS (TypeScript)
DESCRIPTION: Implements a custom service that wraps ConfigService with typed getter methods for retrieving configuration values in a more intuitive way.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_22

LANGUAGE: typescript
CODE:
```
@Injectable()
export class ApiConfigService {
  constructor(private configService: ConfigService) {}

  get isAuthEnabled(): boolean {
    return this.configService.get('AUTH_ENABLED') === 'true';
  }
}
```

----------------------------------------

TITLE: Publishing Events in a Mutation Resolver in NestJS
DESCRIPTION: Demonstrates how to publish events using PubSub within a mutation resolver to trigger subscriptions.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
@Mutation(() => Comment)
async addComment(
  @Args('postId', { type: () => Int }) postId: number,
  @Args('comment', { type: () => Comment }) comment: CommentInput,
  @Context('pubsub') pubSub: PubSub,
) {
  const newComment = this.commentsService.addComment({ id: postId, comment });
  await pubSub.publish({
    topic: 'commentAdded',
    payload: {
      commentAdded: newComment
    }
  });
  return newComment;
}
```

----------------------------------------

TITLE: Using Built-in File Validators with ParseFilePipe in NestJS
DESCRIPTION: Example of using built-in MaxFileSizeValidator and FileTypeValidator with ParseFilePipe in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@UploadedFile(
  new ParseFilePipe({
    validators: [
      new MaxFileSizeValidator({ maxSize: 1000 }),
      new FileTypeValidator({ fileType: 'image/jpeg' }),
    ],
  }),
)
file: Express.Multer.File,
```

----------------------------------------

TITLE: Configuring HTTP Module with Options
DESCRIPTION: Example of configuring the HTTP module with custom options like timeout and maxRedirects.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    HttpModule.register({
      timeout: 5000,
      maxRedirects: 5,
    }),
  ],
  providers: [CatsService],
})
export class CatsModule {}
```

----------------------------------------

TITLE: Referencing an Array of Mongoose Subdocuments in Parent Schema
DESCRIPTION: Illustrates how to define a parent schema (`Person`) that embeds an array of another schema (`Name`) as a property using the `@Prop` decorator with array syntax. Includes type overrides for correct TypeScript typing of the array.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_39

LANGUAGE: typescript
CODE:
```
@@filename(name.schema)
@Schema()
export class Person {
  @Prop([NameSchema])
  name: Name[];
}

export const PersonSchema = SchemaFactory.createForClass(Person);

export type PersonDocumentOverride = {
  name: Types.DocumentArray<Name>;
};

export type PersonDocument = HydratedDocument<Person, PersonDocumentOverride>;
```

----------------------------------------

TITLE: Configuring Async Database Connection in NestJS with TypeORM
DESCRIPTION: This snippet shows how to set up an asynchronous database connection using TypeORM in NestJS. It demonstrates the use of a factory function to provide database configuration options dynamically.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
TypeOrmModule.forRootAsync({
  imports: [ConfigModule],
  useFactory: (configService: ConfigService) => ({
    type: 'mysql',
    host: configService.get('HOST'),
    port: +configService.get('PORT'),
    username: configService.get('USERNAME'),
    password: configService.get('PASSWORD'),
    database: configService.get('DATABASE'),
    entities: [],
    synchronize: true,
  }),
  inject: [ConfigService],
});
```

----------------------------------------

TITLE: Implementing Dynamic ConfigModule in NestJS
DESCRIPTION: Implementation of a ConfigModule as a dynamic module with a static register method. This pattern allows the module to be imported with configuration options. The register method returns a DynamicModule object.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { DynamicModule, Module } from '@nestjs/common';
import { ConfigService } from './config.service';

@Module({})
export class ConfigModule {
  static register(): DynamicModule {
    return {
      module: ConfigModule,
      providers: [ConfigService],
      exports: [ConfigService],
    };
  }
}
```

----------------------------------------

TITLE: Dynamic Sub-domain Routing with Host Parameters in NestJS
DESCRIPTION: Shows how to capture dynamic values from the host using tokens and the @HostParam decorator. The example demonstrates extracting the account name from a sub-domain.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
@Controller({ host: ':account.example.com' })
export class AccountController {
  @Get()
  getInfo(@HostParam('account') account: string) {
    return account;
  }
}
```

----------------------------------------

TITLE: Retrieving ConfigService instance in NestJS main.ts
DESCRIPTION: This snippet shows how to get an instance of the ConfigService in the main.ts file of a NestJS application using the app.get() method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_31

LANGUAGE: typescript
CODE:
```
const configService = app.get(ConfigService);
```

----------------------------------------

TITLE: Registering gRPC Client using ClientsModule in NestJS
DESCRIPTION: Demonstrates how to register a gRPC client package using ClientsModule.register() method with transport and proto file configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
imports: [
  ClientsModule.register([
    {
      name: 'HERO_PACKAGE',
      transport: Transport.GRPC,
      options: {
        package: 'hero',
        protoPath: join(__dirname, 'hero/hero.proto'),
      },
    },
  ]),
];
```

----------------------------------------

TITLE: Creating a @Roles() Decorator (JavaScript)
DESCRIPTION: This code defines a custom `@Roles()` decorator using `SetMetadata` from `@nestjs/common`. This decorator allows specifying which roles are required to access a particular route. The `ROLES_KEY` constant is used to store the metadata. This is the javascript version.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { SetMetadata } from '@nestjs/common';

export const ROLES_KEY = 'roles';
export const Roles = (...roles) => SetMetadata(ROLES_KEY, roles);
```

----------------------------------------

TITLE: Injecting ModuleRef for Request-Scoped Providers in Authentication Strategy
DESCRIPTION: Shows how to inject the ModuleRef in a strategy's constructor to access request-scoped providers. This setup enables strategies to use request-scoped dependencies like authentication services.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_27

LANGUAGE: typescript
CODE:
```
constructor(private moduleRef: ModuleRef) {
  super({
    passReqToCallback: true,
  });
}
```

----------------------------------------

TITLE: Creating a Subscription Handler in NestJS (Code-First Approach)
DESCRIPTION: Demonstrates how to create a subscription handler using the @Subscription() decorator and PubSub class. This example shows a basic subscription for adding comments.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const pubSub = new PubSub();

@Resolver(() => Author)
export class AuthorResolver {
  // ...
  @Subscription(() => Comment)
  commentAdded() {
    return pubSub.asyncIterableIterator('commentAdded');
  }
}
```

----------------------------------------

TITLE: Implementing a GraphQL Resolver in NestJS
DESCRIPTION: This snippet shows how to create a resolver class in NestJS for handling GraphQL queries. It includes methods for resolving the 'author' query and the 'posts' field of the Author type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
@Resolver('Author')
export class AuthorsResolver {
  constructor(
    private authorsService: AuthorsService,
    private postsService: PostsService,
  ) {}

  @Query()
  async author(@Args('id') id: number) {
    return this.authorsService.findOneById(id);
  }

  @ResolveField()
  async posts(@Parent() author) {
    const { id } = author;
    return this.postsService.findAll({ authorId: id });
  }
}
```

----------------------------------------

TITLE: Subscribing to Kafka Instance Status Updates in NestJS
DESCRIPTION: This code demonstrates how to subscribe to the 'status' stream of a Kafka client to receive real-time updates on the connection and state of the underlying driver instance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
this.client.status.subscribe((status: KafkaStatus) => {
  console.log(status);
});
```

----------------------------------------

TITLE: Creating a Basic Bull Queue Consumer in NestJS
DESCRIPTION: Shows how to create a consumer class using the @Processor decorator, which associates the class with a specific named queue.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_24

LANGUAGE: typescript
CODE:
```
import { Processor } from '@nestjs/bull';

@Processor('audio')
export class AudioConsumer {}
```

----------------------------------------

TITLE: Starting a Database Session in NestJS with Mongoose
DESCRIPTION: Demonstrates how to start a Mongoose database session within a NestJS service using the injected Connection object. This method is recommended for managing transactions and ensures proper integration with NestJS's dependency injection.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_15

LANGUAGE: typescript
CODE:
```
import { InjectConnection } from '@nestjs/mongoose';
import { Connection } from 'mongoose';

@Injectable()
export class CatsService {
  constructor(@InjectConnection() private readonly connection: Connection) {}

  async startTransaction() {
    const session = await this.connection.startSession();
    session.startTransaction();
    // Your transaction logic here
  }
}
```

----------------------------------------

TITLE: Dynamically Adding an Interval in NestJS
DESCRIPTION: Shows how to dynamically create and add a new interval using the SchedulerRegistry's addInterval method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
addInterval(name: string, milliseconds: number) {
  const callback = () => {
    this.logger.warn(`Interval ${name} executing at time (${milliseconds})!`);
  };

  const interval = setInterval(callback, milliseconds);
  this.schedulerRegistry.addInterval(name, interval);
}
```

----------------------------------------

TITLE: Injecting EntityManager and MikroORM instances in a NestJS service using TypeScript
DESCRIPTION: Example of how to inject MikroORM instance and the EntityManager from the respective driver package (here for SQLite) into a NestJS service for performing database operations. This example assumes the MikroOrmModule is properly configured to provide these instances.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_4

LANGUAGE: typescript
CODE:
```
// Import everything from your driver package or `@mikro-orm/knex`
import { EntityManager, MikroORM } from '@mikro-orm/sqlite';

@Injectable()
export class MyService {
  constructor(
    private readonly orm: MikroORM,
    private readonly em: EntityManager,
  ) {}
}
```

----------------------------------------

TITLE: Implementing a Command Handler with Event Publishing in NestJS CQRS
DESCRIPTION: Example of a Command Handler that uses EventPublisher to merge event publishing capabilities into a model instance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
@CommandHandler(KillDragonCommand)
export class KillDragonHandler implements ICommandHandler<KillDragonCommand> {
  constructor(
    private repository: HeroesRepository,
    private publisher: EventPublisher,
  ) {}

  async execute(command: KillDragonCommand) {
    const { heroId, dragonId } = command;
    const hero = this.publisher.mergeObjectContext(
      await this.repository.findOneById(+heroId),
    );
    hero.killEnemy(dragonId);
    hero.commit();
  }
}
```

----------------------------------------

TITLE: Filtering Subscriptions in NestJS GraphQL
DESCRIPTION: Demonstrates how to filter subscription events using the filter property. This example filters comments based on their title.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Subscription(() => Comment, {
  filter: (payload, variables) =>
    payload.commentAdded.title === variables.title,
})
commentAdded(@Args('title') title: string) {
  return pubSub.asyncIterableIterator('commentAdded');
}
```

----------------------------------------

TITLE: Implementing Pipe Execution Order in NestJS
DESCRIPTION: This example shows how pipes are executed in a sequence from global to controller to route level. It demonstrates that GeneralValidationPipe runs first for all parameters, followed by RouteSpecificPipe, with parameters processed from last to first.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/request-lifecycle.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@UsePipes(GeneralValidationPipe)
@Controller('cats')
export class CatsController {
  constructor(private catsService: CatsService) {}

  @UsePipes(RouteSpecificPipe)
  @Patch(':id')
  updateCat(
    @Body() body: UpdateCatDTO,
    @Param() params: UpdateCatParams,
    @Query() query: UpdateCatQuery,
  ) {
    return this.catsService.updateCat(body, params, query);
  }
}
```

----------------------------------------

TITLE: Creating Post Object Type with Code First Approach in TypeScript
DESCRIPTION: Implementation of the Post model using TypeScript classes with @ObjectType and @Field decorators. This demonstrates how to define fields with different types and nullability options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Field, Int, ObjectType } from '@nestjs/graphql';

@ObjectType()
export class Post {
  @Field(type => Int)
  id: number;

  @Field()
  title: string;

  @Field(type => Int, { nullable: true })
  votes?: number;
}
```

----------------------------------------

TITLE: Encrypting Text using AES-256-CTR in Node.js
DESCRIPTION: This snippet demonstrates how to encrypt text using the AES-256-CTR algorithm with Node.js crypto module. It includes generating a key from a password, creating an initialization vector, and encrypting the text.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/encryption-hashing.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { createCipheriv, randomBytes, scrypt } from 'crypto';
import { promisify } from 'util';

const iv = randomBytes(16);
const password = 'Password used to generate key';

// The key length is dependent on the algorithm.
// In this case for aes256, it is 32 bytes.
const key = (await promisify(scrypt)(password, 'salt', 32)) as Buffer;
const cipher = createCipheriv('aes-256-ctr', key, iv);

const textToEncrypt = 'Nest';
const encryptedText = Buffer.concat([
  cipher.update(textToEncrypt),
  cipher.final(),
]);
```

----------------------------------------

TITLE: Implementing Custom Kafka Exception Filter in NestJS
DESCRIPTION: This code snippet defines a custom Exception Filter for Kafka events to manage retry logic. It allows retrying problematic events up to a configurable number of times before skipping them.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
import { Catch, ArgumentsHost, Logger } from '@nestjs/common';
import { BaseExceptionFilter } from '@nestjs/core';
import { KafkaContext } from '../ctx-host';

@Catch()
export class KafkaMaxRetryExceptionFilter extends BaseExceptionFilter {
  private readonly logger = new Logger(KafkaMaxRetryExceptionFilter.name);

  constructor(
    private readonly maxRetries: number,
    // Optional custom function executed when max retries are exceeded
    private readonly skipHandler?: (message: any) => Promise<void>,
  ) {
    super();
  }

  async catch(exception: unknown, host: ArgumentsHost) {
    const kafkaContext = host.switchToRpc().getContext<KafkaContext>();
    const message = kafkaContext.getMessage();
    const currentRetryCount = this.getRetryCountFromContext(kafkaContext);

    if (currentRetryCount >= this.maxRetries) {
      this.logger.warn(
        `Max retries (${
          this.maxRetries
        }) exceeded for message: ${JSON.stringify(message)}`,
      );

      if (this.skipHandler) {
        try {
          await this.skipHandler(message);
        } catch (err) {
          this.logger.error('Error in skipHandler:', err);
        }
      }

      try {
        await this.commitOffset(kafkaContext);
      } catch (commitError) {
        this.logger.error('Failed to commit offset:', commitError);
      }
      return; // Stop propagating the exception
    }

    // If retry count is below the maximum, proceed with the default Exception Filter logic
    super.catch(exception, host);
  }

  private getRetryCountFromContext(context: KafkaContext): number {
    const headers = context.getMessage().headers || {};
    const retryHeader = headers['retryCount'] || headers['retry-count'];
    return retryHeader ? Number(retryHeader) : 0;
  }

  private async commitOffset(context: KafkaContext): Promise<void> {
    const consumer = context.getConsumer && context.getConsumer();
    if (!consumer) {
      throw new Error('Consumer instance is not available from KafkaContext.');
    }

    const topic = context.getTopic && context.getTopic();
    const partition = context.getPartition && context.getPartition();
    const message = context.getMessage();
    const offset = message.offset;

    if (!topic || partition === undefined || offset === undefined) {
      throw new Error(
        'Incomplete Kafka message context for committing offset.',
      );
    }

    await consumer.commitOffsets([
      {
        topic,
        partition,
        // When committing an offset, commit the next number (i.e., current offset + 1)
        offset: (Number(offset) + 1).toString(),
      },
    ]);
  }
}
```

----------------------------------------

TITLE: Implementing a GraphQL Mutation (Schema-First Approach)
DESCRIPTION: Creating an upvotePost mutation using the schema-first approach in NestJS. The resolver method takes a postId argument and calls a service method to handle the business logic of upvoting a post.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@Mutation()
async upvotePost(@Args('postId') postId: number) {
  return this.postsService.upvoteById({ id: postId });
}
```

----------------------------------------

TITLE: Implementing WebSocket Event Handler with Interceptor in TypeScript
DESCRIPTION: Example of using an interceptor with a WebSocket subscription handler. Shows both TypeScript and JavaScript syntax options for handling WebSocket events with transformation interceptors.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/interceptors.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@UseInterceptors(new TransformInterceptor())
@SubscribeMessage('events')
handleEvent(client: Client, data: unknown): WsResponse<unknown> {
  const event = 'events';
  return { event, data };
}
```

LANGUAGE: typescript
CODE:
```
@UseInterceptors(new TransformInterceptor())
@SubscribeMessage('events')
handleEvent(client, data) {
  const event = 'events';
  return { event, data };
}
```

----------------------------------------

TITLE: Injecting the REQUEST Object in a Service in NestJS
DESCRIPTION: Demonstrates how to access the original request object in a request-scoped provider by injecting the REQUEST token. This is useful for HTTP server-based applications using Express.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Injectable, Scope, Inject } from '@nestjs/common';
import { REQUEST } from '@nestjs/core';
import { Request } from 'express';

@Injectable({ scope: Scope.REQUEST })
export class CatsService {
  constructor(@Inject(REQUEST) private request: Request) {}
}
```

----------------------------------------

TITLE: Conditional Module Loading for GET Requests with NestJS LazyModuleLoader
DESCRIPTION: Example of lazy loading a CacheModule only for GET requests to optimize serverless function performance. This approach prevents the Redis connection from slowing down the bootstrap time for non-GET requests that don't require caching.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
if (request.method === RequestMethod[RequestMethod.GET]) {
  const { CacheModule } = await import('./cache.module');
  const moduleRef = await this.lazyModuleLoader.load(() => CacheModule);

  const { CacheService } = await import('./cache.service');
  const cacheService = moduleRef.get(CacheService);

  return cacheService.get(ENDPOINT_KEY);
}
```

----------------------------------------

TITLE: Defining Lazy Loadable Module
DESCRIPTION: Example of a module definition that can be loaded lazily using LazyModuleLoader.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lazy-loading-modules.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Module({
  providers: [LazyService],
  exports: [LazyService],
})
export class LazyModule {}
```

----------------------------------------

TITLE: Implementing DTO with Class Validator Decorators
DESCRIPTION: CreateCatDto class definition using class-validator decorators for property validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
import { IsString, IsInt } from 'class-validator';

export class CreateCatDto {
  @IsString()
  name: string;

  @IsInt()
  age: number;

  @IsString()
  breed: string;
}
```

----------------------------------------

TITLE: Implementing a Separate Process Processor for Bull Queue in NestJS
DESCRIPTION: Example of a standalone processor function that runs in a separate process. This processor doesn't have access to NestJS dependency injection and must contain all dependencies it needs.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_34

LANGUAGE: typescript
CODE:
```
import { Job, DoneCallback } from 'bull';

export default function (job: Job, cb: DoneCallback) {
  console.log(`[${process.pid}] ${JSON.stringify(job.data)}`);
  cb(null, 'It works');
}
```

----------------------------------------

TITLE: Implementing a Query Handler in NestJS CQRS
DESCRIPTION: Example of creating a Query Handler for the GetHeroQuery. It implements the IQueryHandler interface and uses the @QueryHandler decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@QueryHandler(GetHeroQuery)
export class GetHeroHandler implements IQueryHandler<GetHeroQuery> {
  constructor(private repository: HeroesRepository) {}

  async execute(query: GetHeroQuery) {
    return this.repository.findOneById(query.hero);
  }
}
```

----------------------------------------

TITLE: Implementing Role-Based Guard in NestJS
DESCRIPTION: Basic template for a role-based guard implementation that can be extended to check user roles for access control. Currently returns true for all requests but can be modified for actual role validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Observable } from 'rxjs';

@Injectable()
export class RolesGuard implements CanActivate {
  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    return true;
  }
}
```

----------------------------------------

TITLE: Configuring MongooseModule Async with Factory (Simple)
DESCRIPTION: Demonstrates basic asynchronous configuration of the MongooseModule using a factory function that returns connection options. This is suitable when options are not static but don't require external dependencies.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_30

LANGUAGE: typescript
CODE:
```
MongooseModule.forRootAsync({
  useFactory: () => ({
    uri: 'mongodb://localhost/nest',
  }),
});
```

----------------------------------------

TITLE: Creating a CurrentUser Parameter Decorator for GraphQL in NestJS
DESCRIPTION: Shows how to create a custom parameter decorator to extract the current authenticated user from the GraphQL context. This decorator simplifies access to the authenticated user in resolvers.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_33

LANGUAGE: typescript
CODE:
```
import { createParamDecorator, ExecutionContext } from '@nestjs/common';
import { GqlExecutionContext } from '@nestjs/graphql';

export const CurrentUser = createParamDecorator(
  (data: unknown, context: ExecutionContext) => {
    const ctx = GqlExecutionContext.create(context);
    return ctx.getContext().req.user;
  },
);
```

----------------------------------------

TITLE: Injecting ConfigService Constructor
DESCRIPTION: Demonstrates constructor injection of ConfigService in a class
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
constructor(private configService: ConfigService) {}
```

----------------------------------------

TITLE: Implementing Job Processing Logic in NestJS BullMQ
DESCRIPTION: Implementation of a consumer with job processing logic including progress tracking.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { Processor, WorkerHost } from '@nestjs/bullmq';
import { Job } from 'bullmq';

@Processor('audio')
export class AudioConsumer extends WorkerHost {
  async process(job: Job<any, any, string>): Promise<any> {
    let progress = 0;
    for (let i = 0; i < 100; i++) {
      await doSomething(job.data);
      progress += 1;
      await job.updateProgress(progress);
    }
    return {};
  }
}
```

----------------------------------------

TITLE: Integration Testing CatsApiService with NestJS TestingModule
DESCRIPTION: TypeScript code for integration testing CatsApiService using NestJS TestingModule and nock for HTTP request mocking, verifying correct module configuration and API interaction.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Test } from '@nestjs/testing';
import * as nock from 'nock';

describe('Cats Api Service Integration Test', () => {
  let catsApiService: CatsApiService;

  beforeAll(async () => {
    const moduleRef = await Test.createTestingModule({
      imports: [CatsModule],
    }).compile();

    catsApiService = moduleRef.get(CatsApiService);
  });

  afterEach(() => {
    nock.cleanAll();
  });

  it('should fetch cat by id using real HttpClient', async () => {
    const catFixture: Cat = { id: 1, name: 'Catty' };

    nock('https://api.cats.com')
      .get('/cats/1')
      .reply(200, catFixture);

    const cat = await catsApiService.getCatById(1);
    expect(cat).toEqual<Cat>(catFixture);
  });
});
```

----------------------------------------

TITLE: Extending ThrottlerGuard for WebSocket Rate Limiting - TypeScript
DESCRIPTION: Extends the ThrottlerGuard to support WebSocket requests by overriding handleRequest. It retrieves the client IP address from the raw socket connection, applies rate limiting using storageService, and throws exceptions when limits are exceeded. This approach is necessary since WebSocket contexts differ from HTTP and require manual extraction of IPs and request keys.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_9

LANGUAGE: typescript
CODE:
```
@Injectable()
export class WsThrottlerGuard extends ThrottlerGuard {
  async handleRequest(requestProps: ThrottlerRequest): Promise<boolean> {
    const {
      context,
      limit,
      ttl,
      throttler,
      blockDuration,
      getTracker,
      generateKey,
    } = requestProps;

    const client = context.switchToWs().getClient();
    const tracker = client._socket.remoteAddress;
    const key = generateKey(context, tracker, throttler.name);
    const { totalHits, timeToExpire, isBlocked, timeToBlockExpire } =
      await this.storageService.increment(
        key,
        ttl,
        limit,
        blockDuration,
        throttler.name,
      );

    const getThrottlerSuffix = (name: string) =>
      name === 'default' ? '' : `-${name}`;

    // Throw an error when the user reached their limit.
    if (isBlocked) {
      await this.throwThrottlingException(context, {
        limit,
        ttl,
        key,
        tracker,
        totalHits,
        timeToExpire,
        isBlocked,
        timeToBlockExpire,
      });
    }

    return true;
  }
}
```

----------------------------------------

TITLE: Complete HTTP Service Implementation with Error Handling
DESCRIPTION: Full example of implementing HTTP service with RxJS operators for handling responses and errors.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { catchError, firstValueFrom } from 'rxjs';

@Injectable()
export class CatsService {
  private readonly logger = new Logger(CatsService.name);
  constructor(private readonly httpService: HttpService) {}

  async findAll(): Promise<Cat[]> {
    const { data } = await firstValueFrom(
      this.httpService.get<Cat[]>('http://localhost:3000/cats').pipe(
        catchError((error: AxiosError) => {
          this.logger.error(error.response.data);
          throw 'An error happened!';
        }),
      ),
    );
    return data;
  }
}
```

----------------------------------------

TITLE: Handling Query Parameters in NestJS Controller
DESCRIPTION: Shows how to use the @Query() decorator to extract and use query parameters in a GET request handler.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
@Get()
async findAll(@Query('age') age: number, @Query('breed') breed: string) {
  return `This action returns all cats filtered by age: ${age} and breed: ${breed}`;
}
```

----------------------------------------

TITLE: Setting Basic Global Route Prefix in NestJS
DESCRIPTION: Demonstrates how to set a basic global prefix 'v1' for all HTTP routes in a NestJS application using setGlobalPrefix() method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/global-prefix.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule);
app.setGlobalPrefix('v1');
```

----------------------------------------

TITLE: Using Composite Auth Decorator in NestJS Controllers
DESCRIPTION: Demonstrates how to use a composite decorator that combines multiple authentication-related decorators into a single declaration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
@Get('users')
@Auth('admin')
findAllUsers() {}
```

----------------------------------------

TITLE: Implementing Interceptor with MessagePattern in NestJS Microservices (TypeScript)
DESCRIPTION: This snippet demonstrates how to use an interceptor with a microservice message pattern in NestJS. It shows the implementation of an 'accumulate' method that sums an array of numbers, decorated with both UseInterceptors and MessagePattern. The TransformInterceptor is manually instantiated and applied at the method level.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/interceptors.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@UseInterceptors(new TransformInterceptor())
@MessagePattern({ cmd: 'sum' })
accumulate(data: number[]): number {
  return (data || []).reduce((a, b) => a + b);
}
```

----------------------------------------

TITLE: Configuring BullMQ Root Module
DESCRIPTION: Setup of BullModule in the root AppModule with Redis connection configuration
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { BullModule } from '@nestjs/bullmq';

@Module({
  imports: [
    BullModule.forRoot({
      connection: {
        host: 'localhost',
        port: 6379,
      },
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Configuring CaslModule in NestJS (TypeScript)
DESCRIPTION: Defines the `CaslModule` using the `@Module` decorator from `@nestjs/common`. It registers `CaslAbilityFactory` in the `providers` array, making it available for injection within this module, and includes it in the `exports` array to allow other modules that import `CaslModule` to inject `CaslAbilityFactory`. This makes the factory reusable across the application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_17

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CaslAbilityFactory } from './casl-ability.factory';

@Module({
  providers: [CaslAbilityFactory],
  exports: [CaslAbilityFactory],
})
export class CaslModule {}
```

----------------------------------------

TITLE: Overriding Modules in NestJS Testing
DESCRIPTION: Demonstrates how to override modules during testing using the overrideModule method with TestingModule.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
const moduleRef = await Test.createTestingModule({
  imports: [AppModule],
})
  .overrideModule(CatsModule)
  .useModule(AlternateCatsModule)
  .compile();
```

----------------------------------------

TITLE: Applying Controller-Scoped Exception Filter in NestJS
DESCRIPTION: Demonstrates how to apply an exception filter to all route handlers within a controller. This applies the HttpExceptionFilter to every method in the CatsController.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@Controller()
@UseFilters(new HttpExceptionFilter())
export class CatsController {}
```

----------------------------------------

TITLE: Using OmitType in GraphQL Schema
DESCRIPTION: Example of using OmitType utility to create a new type by excluding specific properties from an existing type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@InputType()
export class UpdateUserInput extends OmitType(CreateUserInput, [
  'email',
] as const) {}
```

----------------------------------------

TITLE: Implementing Versioned Middleware in NestJS
DESCRIPTION: This snippet demonstrates how to apply middleware to a specific version of a route in NestJS. It uses the MiddlewareConsumer to configure the LoggerMiddleware for version '2' of the '/cats' endpoint.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';
import { LoggerMiddleware } from './common/middleware/logger.middleware';
import { CatsModule } from './cats/cats.module';
import { CatsController } from './cats/cats.controller';

@Module({
  imports: [CatsModule],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer
      .apply(LoggerMiddleware)
      .forRoutes({ path: 'cats', method: RequestMethod.GET, version: '2' });
  }
}
```

----------------------------------------

TITLE: Defining GraphQL Argument Class in NestJS
DESCRIPTION: This snippet shows how to create a dedicated arguments class for a GraphQL query using @ArgsType() decorator. It demonstrates field definitions and validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { MinLength } from 'class-validator';
import { Field, ArgsType } from '@nestjs/graphql';

@ArgsType()
class GetAuthorArgs {
  @Field({ nullable: true })
  firstName?: string;

  @Field({ defaultValue: '' })
  @MinLength(3)
  lastName: string;
}
```

----------------------------------------

TITLE: Registering RabbitMQ Client Module
DESCRIPTION: Configuration for registering RabbitMQ client using ClientsModule with connection and queue settings
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'MATH_SERVICE',
        transport: Transport.RMQ,
        options: {
          urls: ['amqp://localhost:5672'],
          queue: 'cats_queue',
          queueOptions: {
            durable: false
          },
        },
      },
    ]),
  ]
  ...
})
```

----------------------------------------

TITLE: Configuring AuthModule with Passport in NestJS
DESCRIPTION: This snippet shows how to configure the AuthModule to use Passport features. It imports the necessary modules and providers, including the LocalStrategy.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { UsersModule } from '../users/users.module';
import { PassportModule } from '@nestjs/passport';
import { LocalStrategy } from './local.strategy';

@Module({
  imports: [UsersModule, PassportModule],
  providers: [AuthService, LocalStrategy],
})
export class AuthModule {}
```

----------------------------------------

TITLE: Multiple Resolver Schema Generation
DESCRIPTION: Shows how to generate a schema with multiple resolver classes. Accepts an array of resolver references to create a more complex schema.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/schema-generator.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const schema = await gqlSchemaFactory.create([
  RecipesResolver,
  AuthorsResolver,
  PostsResolvers,
]);
```

----------------------------------------

TITLE: Configurable Module Definition using ConfigurableModuleBuilder
DESCRIPTION: Implementation of module configuration using ConfigurableModuleBuilder for automated async support.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
import { ConfigurableModuleBuilder } from '@nestjs/common';
import { ConfigModuleOptions } from './interfaces/config-module-options.interface';

export const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =
  new ConfigurableModuleBuilder<ConfigModuleOptions>().build();
```

----------------------------------------

TITLE: Configuring ClientsModule Registration in NestJS
DESCRIPTION: Shows how to register microservice clients using ClientsModule with static configuration for TCP transport.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ClientsModule.register([
      { name: 'MATH_SERVICE', transport: Transport.TCP },
    ]),
  ],
})
```

----------------------------------------

TITLE: Binding Method-Scoped Exception Filter Using Instance in NestJS
DESCRIPTION: Demonstrates how to apply an exception filter to a specific route handler method by creating a new filter instance. This example shows applying HttpExceptionFilter to the create() method in CatsController.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@Post()
@UseFilters(new HttpExceptionFilter())
async create(@Body() createCatDto: CreateCatDto) {
  throw new ForbiddenException();
}
```

----------------------------------------

TITLE: Processing RabbitMQ Message Headers
DESCRIPTION: Example of accessing and processing RabbitMQ message headers on the server side
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@MessagePattern('replace-emoji')
replaceEmoji(@Payload() data: string, @Ctx() context: RmqContext): string {
  const { properties: { headers } } = context.getMessage();
  return headers['x-version'] === '1.0.0' ? '🐱' : '🐈';
}
```

----------------------------------------

TITLE: Creating Asynchronous Provider with useFactory in NestJS
DESCRIPTION: Demonstrates how to create an asynchronous provider using useFactory syntax that returns a Promise. This pattern is useful for establishing database connections or other async initialization tasks before the application starts.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/async-components.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
{
  provide: 'ASYNC_CONNECTION',
  useFactory: async () => {
    const connection = await createConnection(options);
    return connection;
  },
}
```

----------------------------------------

TITLE: Implementing Local Authentication Guard for GraphQL in NestJS
DESCRIPTION: Shows how to create a GraphQL-compatible local authentication guard that merges GraphQL arguments with the request body. This ensures Passport can access the credentials from GraphQL mutations for validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_35

LANGUAGE: typescript
CODE:
```
@Injectable()
export class GqlLocalAuthGuard extends AuthGuard('local') {
  getRequest(context: ExecutionContext) {
    const gqlExecutionContext = GqlExecutionContext.create(context);
    const gqlContext = gqlExecutionContext.getContext();
    const gqlArgs = gqlExecutionContext.getArgs();

    gqlContext.req.body = { ...gqlContext.req.body, ...gqlArgs };
    return gqlContext.req;
  }
}
```

----------------------------------------

TITLE: Accessing Underlying HTTP Library Instance in NestJS
DESCRIPTION: Demonstrates how to access the underlying HTTP library instance (e.g., Express) using the getInstance() method of the HttpAdapter.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/http-adapter.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
const instance = httpAdapter.getInstance();
```

----------------------------------------

TITLE: Implementing Logout Route in NestJS
DESCRIPTION: This code snippet demonstrates how to implement a logout route in NestJS. It uses the LocalAuthGuard and calls req.logout() to clear the user's session.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
@UseGuards(LocalAuthGuard)
@Post('auth/logout')
async logout(@Request() req) {
  return req.logout();
}
```

----------------------------------------

TITLE: Accessing Controller and Handler Information
DESCRIPTION: Demonstrates how to use ExecutionContext to obtain the current handler name and controller class name during request processing.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
const methodKey = ctx.getHandler().name; // "create"
const className = ctx.getClass().name; // "CatsController"
```

----------------------------------------

TITLE: Implementing Users Service in NestJS
DESCRIPTION: Implementation of UsersService with in-memory user storage and user lookup functionality. Includes type definition and mock user data.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';

// This should be a real class/interface representing a user entity
export type User = any;

@Injectable()
export class UsersService {
  private readonly users = [
    {
      userId: 1,
      username: 'john',
      password: 'changeme',
    },
    {
      userId: 2,
      username: 'maria',
      password: 'guess',
    },
  ];

  async findOne(username: string): Promise<User | undefined> {
    return this.users.find(user => user.username === username);
  }
}
```

----------------------------------------

TITLE: Importing Dynamic Database Module in AppModule
DESCRIPTION: Demonstrates how to import and configure a dynamic database module in the application's root module with specific entities.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { DatabaseModule } from './database/database.module';
import { User } from './users/entities/user.entity';

@Module({
  imports: [DatabaseModule.forRoot([User])],
})
export class AppModule {}
```

----------------------------------------

TITLE: Defining Nested Object Schemas Using raw() - TypeScript
DESCRIPTION: Uses the @Prop decorator and the raw() function from @nestjs/mongoose to define inline nested objects for properties without separate class definitions, such as contact information or personal details. Useful for representing flexible structures; input: object properties; output: nested object schema.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_9

LANGUAGE: typescript
CODE:
```
@Prop(raw({
  firstName: { type: String },
  lastName: { type: String }
}))
details: Record<string, any>;

```

----------------------------------------

TITLE: Extending ThrottlerGuard for GraphQL Rate Limiting - TypeScript
DESCRIPTION: Shows how to extend ThrottlerGuard for use with GraphQL by overriding getRequestResponse to extract req and res from the GraphQL execution context. This adaptation allows the ThrottlerGuard to correctly access the HTTP request and response objects within GraphQL resolvers for rate limiting enforcement.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_10

LANGUAGE: typescript
CODE:
```
@Injectable()
export class GqlThrottlerGuard extends ThrottlerGuard {
  getRequestResponse(context: ExecutionContext) {
    const gqlCtx = GqlExecutionContext.create(context);
    const ctx = gqlCtx.getContext();
    return { req: ctx.req, res: ctx.res };
  }
}
```

----------------------------------------

TITLE: Extending AuthGuard with Custom JWT Authentication in NestJS
DESCRIPTION: Demonstrates how to extend the built-in AuthGuard class to customize authentication logic and error handling for JWT authentication. This implementation adds hooks for custom authentication logic and proper error handling.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_21

LANGUAGE: typescript
CODE:
```
import {
  ExecutionContext,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  canActivate(context: ExecutionContext) {
    // Add your custom authentication logic here
    // for example, call super.logIn(request) to establish a session.
    return super.canActivate(context);
  }

  handleRequest(err, user, info) {
    // You can throw an exception based on either "info" or "err" arguments
    if (err || !user) {
      throw err || new UnauthorizedException();
    }
    return user;
  }
}
```

----------------------------------------

TITLE: Implementing an Asynchronous Message Handler in NestJS
DESCRIPTION: Demonstrates an asynchronous message handler using async/await syntax in a NestJS microservice controller.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@MessagePattern({ cmd: 'sum' })
async accumulate(data: number[]): Promise<number> {
  return (data || []).reduce((a, b) => a + b);
}
```

----------------------------------------

TITLE: Using OmitType for Excluding Properties in TypeScript
DESCRIPTION: Shows how to use OmitType to create a new DTO that excludes specific properties from the original DTO.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/mapped-types.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
export class UpdateCatDto extends OmitType(CreateCatDto, ['name'] as const) {}
```

----------------------------------------

TITLE: YAML Configuration Loader
DESCRIPTION: Implementation of a configuration loader that reads and parses YAML configuration files with validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { readFileSync } from 'fs';
import * as yaml from 'js-yaml';
import { join } from 'path';

const YAML_CONFIG_FILENAME = 'config.yaml';

export default () => {
  const config = yaml.load(
    readFileSync(join(__dirname, YAML_CONFIG_FILENAME), 'utf8'),
  ) as Record<string, any>;

  if (config.http.port < 1024 || config.http.port > 49151) {
    throw new Error('HTTP port must be between 1024 and 49151');
  }

  return config;
};
```

----------------------------------------

TITLE: Using @CreateRequestContext decorator for request-scoped methods in NestJS queues with MikroORM in TypeScript
DESCRIPTION: Shows how to decorate service methods with @CreateRequestContext to create a new MikroORM request context for async operations that happen outside HTTP request lifecycle, such as in queue handlers or scheduled jobs. The MikroORM instance is injected and used internally by the decorator to initialize the request context automatically.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_11

LANGUAGE: typescript
CODE:
```
@Injectable()
export class MyService {
  constructor(private readonly orm: MikroORM) {}

  @CreateRequestContext()
  async doSomething() {
    // this will be executed in a separate context
  }
}
```

----------------------------------------

TITLE: Building a Nest.js Library
DESCRIPTION: Command to build a library in a Nest.js monorepo using the CLI. This compiles the library code according to its tsconfig.lib.json configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/libraries.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ nest build my-library
```

----------------------------------------

TITLE: Registering Global Sentry Exception Filter
DESCRIPTION: Configuration for adding SentryGlobalFilter as a global exception handler in the application module.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Module } from "@nestjs/common";
import { APP_FILTER } from "@nestjs/core";
import { SentryGlobalFilter } from "@sentry/nestjs/setup";

@Module({
  providers: [
    {
      provide: APP_FILTER,
      useClass: SentryGlobalFilter,
    },
    // ..other providers
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Configuring WsAdapter in NestJS Application
DESCRIPTION: This code snippet demonstrates how to set up and use the WsAdapter in a NestJS application's main file.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule);
app.useWebSocketAdapter(new WsAdapter(app));
```

----------------------------------------

TITLE: Implementing HTTP Service in NestJS
DESCRIPTION: Example of implementing HttpService in a service class to make HTTP requests, showing both TypeScript and JavaScript syntax.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Injectable()
export class CatsService {
  constructor(private readonly httpService: HttpService) {}

  findAll(): Observable<AxiosResponse<Cat[]>> {
    return this.httpService.get('http://localhost:3000/cats');
  }
}
```

----------------------------------------

TITLE: Implementing TypeORM Health Check in NestJS
DESCRIPTION: Shows how to implement database health checks using TypeOrmHealthIndicator. The controller performs a simple ping check to verify database connectivity.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
@Controller('health')
export class HealthController {
  constructor(
    private health: HealthCheckService,
    private db: TypeOrmHealthIndicator,
  ) {}

  @Get()
  @HealthCheck()
  check() {
    return this.health.check([
      () => this.db.pingCheck('database'),
    ]);
  }
}
```

----------------------------------------

TITLE: Using a Custom GraphQL Driver in NestJS Module Configuration
DESCRIPTION: Shows how to register a custom GraphQL driver with the GraphQL module. This example configures the module to use the ExpressGraphQLDriver for handling GraphQL requests.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot({
  driver: ExpressGraphQLDriver,
});
```

----------------------------------------

TITLE: Using ParseFilePipe for File Validation in NestJS
DESCRIPTION: Demonstrates the use of ParseFilePipe for file validation in NestJS, allowing for multiple validators to be applied.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@Post('file')
uploadFileAndPassValidation(
  @Body() body: SampleDto,
  @UploadedFile(
    new ParseFilePipe({
      validators: [
        // ... Set of file validator instances here
      ]
    })
  )
  file: Express.Multer.File,
) {
  return {
    body,
    file: file.buffer.toString(),
  };
}
```

----------------------------------------

TITLE: Registering Global Exception Filter with Dependency Injection in NestJS
DESCRIPTION: Demonstrates how to register a global-scoped filter with dependency injection support by using the APP_FILTER token in a module's providers array.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { APP_FILTER } from '@nestjs/core';

@Module({
  providers: [
    {
      provide: APP_FILTER,
      useClass: HttpExceptionFilter,
    },
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Implementing Controller with Template Rendering
DESCRIPTION: Controller implementation using @Render decorator for static template rendering
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Get, Controller, Render } from '@nestjs/common';

@Controller()
export class AppController {
  @Get()
  @Render('index')
  root() {
    return { message: 'Hello world!' };
  }
}
```

----------------------------------------

TITLE: Implementing Command Class with Options
DESCRIPTION: Complete implementation of a command class using @Command and @Option decorators with various parameter parsing options
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/nest-commander.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Command, CommandRunner, Option } from 'nest-commander';
import { LogService } from './log.service';

interface BasicCommandOptions {
  string?: string;
  boolean?: boolean;
  number?: number;
}

@Command({ name: 'basic', description: 'A parameter parse' })
export class BasicCommand extends CommandRunner {
  constructor(private readonly logService: LogService) {
    super()
  }

  async run(
    passedParam: string[],
    options?: BasicCommandOptions,
  ): Promise<void> {
    if (options?.boolean !== undefined && options?.boolean !== null) {
      this.runWithBoolean(passedParam, options.boolean);
    } else if (options?.number) {
      this.runWithNumber(passedParam, options.number);
    } else if (options?.string) {
      this.runWithString(passedParam, options.string);
    } else {
      this.runWithNone(passedParam);
    }
  }

  @Option({
    flags: '-n, --number [number]',
    description: 'A basic number parser',
  })
  parseNumber(val: string): number {
    return Number(val);
  }

  @Option({
    flags: '-s, --string [string]',
    description: 'A string return',
  })
  parseString(val: string): string {
    return val;
  }

  @Option({
    flags: '-b, --boolean [boolean]',
    description: 'A boolean parser',
  })
  parseBoolean(val: string): boolean {
    return JSON.parse(val);
  }

  runWithString(param: string[], option: string): void {
    this.logService.log({ param, string: option });
  }

  runWithNumber(param: string[], option: number): void {
    this.logService.log({ param, number: option });
  }

  runWithBoolean(param: string[], option: boolean): void {
    this.logService.log({ param, boolean: option });
  }

  runWithNone(param: string[]): void {
    this.logService.log({ param });
  }
}
```

----------------------------------------

TITLE: Implementing Redirection in NestJS Controllers
DESCRIPTION: Demonstrates how to redirect responses to specific URLs using the @Redirect decorator. The example shows redirecting to the NestJS website with a 301 status code.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@Get()
@Redirect('https://nestjs.com', 301)
```

----------------------------------------

TITLE: Excluding Routes from Middleware
DESCRIPTION: Shows how to exclude specific routes from middleware application using the exclude() method with various path patterns.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
consumer
  .apply(LoggerMiddleware)
  .exclude(
    { path: 'cats', method: RequestMethod.GET },
    { path: 'cats', method: RequestMethod.POST },
    'cats/{*splat}',
  )
  .forRoutes(CatsController);
```

----------------------------------------

TITLE: Manual Offset Committing in NestJS Kafka Event Handler
DESCRIPTION: This code shows how to manually commit offsets in a NestJS Kafka event handler. It uses the KafkaContext to access the consumer and commit the offset after processing the message.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
@EventPattern('user.created')
async handleUserCreated(@Payload() data: IncomingMessage, @Ctx() context: KafkaContext) {
  // business logic

  const { offset } = context.getMessage();
  const partition = context.getPartition();
  const topic = context.getTopic();
  const consumer = context.getConsumer();
  await consumer.commitOffsets([{ topic, partition, offset }])
}
```

----------------------------------------

TITLE: Implementing Timeouts in NestJS Microservices
DESCRIPTION: Demonstrates how to implement timeout handling using RxJS timeout operator to prevent indefinite waiting in microservice calls.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_18

LANGUAGE: typescript
CODE:
```
this.client
  .send<TResult, TInput>(pattern, data)
  .pipe(timeout(5000));
```

----------------------------------------

TITLE: Excluding Properties with Class-Transformer in TypeScript
DESCRIPTION: Demonstrates how to create a UserEntity class with a password property that will be excluded from serialization using the @Exclude decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/serialization.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Exclude } from 'class-transformer';

export class UserEntity {
  id: number;
  firstName: string;
  lastName: string;

  @Exclude()
  password: string;

  constructor(partial: Partial<UserEntity>) {
    Object.assign(this, partial);
  }
}
```

----------------------------------------

TITLE: Installing NestJS HTTP Module Dependencies
DESCRIPTION: Command to install the required NestJS HTTP module and Axios packages using npm.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i --save @nestjs/axios axios
```

----------------------------------------

TITLE: Configuring GraphQL Module Number Scalar Mode
DESCRIPTION: Configuration for setting the number scalar mode to integer in GraphQL module options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot({
  buildSchemaOptions: {
    numberScalarMode: 'integer',
  }
}),
```

----------------------------------------

TITLE: Populating References in Repository Pattern - TypeScript
DESCRIPTION: Shows how to use the populate method on a Mongoose model to fetch owner references alongside cats in a service/repository function. Assumes Cat and Owner schemas are defined. Input: none; Output: resolved documents with populated owner field.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { Owner } from './schemas/owner.schema';

// e.g. inside a service or repository
async findAllPopulated() {
  return this.catModel.find().populate<{ owner: Owner }>("owner");
}

```

----------------------------------------

TITLE: Message Acknowledgement Implementation
DESCRIPTION: Implementation of manual message acknowledgement using RabbitMQ channel reference
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@MessagePattern('notifications')
getNotifications(@Payload() data: number[], @Ctx() context: RmqContext) {
  const channel = context.getChannelRef();
  const originalMsg = context.getMessage();

  channel.ack(originalMsg);
}
```

----------------------------------------

TITLE: Configuring AuthModule with JWT in NestJS
DESCRIPTION: Sets up the AuthModule with necessary imports and providers including the JWT strategy, LocalStrategy, and AuthService. The module registers JWT with configuration options like secret key and token expiration time.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { LocalStrategy } from './local.strategy';
import { JwtStrategy } from './jwt.strategy';
import { UsersModule } from '../users/users.module';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { jwtConstants } from './constants';

@Module({
  imports: [
    UsersModule,
    PassportModule,
    JwtModule.register({
      secret: jwtConstants.secret,
      signOptions: { expiresIn: '60s' },
    }),
  ],
  providers: [AuthService, LocalStrategy, JwtStrategy],
  exports: [AuthService],
})
export class AuthModule {}
```

LANGUAGE: javascript
CODE:
```
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { LocalStrategy } from './local.strategy';
import { JwtStrategy } from './jwt.strategy';
import { UsersModule } from '../users/users.module';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { jwtConstants } from './constants';

@Module({
  imports: [
    UsersModule,
    PassportModule,
    JwtModule.register({
      secret: jwtConstants.secret,
      signOptions: { expiresIn: '60s' },
    }),
  ],
  providers: [AuthService, LocalStrategy, JwtStrategy],
  exports: [AuthService],
})
export class AuthModule {}
```

----------------------------------------

TITLE: Setting Up a Feature Module with Sequelize Models
DESCRIPTION: Configuring a feature module (UsersModule) to use specific Sequelize models with the forFeature() method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_27

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { SequelizeModule } from '@nestjs/sequelize';
import { User } from './user.model';
import { UsersController } from './users.controller';
import { UsersService } from './users.service';

@Module({
  imports: [SequelizeModule.forFeature([User])],
  providers: [UsersService],
  controllers: [UsersController],
})
export class UsersModule {}
```

----------------------------------------

TITLE: Installing Class Validator Packages
DESCRIPTION: Command to install class-validator and class-transformer libraries for decorator-based validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
$ npm i --save class-validator class-transformer
```

----------------------------------------

TITLE: Basic Kafka Message Handler Implementation
DESCRIPTION: Demonstrates handling Kafka messages using the @MessagePattern decorator with payload serialization. Returns items after processing a dragon kill event.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@Controller()
export class HeroesController {
  @MessagePattern('hero.kill.dragon')
  killDragon(@Payload() message: KillDragonMessage): any {
    const dragonId = message.dragonId;
    const items = [
      { id: 1, name: 'Mythical Sword' },
      { id: 2, name: 'Key to Dungeon' },
    ];
    return items;
  }
}
```

----------------------------------------

TITLE: Importing a Module in NestJS
DESCRIPTION: This snippet shows how to create a consuming module (AuthModule) that imports another module (UsersModule) to gain access to its exported providers. The AuthModule also provides and exports its own service.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { UsersModule } from '../users/users.module';

@Module({
  imports: [UsersModule],
  providers: [AuthService],
  exports: [AuthService],
})
export class AuthModule {}
```

----------------------------------------

TITLE: Partial Configuration Registration
DESCRIPTION: Example of using partial registration for feature-specific configurations
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
import databaseConfig from './config/database.config';

@Module({
  imports: [ConfigModule.forFeature(databaseConfig)],
})
export class DatabaseModule {}
```

----------------------------------------

TITLE: Configuring Error Handling Options
DESCRIPTION: Application creation configuration with abort on error disabled for debugging purposes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/overview.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule, {
  snapshot: true,
  abortOnError: false, // <--- THIS
});
```

----------------------------------------

TITLE: Defining Command Class Structure
DESCRIPTION: Implementation of a command class that extends the base Command class with type specification for command execution result.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
export class KillDragonCommand extends Command<{
  actionId: string
}> {
  constructor(
    public readonly heroId: string,
    public readonly dragonId: string,
  ) {}
}
```

----------------------------------------

TITLE: Configuring Kafka Transport in NestJS Microservice
DESCRIPTION: Set up the Kafka transport mechanism in a NestJS microservice using the createMicroservice method. This configuration specifies the transport type and broker locations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.KAFKA,
  options: {
    client: {
      brokers: ['localhost:9092'],
    }
  }
});
```

----------------------------------------

TITLE: Dispatching Events in NestJS
DESCRIPTION: Demonstrates how to inject and use EventEmitter2 to dispatch events in a NestJS service or controller.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
constructor(private eventEmitter: EventEmitter2) {}

// ...

this.eventEmitter.emit(
  'order.created',
  new OrderCreatedEvent({
    orderId: 1,
    payload: {},
  }),
);
```

----------------------------------------

TITLE: Using CronExpression Enum in NestJS
DESCRIPTION: Implementation of a cron job using predefined CronExpression enum for common scheduling patterns.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';

@Injectable()
export class TasksService {
  private readonly logger = new Logger(TasksService.name);

  @Cron(CronExpression.EVERY_30_SECONDS)
  handleCron() {
    this.logger.debug('Called every 30 seconds');
  }
}
```

----------------------------------------

TITLE: Implementing Health Controller
DESCRIPTION: Implementation of the HealthController with HTTP health check functionality
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Controller, Get } from '@nestjs/common';
import { HealthCheckService, HttpHealthIndicator, HealthCheck } from '@nestjs/terminus';

@Controller('health')
export class HealthController {
  constructor(
    private health: HealthCheckService,
    private http: HttpHealthIndicator,
  ) {}

  @Get()
  @HealthCheck()
  check() {
    return this.health.check([
      () => this.http.pingCheck('nestjs-docs', 'https://docs.nestjs.com'),
    ]);
  }
}
```

----------------------------------------

TITLE: Testing Sentry Error Reporting
DESCRIPTION: Example endpoint implementation to test Sentry error reporting functionality.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@Get("debug-sentry")
getError() {
  throw new Error("My first Sentry error!");
}
```

----------------------------------------

TITLE: Basic Controller Route Handler with DTO
DESCRIPTION: Example of a POST route handler using CreateCatDto for request body validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@Post()
async create(@Body() createCatDto: CreateCatDto) {
  this.catsService.create(createCatDto);
}
```

----------------------------------------

TITLE: Applying Fastify Compression Middleware
DESCRIPTION: Basic implementation of compression middleware in a Fastify-based NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/compression.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import compression from '@fastify/compress';
// somewhere in your initialization file
await app.register(compression);
```

----------------------------------------

TITLE: Implementing Response Transformation Interceptor in NestJS
DESCRIPTION: This interceptor modifies each response by wrapping it in a 'data' property. It demonstrates how to use RxJS operators to transform the response stream.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

export interface Response<T> {
  data: T;
}

@Injectable()
export class TransformInterceptor<T> implements NestInterceptor<T, Response<T>> {
  intercept(context: ExecutionContext, next: CallHandler): Observable<Response<T>> {
    return next.handle().pipe(map(data => ({ data })));
  }
}
```

LANGUAGE: javascript
CODE:
```
import { Injectable } from '@nestjs/common';
import { map } from 'rxjs/operators';

@Injectable()
export class TransformInterceptor {
  intercept(context, next) {
    return next.handle().pipe(map(data => ({ data })));
  }
}
```

----------------------------------------

TITLE: Applying the @RequirePermissions() Decorator (JavaScript)
DESCRIPTION: This code demonstrates how to use a theoretical `@RequirePermissions()` decorator (similar to `@Roles()`) to protect a route handler based on permissions.  Only users with the `Permission.CREATE_CAT` permission will be able to access the endpoint.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_10

LANGUAGE: typescript
CODE:
```
@Post()
@RequirePermissions(Permission.CREATE_CAT)
@Bind(Body())
create(createCatDto) {
  this.catsService.create(createCatDto);
}
```

----------------------------------------

TITLE: Adding a Delayed Job to a Bull Queue
DESCRIPTION: Demonstrates adding a job with a delay option, which postpones job processing for the specified number of milliseconds.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_21

LANGUAGE: typescript
CODE:
```
const job = await this.audioQueue.add(
  {
    foo: 'bar',
  },
  { delay: 3000 }, // 3 seconds delayed
);
```

----------------------------------------

TITLE: Configuring NestJS Application to Use Custom Logger
DESCRIPTION: Shows how to configure a NestJS application to use a custom logger during bootstrap by retrieving the logger instance from the dependency injection container.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule, {
  bufferLogs: true,
});
app.useLogger(app.get(MyLogger));
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Using File Size Validation Pipe with FileInterceptor in NestJS
DESCRIPTION: Example of applying a custom file size validation pipe to a file upload endpoint in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Post('file')
@UseInterceptors(FileInterceptor('file'))
uploadFileAndValidate(@UploadedFile(
  new FileSizeValidationPipe(),
  // other pipes can be added here
) file: Express.Multer.File, ) {
  return file;
}
```

----------------------------------------

TITLE: Configuring Custom DataSource Factory in NestJS with TypeORM
DESCRIPTION: This snippet shows how to set up a custom DataSource factory for TypeORM in NestJS. It allows for more control over the DataSource creation process, including the ability to perform additional setup or modifications.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_21

LANGUAGE: typescript
CODE:
```
TypeOrmModule.forRootAsync({
  imports: [ConfigModule],
  inject: [ConfigService],
  useFactory: (configService: ConfigService) => ({
    type: 'mysql',
    host: configService.get('HOST'),
    port: +configService.get('PORT'),
    username: configService.get('USERNAME'),
    password: configService.get('PASSWORD'),
    database: configService.get('DATABASE'),
    entities: [],
    synchronize: true,
  }),
  dataSourceFactory: async (options) => {
    const dataSource = await new DataSource(options).initialize();
    return dataSource;
  },
});
```

----------------------------------------

TITLE: Event Bus Subscription Implementation
DESCRIPTION: Example of subscribing to all events in the EventBus for logging or persistence purposes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
private destroy$ = new Subject<void>();

constructor(private eventBus: EventBus) {
  this.eventBus
    .pipe(takeUntil(this.destroy$))
    .subscribe((event) => {
      // Save events to database
    });
}

onModuleDestroy() {
  this.destroy$.next();
  this.destroy$.complete();
}
```

----------------------------------------

TITLE: Registering Global Interceptors in NestJS
DESCRIPTION: This code demonstrates how to register a global interceptor that will be applied to all route handlers across the application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule);
app.useGlobalInterceptors(new LoggingInterceptor());
```

----------------------------------------

TITLE: Terminating a NestJS Standalone Application
DESCRIPTION: Shows how to properly terminate a NestJS standalone application by calling app.close() at the end of the bootstrap function, which will trigger lifecycle hooks and allow the Node process to exit.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/application-context.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule);
  // application logic...
  await app.close();
}
bootstrap();
```

----------------------------------------

TITLE: Dynamic Module Configuration with Options Provider
DESCRIPTION: Implementation of ConfigModule with dynamic registration and options injection setup.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import { DynamicModule, Module } from '@nestjs/common';
import { ConfigService } from './config.service';

@Module({})
export class ConfigModule {
  static register(options: Record<string, any>): DynamicModule {
    return {
      module: ConfigModule,
      providers: [
        {
          provide: 'CONFIG_OPTIONS',
          useValue: options,
        },
        ConfigService,
      ],
      exports: [ConfigService],
    };
  }
}
```

----------------------------------------

TITLE: Installing Fastify Platform for NestJS
DESCRIPTION: Command to install the Fastify platform package for NestJS integration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i --save @nestjs/platform-fastify
```

----------------------------------------

TITLE: Example: Checking Conditional Permissions (Update Own Article) in TypeScript
DESCRIPTION: Demonstrates checking condition-based permissions defined in `CaslAbilityFactory`. It creates a user and an article, ensuring the article's `authorId` matches the user's `id`. The check `ability.can(Action.Update, article)` returns `true`. When the `authorId` is changed to mismatch, the same check correctly returns `false`, verifying the condition (`{ authorId: user.id }`) is enforced.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_21

LANGUAGE: typescript
CODE:
```
const user = new User();
user.id = 1;

const article = new Article();
article.authorId = user.id;

const ability = this.caslAbilityFactory.createForUser(user);
ability.can(Action.Update, article); // true

article.authorId = 2;
ability.can(Action.Update, article); // false
```

----------------------------------------

TITLE: Implementing E2E Tests with Supertest in NestJS
DESCRIPTION: Demonstrates how to set up and execute end-to-end tests using Supertest to simulate HTTP requests. Shows module configuration, service mocking, and HTTP endpoint testing.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import * as request from 'supertest';
import { Test } from '@nestjs/testing';
import { CatsModule } from '../../src/cats/cats.module';
import { CatsService } from '../../src/cats/cats.service';
import { INestApplication } from '@nestjs/common';

describe('Cats', () => {
  let app: INestApplication;
  let catsService = { findAll: () => ['test'] };

  beforeAll(async () => {
    const moduleRef = await Test.createTestingModule({
      imports: [CatsModule],
    })
      .overrideProvider(CatsService)
      .useValue(catsService)
      .compile();

    app = moduleRef.createNestApplication();
    await app.init();
  });

  it(`/GET cats`, () => {
    return request(app.getHttpServer())
      .get('/cats')
      .expect(200)
      .expect({
        data: catsService.findAll(),
      });
  });

  afterAll(async () => {
    await app.close();
  });
});
```

----------------------------------------

TITLE: Memory Health Check Implementation
DESCRIPTION: Demonstrates memory usage monitoring using MemoryHealthIndicator to check heap and RSS memory usage.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
@Controller('health')
export class HealthController {
  constructor(
    private health: HealthCheckService,
    private memory: MemoryHealthIndicator,
  ) {}

  @Get()
  @HealthCheck()
  check() {
    return this.health.check([
      () => this.memory.checkHeap('memory_heap', 150 * 1024 * 1024),
    ]);
  }
}
```

----------------------------------------

TITLE: Configuring Bull Module with Dependency Injection in TypeScript
DESCRIPTION: Demonstrates using forRootAsync with ConfigModule dependency injection to dynamically retrieve Redis connection details from configuration service.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_36

LANGUAGE: typescript
CODE:
```
BullModule.forRootAsync({
  imports: [ConfigModule],
  useFactory: async (configService: ConfigService) => ({
    redis: {
      host: configService.get('QUEUE_HOST'),
      port: configService.get('QUEUE_PORT'),
    },
  }),
  inject: [ConfigService],
});
```

----------------------------------------

TITLE: Binding Class Validator Pipe to Controller Parameter
DESCRIPTION: Example of binding the ValidationPipe to a specific parameter in a controller method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
@Post()
async create(
  @Body(new ValidationPipe()) createCatDto: CreateCatDto,
) {
  this.catsService.create(createCatDto);
}
```

----------------------------------------

TITLE: Installing MongoDB and Mongoose Dependencies - Bash
DESCRIPTION: Installs the necessary NPM packages for MongoDB integration within a NestJS project, namely @nestjs/mongoose and mongoose. Requires Node.js and NPM to be installed. No special input or output; this sets up project dependencies.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i @nestjs/mongoose mongoose

```

----------------------------------------

TITLE: Multiple Database Health Checks in NestJS
DESCRIPTION: Implementation of health checks for multiple database connections using connection injection.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
@Controller('health')
export class HealthController {
  constructor(
    private health: HealthCheckService,
    private db: TypeOrmHealthIndicator,
    @InjectConnection('albumsConnection')
    private albumsConnection: Connection,
    @InjectConnection()
    private defaultConnection: Connection,
  ) {}

  @Get()
  @HealthCheck()
  check() {
    return this.health.check([
      () => this.db.pingCheck('albums-database', { connection: this.albumsConnection }),
      () => this.db.pingCheck('database', { connection: this.defaultConnection }),
    ]);
  }
}
```

----------------------------------------

TITLE: Extended Console Logger Implementation
DESCRIPTION: Example of extending the built-in ConsoleLogger to customize specific logging behavior.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
import { ConsoleLogger } from '@nestjs/common';

export class MyLogger extends ConsoleLogger {
  error(message: any, stack?: string, context?: string) {
    // add your tailored logic here
    super.error(...arguments);
  }
}
```

----------------------------------------

TITLE: Code-First User Entity Definition
DESCRIPTION: TypeScript class definition for User entity with Federation decorators
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Directive, Field, ID, ObjectType } from '@nestjs/graphql';

@ObjectType()
@Directive('@key(fields: "id")')
export class User {
  @Field(() => ID)
  id: number;

  @Field()
  name: string;
}
```

----------------------------------------

TITLE: Dynamic Redirection in NestJS Controllers
DESCRIPTION: Shows how to dynamically determine redirect URL based on query parameters. The example demonstrates conditional redirection to different documentation versions.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@Get('docs')
@Redirect('https://docs.nestjs.com', 302)
getDocs(@Query('version') version) {
  if (version && version === '5') {
    return { url: 'https://docs.nestjs.com/v5/' };
  }
}
```

----------------------------------------

TITLE: Implementing a Job Handler in a Bull Queue Consumer
DESCRIPTION: Demonstrates creating a job handler method with the @Process decorator that processes jobs and updates progress. The method receives a job object and can return values that will be stored with the job.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_25

LANGUAGE: typescript
CODE:
```
import { Processor, Process } from '@nestjs/bull';
import { Job } from 'bull';

@Processor('audio')
export class AudioConsumer {
  @Process()
  async transcode(job: Job<unknown>) {
    let progress = 0;
    for (let i = 0; i < 100; i++) {
      await doSomething(job.data);
      progress += 1;
      await job.progress(progress);
    }
    return {};
  }
}
```

----------------------------------------

TITLE: Enabling Expandable Variables in NestJS ConfigModule
DESCRIPTION: Shows how to enable environment variable expansion in the NestJS ConfigModule by setting the expandVariables option to true.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_30

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ConfigModule.forRoot({
      // ...
      expandVariables: true,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Integration Test for IoC Container Registration in NestJS
DESCRIPTION: This code demonstrates how to create an integration test to verify that the IoC container is properly configured in a NestJS application. It uses the TestingModule to load the actual module configuration and checks if providers are registered correctly.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import { Test, TestingModule } from '@nestjs/testing';
import { CatsModule } from './cats.module';
import { CatsService } from './cats.service';

describe('Cats Module Integration Test', () => {
  let moduleRef: TestingModule;

  beforeAll(async () => {
    moduleRef = await Test.createTestingModule({
      imports: [CatsModule],
    }).compile();
  });

  it('should resolve exported providers from the ioc container', () => {
    const catsService = moduleRef.get(CatsService);
    expect(catsService).toBeDefined();
  });
});
```

----------------------------------------

TITLE: Implementing AuthService in TypeScript
DESCRIPTION: AuthService implementation with a method to validate user credentials. It uses UsersService to retrieve user information and performs password verification.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { UsersService } from '../users/users.service';

@Injectable()
export class AuthService {
  constructor(private usersService: UsersService) {}

  async validateUser(username: string, pass: string): Promise<any> {
    const user = await this.usersService.findOne(username);
    if (user && user.password === pass) {
      const { password, ...result } = user;
      return result;
    }
    return null;
  }
}
```

----------------------------------------

TITLE: Defining an Event in NestJS CQRS
DESCRIPTION: Example of creating an Event class for when a hero kills a dragon. It includes properties for heroId and dragonId.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
export class HeroKilledDragonEvent {
  constructor(
    public readonly heroId: string,
    public readonly dragonId: string,
  ) {}
}
```

----------------------------------------

TITLE: Dynamically Adding a Cron Job in NestJS
DESCRIPTION: Shows how to dynamically create and add a new cron job using the SchedulerRegistry's addCronJob method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
addCronJob(name: string, seconds: string) {
  const job = new CronJob(`${seconds} * * * * *`, () => {
    this.logger.warn(`time (${seconds}) for job ${name} to run!`);
  });

  this.schedulerRegistry.addCronJob(name, job);
  job.start();

  this.logger.warn(
    `job ${name} added for each minute at ${seconds} seconds!`,
  );
}
```

----------------------------------------

TITLE: RabbitMQ Record Builder Usage
DESCRIPTION: Example of using RmqRecordBuilder to configure message options like headers and priority
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
const message = ':cat:';
const record = new RmqRecordBuilder(message)
  .setOptions({
    headers: {
      ['x-version']: '1.0.0',
    },
    priority: 3,
  })
  .build();

this.client.send('replace-emoji', record).subscribe(...);
```

----------------------------------------

TITLE: Configuring Publish Options for GitHub Integration
DESCRIPTION: Configuration of publishOptions object for GitHub-specific environment variables and integration settings in the NestJS application bootstrap file.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/ci-cd.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const publishOptions = {
  apiKey: process.env.DEVTOOLS_API_KEY,
  repository: process.env.REPOSITORY_NAME,
  owner: process.env.GITHUB_REPOSITORY_OWNER,
  sha: process.env.COMMIT_SHA,
  target: process.env.TARGET_SHA,
  trigger: process.env.GITHUB_BASE_REF ? 'pull' : 'push',
  branch: process.env.BRANCH_NAME,
};
```

----------------------------------------

TITLE: Filtering Exceptions by Type in NestJS CQRS
DESCRIPTION: Example of filtering specific exception types using the ofType operator with UnhandledExceptionBus.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
this.unhandledExceptionsBus
  .pipe(
    takeUntil(this.destroy$),
    UnhandledExceptionBus.ofType(TransactionNotAllowedException),
  )
  .subscribe((exceptionInfo) => {
    // Handle exception here
  });
```

----------------------------------------

TITLE: Installing JWT Package in NestJS
DESCRIPTION: Command to install the @nestjs/jwt package for JWT manipulation in NestJS applications.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
$ npm install --save @nestjs/jwt
```

----------------------------------------

TITLE: Combining OmitType and PartialType for Advanced DTO Transformation (TypeScript)
DESCRIPTION: This example shows composability of NestJS mapped types: by wrapping OmitType with PartialType, a class is derived that omits the specified property but sets all remaining properties as optional. This helps minimize boilerplate for PATCH endpoints. Requires @nestjs/mapped-types for both utilities.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_19

LANGUAGE: typescript
CODE:
```
export class UpdateCatDto extends PartialType(
  OmitType(CreateCatDto, ['name'] as const),
) {}
```

----------------------------------------

TITLE: Customizing Query Names in NestJS GraphQL
DESCRIPTION: This example demonstrates how to customize query names and resolve field names in a NestJS GraphQL resolver. It shows how to decouple method names from GraphQL query names.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@Resolver(() => Author)
export class AuthorsResolver {
  constructor(
    private authorsService: AuthorsService,
    private postsService: PostsService,
  ) {}

  @Query(() => Author, { name: 'author' })
  async getAuthor(@Args('id', { type: () => Int }) id: number) {
    return this.authorsService.findOneById(id);
  }

  @ResolveField('posts', () => [Post])
  async getPosts(@Parent() author: Author) {
    const { id } = author;
    return this.postsService.findAll({ authorId: id });
  }
}
```

----------------------------------------

TITLE: Setting Global Responses in Swagger Documentation
DESCRIPTION: Shows how to define global responses for all routes using DocumentBuilder, useful for consistent error handling.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/other-features.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const config = new DocumentBuilder()
  .addGlobalResponse({
    status: 500,
    description: 'Internal server error',
  })
  // other configurations
  .build();
```

----------------------------------------

TITLE: Implementing a Service with Sequelize Model Injection
DESCRIPTION: Creating a UsersService that injects the User model using @InjectModel decorator to perform database operations. Includes both TypeScript and JavaScript syntax.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_28

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { User } from './user.model';

@Injectable()
export class UsersService {
  constructor(
    @InjectModel(User)
    private userModel: typeof User,
  ) {}

  async findAll(): Promise<User[]> {
    return this.userModel.findAll();
  }

  findOne(id: string): Promise<User> {
    return this.userModel.findOne({
      where: {
        id,
      },
    });
  }

  async remove(id: string): Promise<void> {
    const user = await this.findOne(id);
    await user.destroy();
  }
}
```

----------------------------------------

TITLE: Extending Generated Types with Validation Decorators
DESCRIPTION: This snippet demonstrates how to extend auto-generated GraphQL types with validation decorators from class-validator. This approach allows for combining schema-first development with declarative validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
import { MinLength, MaxLength } from 'class-validator';
import { Post } from '../../graphql.ts';

export class CreatePostInput extends Post {
  @MinLength(3)
  @MaxLength(50)
  title: string;
}
```

----------------------------------------

TITLE: Implementing AggregateByTenantContextIdStrategy in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a custom ContextIdStrategy for aggregating requests by tenant in a multi-tenant application. It manages a map of tenant IDs to context IDs and determines whether to use a tenant-specific or request-specific context ID based on the durability of the component tree.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import {
  HostComponentInfo,
  ContextId,
  ContextIdFactory,
  ContextIdStrategy,
} from '@nestjs/core';
import { Request } from 'express';

const tenants = new Map<string, ContextId>();

export class AggregateByTenantContextIdStrategy implements ContextIdStrategy {
  attach(contextId: ContextId, request: Request) {
    const tenantId = request.headers['x-tenant-id'] as string;
    let tenantSubTreeId: ContextId;

    if (tenants.has(tenantId)) {
      tenantSubTreeId = tenants.get(tenantId);
    } else {
      tenantSubTreeId = ContextIdFactory.create();
      tenants.set(tenantId, tenantSubTreeId);
    }

    // If tree is not durable, return the original "contextId" object
    return (info: HostComponentInfo) =>
      info.isTreeDurable ? tenantSubTreeId : contextId;
  }
}
```

----------------------------------------

TITLE: Uploading Multiple Files with Different Field Names in NestJS
DESCRIPTION: Demonstrates the use of FileFieldsInterceptor to handle multiple file uploads with different field names in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
@Post('upload')
@UseInterceptors(FileFieldsInterceptor([
  { name: 'avatar', maxCount: 1 },
  { name: 'background', maxCount: 1 },
]))
uploadFile(@UploadedFiles() files: { avatar?: Express.Multer.File[], background?: Express.Multer.File[] }) {
  console.log(files);
}
```

----------------------------------------

TITLE: Implementing an Event Handler in NestJS CQRS
DESCRIPTION: Example of creating an Event Handler for the HeroKilledDragonEvent. It implements the IEventHandler interface and uses the @EventsHandler decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
@EventsHandler(HeroKilledDragonEvent)
export class HeroKilledDragonHandler implements IEventHandler<HeroKilledDragonEvent> {
  constructor(private repository: HeroesRepository) {}

  handle(event: HeroKilledDragonEvent) {
    // Business logic
  }
}
```

----------------------------------------

TITLE: Configuring TRANSIENT Scope for a Custom Provider in NestJS
DESCRIPTION: Shows how to specify TRANSIENT scope using the long-hand form for a custom provider registration. TRANSIENT providers are not shared across consumers, with each consumer receiving a new instance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
{
  provide: 'CACHE_MANAGER',
  useClass: CacheManager,
  scope: Scope.TRANSIENT,
}
```

----------------------------------------

TITLE: Using CheckPolicies Decorator with Class-Based Policy Handler - NestJS - TypeScript
DESCRIPTION: Shows how to apply the PoliciesGuard and CheckPolicies decorator to a route handler, providing a new instance of a class-based policy handler. This approach places authorization logic in a reusable class, instantiated directly in the decorator. Contains the same requirements as the function-based handler regarding context and entity setup.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_27

LANGUAGE: TypeScript
CODE:
```
@Get()
@UseGuards(PoliciesGuard)
@CheckPolicies(new ReadArticlePolicyHandler())
findAll() {
  return this.articlesService.findAll();
}
```

----------------------------------------

TITLE: Configuring and Using Response Decorators like @ApiResponse and @ApiCreatedResponse in NestJS
DESCRIPTION: This snippet illustrates how to define custom HTTP responses for endpoints using decorators like @ApiResponse, and shorthand variants such as @ApiCreatedResponse and @ApiForbiddenResponse. These decorators help generate accurate Swagger documentation reflecting possible API responses.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
@Post()
@ApiResponse({ status: 201, description: 'The record has been successfully created.'})
@ApiResponse({ status: 403, description: 'Forbidden.'})
async create(@Body() createCatDto: CreateCatDto) {
  this.catsService.create(createCatDto);
}
```

----------------------------------------

TITLE: Implementing Sub-domain Routing in NestJS
DESCRIPTION: Demonstrates how to create controllers that respond to specific sub-domains using the host option in the @Controller decorator. The example shows a controller for an admin sub-domain.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
@Controller({ host: 'admin.example.com' })
export class AdminController {
  @Get()
  index(): string {
    return 'Admin page';
  }
}
```

----------------------------------------

TITLE: Installing @nestjs/swagger Package
DESCRIPTION: Command to install the @nestjs/swagger package using npm, which is required for generating OpenAPI specifications in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install --save @nestjs/swagger
```

----------------------------------------

TITLE: Creating UsersModule with TypeORM in NestJS
DESCRIPTION: TypeScript code for the UsersModule, importing TypeOrmModule and configuring it with the User entity.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { UsersService } from './users.service';
import { UsersController } from './users.controller';
import { User } from './user.entity';

@Module({
  imports: [TypeOrmModule.forFeature([User])],
  providers: [UsersService],
  controllers: [UsersController],
})
export class UsersModule {}
```

----------------------------------------

TITLE: Creating Custom LocalAuthGuard in NestJS
DESCRIPTION: This snippet shows how to create a custom LocalAuthGuard by extending the AuthGuard class. This approach helps avoid using magic strings in the codebase.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class LocalAuthGuard extends AuthGuard('local') {}
```

----------------------------------------

TITLE: Initializing ThrottlerModule with Global Configuration - TypeScript
DESCRIPTION: Sets up the ThrottlerModule within a NestJS AppModule using the forRoot method with a global throttler configuration. The 'ttl' (time to live) defines the duration in milliseconds for which request counts are tracked, and 'limit' sets the maximum number of requests allowed within that duration. This basic configuration applies rate limiting to all guarded routes throughout the application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_1

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
     ThrottlerModule.forRoot({
      throttlers: [
        {
          ttl: 60000,
          limit: 10,
        },
      ],
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Using PartialType for Optional Fields in GraphQL
DESCRIPTION: Example of using PartialType utility to create an UpdateUserInput type where all fields from CreateUserInput become optional.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@InputType()
export class UpdateUserInput extends PartialType(CreateUserInput) {}
```

----------------------------------------

TITLE: Custom ParseIntPipe Implementation in NestJS
DESCRIPTION: Example of a custom transformation pipe that converts string input to integer values with validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';

@Injectable()
export class ParseIntPipe implements PipeTransform<string, number> {
  transform(value: string, metadata: ArgumentMetadata): number {
    const val = parseInt(value, 10);
    if (isNaN(val)) {
      throw new BadRequestException('Validation failed');
    }
    return val;
  }
}
```

----------------------------------------

TITLE: Defining Expandable Environment Variables in NestJS
DESCRIPTION: Example of nested environment variables where one variable references another using the ${VAR} syntax in a .env file.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_29

LANGUAGE: json
CODE:
```
APP_URL=mywebsite.com
SUPPORT_EMAIL=support@${APP_URL}
```

----------------------------------------

TITLE: Configuring CORS Methods for Fastify in NestJS 11
DESCRIPTION: Demonstrates how to configure CORS methods for Fastify in NestJS 11, explicitly defining allowed HTTP methods including non-safelisted ones.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const methods = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']; // OR comma-delimited string 'GET,POST,PUT,PATH,DELETE'

const app = await NestFactory.create<NestFastifyApplication>(
  AppModule,
  new FastifyAdapter(),
  { cors: { methods } },
);

// OR alternatively, you can use the `enableCors` method
const app = await NestFactory.create<NestFastifyApplication>(
  AppModule,
  new FastifyAdapter(),
);
app.enableCors({ methods });
```

----------------------------------------

TITLE: Defining GraphQL Schema Types using SDL
DESCRIPTION: This snippet demonstrates how to define GraphQL schema types using Schema Definition Language (SDL). It includes type definitions for Author, Post, and a Query type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_15

LANGUAGE: graphql
CODE:
```
type Author {
  id: Int!
  firstName: String
  lastName: String
  posts: [Post]
}

type Post {
  id: Int!
  title: String!
  votes: Int
}

type Query {
  author(id: Int!): Author
}
```

----------------------------------------

TITLE: Retrieving All Controllers with DiscoveryService
DESCRIPTION: Demonstrates how to fetch all registered controllers in a NestJS application using the DiscoveryService. This is useful for dynamic controller processing like analytics tracking.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/discovery-service.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const controllers = this.discoveryService.getControllers();
console.log(controllers);
```

----------------------------------------

TITLE: Storing Raw ObjectId Field for Conditional Population - TypeScript
DESCRIPTION: Configures the 'owner' property to store only the ObjectId reference, without always being populated, by setting its type to mongoose.Types.ObjectId. Enables selective population for related documents. Depends on mongoose, allows distinguishing between populated and raw references.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_7

LANGUAGE: typescript
CODE:
```
@Prop({ type: { type: mongoose.Schema.Types.ObjectId, ref: 'Owner' } })
// This ensures the field is not confused with a populated reference
owner: mongoose.Types.ObjectId;

```

----------------------------------------

TITLE: Configuring MongooseModule Async with Class
DESCRIPTION: Illustrates asynchronous configuration of the MongooseModule by providing a class reference. The module will instantiate this class and call a specific method (defined by an interface) to get the connection options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_32

LANGUAGE: typescript
CODE:
```
MongooseModule.forRootAsync({
  useClass: MongooseConfigService,
});
```

----------------------------------------

TITLE: Registering CacheModule with Multiple Stores in NestJS
DESCRIPTION: This code snippet demonstrates how to register the CacheModule with multiple cache stores, including an in-memory store (CacheableMemory) and a Redis store. It uses the registerAsync method and a factory function to configure the stores.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CacheModule } from '@nestjs/cache-manager';
import { AppController } from './app.controller';
import { createKeyv } from '@keyv/redis';
import { Keyv } from 'keyv';
import { CacheableMemory } from 'cacheable';

@Module({
  imports: [
    CacheModule.registerAsync({
      useFactory: async () => {
        return {
          stores: [
            new Keyv({
              store: new CacheableMemory({ ttl: 60000, lruSize: 5000 }),
            }),
            createKeyv('redis://localhost:6379'),
          ],
        };
      },
    }),
  ],
  controllers: [AppController],
})
export class AppModule {}
```

----------------------------------------

TITLE: Basic Authentication in NestJS
DESCRIPTION: Shows how to implement basic authentication using @ApiBasicAuth decorator and configure it in DocumentBuilder.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/security.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@ApiBasicAuth()
@Controller('cats')
export class CatsController {}
```

LANGUAGE: typescript
CODE:
```
const options = new DocumentBuilder().addBasicAuth();
```

----------------------------------------

TITLE: Multiple Response Handler Implementation
DESCRIPTION: Implementation of a WebSocket handler that returns multiple responses using WsResponse interface.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/gateways.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@SubscribeMessage('events')
handleEvent(@MessageBody() data: unknown): WsResponse<unknown> {
  const event = 'events';
  return { event, data };
}
```

----------------------------------------

TITLE: Handling RabbitMQ Client Error Events in NestJS
DESCRIPTION: Shows how to listen for error events emitted by the RabbitMQ client instance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
this.client.on('error', (err) => {
  console.error(err);
});
```

----------------------------------------

TITLE: Middleware with Request Method Filtering
DESCRIPTION: Shows how to restrict middleware to specific HTTP methods using RequestMethod enum with detailed route configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Module, NestModule, RequestMethod, MiddlewareConsumer } from '@nestjs/common';
import { LoggerMiddleware } from './common/middleware/logger.middleware';
import { CatsModule } from './cats/cats.module';

@Module({
  imports: [CatsModule],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer
      .apply(LoggerMiddleware)
      .forRoutes({ path: 'cats', method: RequestMethod.GET });
  }
}
```

----------------------------------------

TITLE: Request-Scoped Command Handler Configuration
DESCRIPTION: Configuration of a request-scoped command handler using the CommandHandler decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
@CommandHandler(KillDragonCommand, {
  scope: Scope.REQUEST,
})
export class KillDragonHandler {
  // Implementation here
}
```

----------------------------------------

TITLE: Configuring Body Parser Size Limit in Fastify
DESCRIPTION: Setting a custom size limit for the JSON body parser in NestJS Fastify application
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/raw-body.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
const bodyLimit = 10_485_760; // 10MiB
app.useBodyParser('application/json', { bodyLimit });
```

----------------------------------------

TITLE: Subscribing to Kafka Response Topic in NestJS
DESCRIPTION: Subscribe to a Kafka response topic using the subscribeToResponseOf method in a NestJS controller's onModuleInit lifecycle hook. This is required for implementing the request-response message pattern.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
onModuleInit() {
  this.client.subscribeToResponseOf('hero.kill.dragon');
}
```

----------------------------------------

TITLE: Retrieving Arguments by Index in NestJS
DESCRIPTION: Shows how to retrieve specific arguments by their index position using the getArgByIndex() method of ArgumentsHost.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const request = host.getArgByIndex(0);
const response = host.getArgByIndex(1);
```

----------------------------------------

TITLE: Setting Cookies in NestJS Response with Express
DESCRIPTION: This code demonstrates how to attach a cookie to an outgoing response in a NestJS route handler using Express.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Get()
findAll(@Res({ passthrough: true }) response: Response) {
  response.cookie('key', 'value')
}
```

----------------------------------------

TITLE: Sending Messages with Routing Keys in NestJS RabbitMQ
DESCRIPTION: Shows how to send messages with specific routing keys using the ClientProxy instance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
this.client.send('cats.meow', { message: 'Meow!' }).subscribe((response) => {
  console.log(response);
});
```

----------------------------------------

TITLE: Running Multiple Simultaneous Servers in NestJS
DESCRIPTION: Configures a NestJS application to listen on multiple ports simultaneously (HTTP and HTTPS). Creates an Express server instance and adapts NestJS to use it, then creates both HTTP and HTTPS servers using native Node.js modules.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/multiple-servers.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const httpsOptions = {
  key: fs.readFileSync('./secrets/private-key.pem'),
  cert: fs.readFileSync('./secrets/public-certificate.pem'),
};

const server = express();
const app = await NestFactory.create(AppModule, new ExpressAdapter(server));
await app.init();

const httpServer = http.createServer(server).listen(3000);
const httpsServer = https.createServer(httpsOptions, server).listen(443);
```

----------------------------------------

TITLE: Configuring Multiple Database Connections in NestJS Module
DESCRIPTION: This snippet demonstrates how to set up multiple database connections in a NestJS module using TypeORM. It shows the configuration for two separate databases, one for users and another for albums.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_18

LANGUAGE: typescript
CODE:
```
const defaultOptions = {
  type: 'postgres',
  port: 5432,
  username: 'user',
  password: 'password',
  database: 'db',
  synchronize: true,
};

@Module({
  imports: [
    TypeOrmModule.forRoot({
      ...defaultOptions,
      host: 'user_db_host',
      entities: [User],
    }),
    TypeOrmModule.forRoot({
      ...defaultOptions,
      name: 'albumsConnection',
      host: 'album_db_host',
      entities: [Album],
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Configuring Raw Body Access in NestJS Fastify Application
DESCRIPTION: Setting up a NestJS Fastify application with raw body access enabled through FastifyAdapter configuration
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/raw-body.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { NestFactory } from '@nestjs/core';
import {
  FastifyAdapter,
  NestFastifyApplication,
} from '@nestjs/platform-fastify';
import { AppModule } from './app.module';

// in the "bootstrap" function
const app = await NestFactory.create<NestFastifyApplication>(
  AppModule,
  new FastifyAdapter(),
  {
    rawBody: true,
  },
);
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Implementing AuthGuard with Public Route Check in NestJS
DESCRIPTION: This code implements an AuthGuard that checks for the 'isPublic' metadata to allow public routes. It also handles JWT verification for protected routes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
@Injectable()
export class AuthGuard implements CanActivate {
  constructor(private jwtService: JwtService, private reflector: Reflector) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);
    if (isPublic) {
      // 💡 See this condition
      return true;
    }

    const request = context.switchToHttp().getRequest();
    const token = this.extractTokenFromHeader(request);
    if (!token) {
      throw new UnauthorizedException();
    }
    try {
      const payload = await this.jwtService.verifyAsync(token, {
        secret: jwtConstants.secret,
      });
      // 💡 We're assigning the payload to the request object here
      // so that we can access it in our route handlers
      request['user'] = payload;
    } catch {
      throw new UnauthorizedException();
    }
    return true;
  }

  private extractTokenFromHeader(request: Request): string | undefined {
    const [type, token] = request.headers.authorization?.split(' ') ?? [];
    return type === 'Bearer' ? token : undefined;
  }
}
```

----------------------------------------

TITLE: Running TypeScript Definition Generation Script in NestJS
DESCRIPTION: This bash command demonstrates how to run the TypeScript definition generation script using ts-node.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
$ ts-node generate-typings
```

----------------------------------------

TITLE: Adding HMR Script to package.json without CLI
DESCRIPTION: Script to be added to the package.json file for easily running the NestJS application with Hot Module Replacement enabled when not using the Nest CLI.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
"start:dev": "webpack --config webpack.config.js --watch"
```

----------------------------------------

TITLE: Automatic Plain Object Transformation
DESCRIPTION: Shows how to automatically transform plain objects into class instances using @SerializeOptions with type specification.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/serialization.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@UseInterceptors(ClassSerializerInterceptor)
@SerializeOptions({ type: UserEntity })
@Get()
findOne(@Query() { id }: { id: number }): UserEntity {
  if (id === 1) {
    return {
      id: 1,
      firstName: 'John',
      lastName: 'Doe',
      password: 'password',
    };
  }

  return {
    id: 2,
    firstName: 'Kamil',
    lastName: 'Mysliwiec',
    password: 'password2',
  };
}
```

----------------------------------------

TITLE: Implementing UsersService with TypeORM Repository in NestJS
DESCRIPTION: TypeScript code for the UsersService, demonstrating injection and usage of TypeORM repository for database operations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from './user.entity';

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private usersRepository: Repository<User>,
  ) {}

  findAll(): Promise<User[]> {
    return this.usersRepository.find();
  }

  findOne(id: number): Promise<User | null> {
    return this.usersRepository.findOneBy({ id });
  }

  async remove(id: number): Promise<void> {
    await this.usersRepository.delete(id);
  }
}
```

----------------------------------------

TITLE: Configuring CacheModule with Factory Function in NestJS
DESCRIPTION: This snippet shows how to use a factory function to asynchronously configure the CacheModule. It demonstrates setting a simple TTL (Time To Live) option.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
CacheModule.registerAsync({
  useFactory: () => ({
    ttl: 5,
  }),
});
```

----------------------------------------

TITLE: Declaring a Bulk-Create Controller Method with a DTO Array (TypeScript)
DESCRIPTION: This snippet defines a controller endpoint that accepts an array of DTOs as the request body for bulk operations. Without extra configuration, ValidationPipe may not validate arrays of objects inside DTOs due to lack of metadata for generics, highlighting the need for alternative array validation approaches.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_20

LANGUAGE: typescript
CODE:
```
@Post()
createBulk(@Body() createUserDtos: CreateUserDto[]) {
  return 'This action adds new users';
}
```

----------------------------------------

TITLE: Implementing Login Route with Passport Guard in NestJS
DESCRIPTION: This code demonstrates how to implement a login route using the AuthGuard provided by @nestjs/passport. It applies the guard to the route and returns the authenticated user.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { Controller, Request, Post, UseGuards } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Controller()
export class AppController {
  @UseGuards(AuthGuard('local'))
  @Post('auth/login')
  async login(@Request() req) {
    return req.user;
  }
}
```

----------------------------------------

TITLE: Configuring NestJS Monorepo Structure
DESCRIPTION: Example configuration of a nest-cli.json file for a monorepo project structure. Demonstrates the setup of multiple applications with their respective compiler options and project metadata.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
{
  "collection": "@nestjs/schematics",
  "sourceRoot": "apps/my-project/src",
  "monorepo": true,
  "root": "apps/my-project",
  "compilerOptions": {
    "webpack": true,
    "tsConfigPath": "apps/my-project/tsconfig.app.json"
  },
  "projects": {
    "my-project": {
      "type": "application",
      "root": "apps/my-project",
      "entryFile": "main",
      "sourceRoot": "apps/my-project/src",
      "compilerOptions": {
        "tsConfigPath": "apps/my-project/tsconfig.app.json"
      }
    },
    "my-app": {
      "type": "application",
      "root": "apps/my-app",
      "entryFile": "main",
      "sourceRoot": "apps/my-app/src",
      "compilerOptions": {
        "tsConfigPath": "apps/my-app/tsconfig.app.json"
      }
    }
  }
}
```

----------------------------------------

TITLE: DTO Class with Swagger Property Decorators
DESCRIPTION: Definition of a DTO class with @ApiProperty decorators to specify Swagger documentation for each property.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { ApiProperty } from '@nestjs/swagger';

export class CreateCatDto {
  @ApiProperty()
  name: string;

  @ApiProperty()
  age: number;

  @ApiProperty()
  breed: string;
}
```

----------------------------------------

TITLE: Implementing CatsService with Mongoose Model in NestJS
DESCRIPTION: Creates a CatsService that uses the injected Mongoose model to perform CRUD operations on the Cat collection.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Model } from 'mongoose';
import { Injectable, Inject } from '@nestjs/common';
import { Cat } from './interfaces/cat.interface';
import { CreateCatDto } from './dto/create-cat.dto';

@Injectable()
export class CatsService {
  constructor(
    @Inject('CAT_MODEL')
    private catModel: Model<Cat>,
  ) {}

  async create(createCatDto: CreateCatDto): Promise<Cat> {
    const createdCat = new this.catModel(createCatDto);
    return createdCat.save();
  }

  async findAll(): Promise<Cat[]> {
    return this.catModel.find().exec();
  }
}
```

----------------------------------------

TITLE: Creating GraphQL-Compatible Auth Guard in NestJS
DESCRIPTION: Demonstrates how to extend the AuthGuard class for use with GraphQL by overriding the getRequest method. This implementation extracts the request object from the GraphQL context.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_32

LANGUAGE: typescript
CODE:
```
@Injectable()
export class GqlAuthGuard extends AuthGuard('jwt') {
  getRequest(context: ExecutionContext) {
    const ctx = GqlExecutionContext.create(context);
    return ctx.getContext().req;
  }
}
```

----------------------------------------

TITLE: Adding Items to Cache in NestJS
DESCRIPTION: Shows how to add items to the cache using the set method, with an optional TTL parameter.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
await this.cacheManager.set('key', 'value');

// With TTL
await this.cacheManager.set('key', 'value', 1000);

// Disable expiration
await this.cacheManager.set('key', 'value', 0);
```

----------------------------------------

TITLE: Configuring Hierarchical Module Structure with RouterModule in NestJS
DESCRIPTION: This example demonstrates how to create a hierarchical module structure using RouterModule. It shows how to register an AdminModule as a parent module with DashboardModule and MetricsModule as children, each with their own path prefixes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/router-module.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    AdminModule,
    DashboardModule,
    MetricsModule,
    RouterModule.register([
      {
        path: 'admin',
        module: AdminModule,
        children: [
          {
            path: 'dashboard',
            module: DashboardModule,
          },
          {
            path: 'metrics',
            module: MetricsModule,
          },
        ],
      },
    ])
  ],
});
```

----------------------------------------

TITLE: Configuring Express Adapter to Trust Proxy for Rate Limiting - TypeScript
DESCRIPTION: Sets the 'trust proxy' option on the Express HTTP adapter instance in a NestJS bootstrap function to properly trust incoming proxy headers such as 'X-Forwarded-For'. This is critical to correctly identify client IP addresses when the server runs behind reverse proxies, enabling accurate throttling by IP.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { NestExpressApplication } from '@nestjs/platform-express';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);
  app.set('trust proxy', 'loopback'); // Trust requests from the loopback address
  await app.listen(3000);
}

bootstrap();
```

LANGUAGE: typescript
CODE:
```
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { NestExpressApplication } from '@nestjs/platform-express';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.set('trust proxy', 'loopback'); // Trust requests from the loopback address
  await app.listen(3000);
}

bootstrap();
```

----------------------------------------

TITLE: Starting a NestJS Application with CLI
DESCRIPTION: Command for compiling and running a NestJS application or default project in a workspace with optional project name and various configuration options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ nest start <name> [options]
```

----------------------------------------

TITLE: Registering Kafka Client with ClientsModule in NestJS
DESCRIPTION: Use the ClientsModule to register a Kafka client in a NestJS module. This setup includes client configuration, consumer group settings, and transport options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'HERO_SERVICE',
        transport: Transport.KAFKA,
        options: {
          client: {
            clientId: 'hero',
            brokers: ['localhost:9092'],
          },
          consumer: {
            groupId: 'hero-consumer'
          }
        }
      },
    ]),
  ]
  ...
})
```

----------------------------------------

TITLE: Overriding Global Throttling Settings with @Throttle Decorator - TypeScript
DESCRIPTION: Shows how to use the @Throttle decorator to override the default global throttling configuration for specific routes or controllers. The decorator receives an object keyed by throttler name, associating it with a limit and ttl configuration for rate limiting. If no named policies exist, the 'default' key must be used. Useful for customizing request limits and durations on selected endpoints.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_6

LANGUAGE: typescript
CODE:
```
// Override default configuration for Rate limiting and duration.
@Throttle({ default: { limit: 3, ttl: 60000 } })
@Get()
findAll() {
  return "List users works with custom rate limiting.";
}
```

----------------------------------------

TITLE: Overriding Global Guards in NestJS Testing
DESCRIPTION: Shows how to properly register and override globally registered guards in testing environments using useExisting.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
providers: [
  {
    provide: APP_GUARD,
    useExisting: JwtAuthGuard,
  },
  JwtAuthGuard,
]
```

----------------------------------------

TITLE: Creating Photo Repository Provider
DESCRIPTION: Implements the repository pattern for Photo entity using TypeORM's repository.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-typeorm.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { DataSource } from 'typeorm';
import { Photo } from './photo.entity';

export const photoProviders = [
  {
    provide: 'PHOTO_REPOSITORY',
    useFactory: (dataSource: DataSource) => dataSource.getRepository(Photo),
    inject: ['DATA_SOURCE'],
  },
];
```

----------------------------------------

TITLE: Configuring Fastify Secure Session in NestJS
DESCRIPTION: Example of registering the fastify-secure-session plugin in a NestJS application using Fastify adapter. It sets up session configuration options including secret and salt.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import secureSession from '@fastify/secure-session';

// somewhere in your initialization file
const app = await NestFactory.create<NestFastifyApplication>(
  AppModule,
  new FastifyAdapter(),
);
await app.register(secureSession, {
  secret: 'averylogphrasebiggerthanthirtytwochars',
  salt: 'mq9hDxBVDbspDR6n',
});
```

----------------------------------------

TITLE: REPL Controller Interaction Example
DESCRIPTION: Example of how to interact with controllers and execute async methods using REPL.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/repl.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
> appController = get(AppController)
AppController { appService: AppService {} }
> await appController.getHello()
'Hello World!'
```

----------------------------------------

TITLE: Using Direct Axios Instance
DESCRIPTION: Example of accessing and using the underlying Axios instance directly through HttpService.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@Injectable()
export class CatsService {
  constructor(private readonly httpService: HttpService) {}

  findAll(): Promise<AxiosResponse<Cat[]>> {
    return this.httpService.axiosRef.get('http://localhost:3000/cats');
  }
}
```

----------------------------------------

TITLE: Static Module Declaration Example in NestJS
DESCRIPTION: Example of a static module declaration using the @Module decorator, demonstrating the standard structure of imports, controllers, providers, and exports.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [DogsModule],
  controllers: [CatsController],
  providers: [CatsService],
  exports: [CatsService]
})
```

----------------------------------------

TITLE: Defining a Sequelize Model with Decorators
DESCRIPTION: Creating a User model class using Sequelize-TypeScript decorators to define table structure and column properties.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_25

LANGUAGE: typescript
CODE:
```
import { Column, Model, Table } from 'sequelize-typescript';

@Table
export class User extends Model {
  @Column
  firstName: string;

  @Column
  lastName: string;

  @Column({ defaultValue: true })
  isActive: boolean;
}
```

----------------------------------------

TITLE: Configuring Multiple Versions for a Controller in NestJS
DESCRIPTION: This snippet illustrates how to configure multiple versions for a controller in NestJS. It sets up the controller to handle both version 1 and 2 of the API.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@Controller({
  version: ['1', '2'],
})
export class CatsController {
  @Get('cats')
  findAll(): string {
    return 'This action returns all cats for version 1 or 2';
  }
}
```

----------------------------------------

TITLE: Defining Mongoose Schema for Cat Model
DESCRIPTION: Creates a Mongoose schema for the Cat model, defining its structure and data types.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import * as mongoose from 'mongoose';

export const CatSchema = new mongoose.Schema({
  name: String,
  age: Number,
  breed: String,
});
```

----------------------------------------

TITLE: Creating message context menu commands with Necord
DESCRIPTION: Shows how to implement a message context menu command to copy a message's content using Necord decorators.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { Context, MessageCommand, MessageCommandContext, TargetMessage } from 'necord';
import { Message } from 'discord.js';

@Injectable()
export class AppCommands {
  @MessageCommand({ name: 'Copy Message' })
  public async copyMessage(
    @Context() [interaction]: MessageCommandContext,
    @TargetMessage() message: Message,
  ) {
    return interaction.reply({ content: message.content });
  }
}
```

----------------------------------------

TITLE: Implementing Custom FileValidator in NestJS
DESCRIPTION: Abstract class definition for creating custom file validators in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
export abstract class FileValidator<TValidationOptions = Record<string, any>> {
  constructor(protected readonly validationOptions: TValidationOptions) {}

  /**
   * Indicates if this file should be considered valid, according to the options passed in the constructor.
   * @param file the file from the request object
   */
  abstract isValid(file?: any): boolean | Promise<boolean>;

  /**
   * Builds an error message in case the validation fails.
   * @param file the file from the request object
   */
  abstract buildErrorMessage(file: any): string;
}
```

----------------------------------------

TITLE: Creating a Request-Scoped Bull Queue Consumer
DESCRIPTION: Demonstrates how to create a request-scoped consumer where a new instance is created for each job and garbage-collected afterward, using the scope option in the @Processor decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_27

LANGUAGE: typescript
CODE:
```
@Processor({
  name: 'audio',
  scope: Scope.REQUEST,
})
```

----------------------------------------

TITLE: Schema-First User Type Definition
DESCRIPTION: GraphQL schema definition for User type with Federation key directive
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_1

LANGUAGE: graphql
CODE:
```
type User @key(fields: "id") {
  id: ID!
  name: String!
}

extend type Query {
  getUser(id: ID!): User
}
```

----------------------------------------

TITLE: Registering the RolesGuard
DESCRIPTION: This code demonstrates how to register the `RolesGuard` as a global guard using `APP_GUARD`. This ensures that the guard is applied to all routes in the application. The guard can also be registered at the controller level for more granular control.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_8

LANGUAGE: typescript
CODE:
```
providers: [
  {
    provide: APP_GUARD,
    useClass: RolesGuard,
  },
],
```

----------------------------------------

TITLE: Publishing Events in NestJS Microservices
DESCRIPTION: Shows how to publish events using ClientProxy's emit method for event-driven communication.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
async publish() {
  this.client.emit<number>('user_created', new UserCreatedEvent());
}
```

----------------------------------------

TITLE: Applying Functional Middleware in NestJS AppModule
DESCRIPTION: This code snippet shows how to apply the functional logger middleware to specific routes in the AppModule of a NestJS application. It uses the consumer.apply() method to bind the middleware to routes handled by CatsController.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
consumer
  .apply(logger)
  .forRoutes(CatsController);
```

----------------------------------------

TITLE: Implementing Custom Security Mechanism in NestJS
DESCRIPTION: Demonstrates how to use @ApiSecurity decorator to define custom security mechanisms for a controller and configure it using DocumentBuilder.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/security.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@ApiSecurity('basic')
@Controller('cats')
export class CatsController {}
```

LANGUAGE: typescript
CODE:
```
const options = new DocumentBuilder().addSecurity('basic', {
  type: 'http',
  scheme: 'basic',
});
```

----------------------------------------

TITLE: Defining a Class-Based Policy Handler - NestJS - TypeScript
DESCRIPTION: Provides a class, ReadArticlePolicyHandler, which implements IPolicyHandler and performs a CASL can check for 'Read' access on Article entities. Designed to be passed as an instance to CheckPolicies. The handle() method is called by the PoliciesGuard for evaluation, encapsulating policy logic for better reusability and testing.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_26

LANGUAGE: TypeScript
CODE:
```
export class ReadArticlePolicyHandler implements IPolicyHandler {
  handle(ability: AppAbility) {
    return ability.can(Action.Read, Article);
  }
}
```

----------------------------------------

TITLE: Kafka Heartbeat Implementation
DESCRIPTION: Shows how to implement heartbeat functionality for long-running message processing to prevent session timeouts.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
@MessagePattern('hero.kill.dragon')
async killDragon(@Payload() message: KillDragonMessage, @Ctx() context: KafkaContext) {
  const heartbeat = context.getHeartbeat();

  // Do some slow processing
  await doWorkPart1();

  // Send heartbeat to not exceed the sessionTimeout
  await heartbeat();

  // Do some slow processing again
  await doWorkPart2();
}
```

----------------------------------------

TITLE: Setting Default Multer Options in NestJS MulterModule
DESCRIPTION: This code shows how to set default Multer options using the static register() method when importing the MulterModule. It demonstrates setting the destination folder for file uploads.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
MulterModule.register({
  dest: './upload',
});
```

----------------------------------------

TITLE: Importing HTTP Module in NestJS
DESCRIPTION: Basic module configuration showing how to import HttpModule into a NestJS module.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [HttpModule],
  providers: [CatsService],
})
export class CatsModule {}
```

----------------------------------------

TITLE: Configuring CacheModule with Existing Provider in NestJS
DESCRIPTION: This example demonstrates how to use an existing configuration provider from another module to configure the CacheModule. It uses the useExisting syntax to reuse an already-created ConfigService.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_20

LANGUAGE: typescript
CODE:
```
CacheModule.registerAsync({
  imports: [ConfigModule],
  useExisting: ConfigService,
});
```

----------------------------------------

TITLE: Applying Cookie Parser Middleware in NestJS with Express
DESCRIPTION: This code demonstrates how to apply the cookie-parser middleware globally in a NestJS application using Express.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import * as cookieParser from 'cookie-parser';
// somewhere in your initialization file
app.use(cookieParser());
```

----------------------------------------

TITLE: Enabling Shutdown Hooks in NestJS Application
DESCRIPTION: Shows how to enable application shutdown hooks for handling termination signals and graceful shutdown.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lifecycle-events.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Starts listening for shutdown hooks
  app.enableShutdownHooks();

  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();
```

----------------------------------------

TITLE: OAuth2 Authentication in NestJS
DESCRIPTION: Shows how to implement OAuth2 authentication with scope definition using @ApiOAuth2 decorator and configure it in DocumentBuilder.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/security.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@ApiOAuth2(['pets:write'])
@Controller('cats')
export class CatsController {}
```

LANGUAGE: typescript
CODE:
```
const options = new DocumentBuilder().addOAuth2();
```

----------------------------------------

TITLE: Implementing GraphQL Exception Filters in NestJS
DESCRIPTION: Shows how to implement an exception filter for GraphQL applications by transforming ArgumentsHost to GqlArgumentsHost. This filter handles HttpExceptions in the GraphQL context.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Catch(HttpException)
export class HttpExceptionFilter implements GqlExceptionFilter {
  catch(exception: HttpException, host: ArgumentsHost) {
    const gqlHost = GqlArgumentsHost.create(host);
    return exception;
  }
}
```

----------------------------------------

TITLE: Registering a Global Authentication Guard in NestJS
DESCRIPTION: Demonstrates how to register a JwtAuthGuard as a global guard using the APP_GUARD provider token. This setup enables automatic authentication for all endpoints without requiring @UseGuards() decorators on each controller.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_23

LANGUAGE: typescript
CODE:
```
providers: [
  {
    provide: APP_GUARD,
    useClass: JwtAuthGuard,
  },
],
```

----------------------------------------

TITLE: Registering Models in the AppModule
DESCRIPTION: Updating the AppModule to register the User model with Sequelize by adding it to the models array in the configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_26

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { SequelizeModule } from '@nestjs/sequelize';
import { User } from './users/user.model';

@Module({
  imports: [
    SequelizeModule.forRoot({
      dialect: 'mysql',
      host: 'localhost',
      port: 3306,
      username: 'root',
      password: 'root',
      database: 'test',
      models: [User],
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Implementing Public Route Detection in JwtAuthGuard with Reflector
DESCRIPTION: Shows how to modify the JwtAuthGuard to detect and allow public routes marked with the @Public() decorator. Uses the Reflector utility to check for metadata on handlers and classes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_26

LANGUAGE: typescript
CODE:
```
@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  constructor(private reflector: Reflector) {
    super();
  }

  canActivate(context: ExecutionContext) {
    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);
    if (isPublic) {
      return true;
    }
    return super.canActivate(context);
  }
}
```

----------------------------------------

TITLE: Registering Gateway in NestJS Module
DESCRIPTION: Example of registering a WebSocket gateway in a NestJS module configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/gateways.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { EventsGateway } from './events.gateway';

@Module({
  providers: [EventsGateway]
})
export class EventsModule {}
```

----------------------------------------

TITLE: Implementing Union Type Resolver in Schema-First Approach
DESCRIPTION: Creates a resolver class with a __resolveType method to determine which concrete type a union value should resolve to based on its properties.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
@Resolver('ResultUnion')
export class ResultUnionResolver {
  @ResolveField()
  __resolveType(value) {
    if (value.name) {
      return 'Author';
    }
    if (value.title) {
      return 'Book';
    }
    return null;
  }
}
```

----------------------------------------

TITLE: Configuring CacheModule with Custom Class in NestJS
DESCRIPTION: This snippet demonstrates how to use a custom class to provide configuration for the CacheModule. It uses the useClass method to specify a CacheConfigService that implements the CacheOptionsFactory interface.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_18

LANGUAGE: typescript
CODE:
```
CacheModule.registerAsync({
  useClass: CacheConfigService,
});
```

----------------------------------------

TITLE: Async ClientsModule Configuration with Config Service
DESCRIPTION: Demonstrates asynchronous configuration of ClientsModule using ConfigService for dynamic settings.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ClientsModule.registerAsync([
      {
        imports: [ConfigModule],
        name: 'MATH_SERVICE',
        useFactory: async (configService: ConfigService) => ({
          transport: Transport.TCP,
          options: {
            url: configService.get('URL'),
          },
        }),
        inject: [ConfigService],
      },
    ]),
  ],
})
```

----------------------------------------

TITLE: Implementing Named Job Processing in NestJS BullMQ
DESCRIPTION: Example of handling different job types using a switch case pattern in the process method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import { Processor, WorkerHost } from '@nestjs/bullmq';
import { Job } from 'bullmq';

@Processor('audio')
export class AudioConsumer extends WorkerHost {
  async process(job: Job<any, any, string>): Promise<any> {
    switch (job.name) {
      case 'transcode': {
        let progress = 0;
        for (i = 0; i < 100; i++) {
          await doSomething(job.data);
          progress += 1;
          await job.progress(progress);
        }
        return {};
      }
      case 'concatenate': {
        await doSomeLogic2();
        break;
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Fastify Controller with Template Rendering
DESCRIPTION: Controller implementations for Fastify using both @Render decorator and direct response injection
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { Get, Controller, Render, Res } from '@nestjs/common';
import { FastifyReply } from 'fastify';

@Controller()
export class AppController {
  @Get()
  @Render('index.hbs')
  root() {
    return { message: 'Hello world!' };
  }

  @Get()
  root(@Res() res: FastifyReply) {
    return res.view('index.hbs', { title: 'Hello world!' });
  }
}
```

----------------------------------------

TITLE: Request-Scoped Query Handler Implementation
DESCRIPTION: Implementation of a request-scoped query handler with injected request context.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_21

LANGUAGE: typescript
CODE:
```
@QueryHandler(GetHeroQuery, {
  scope: Scope.REQUEST,
})
export class GetHeroHandler {
  constructor(
    @Inject(REQUEST) private request: MyRequest, // Inject the request context
  ) {}

  // Handler implementation here
}
```

----------------------------------------

TITLE: Registering Module with RouterModule in NestJS
DESCRIPTION: This snippet shows how to use RouterModule.register() to add a prefix to all routes in a specific module. It demonstrates registering the DashboardModule with a '/dashboard' prefix.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/router-module.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    DashboardModule,
    RouterModule.register([
      {
        path: 'dashboard',
        module: DashboardModule,
      },
    ]),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Creating MQTT Microservice
DESCRIPTION: Configuration for creating a NestJS microservice using MQTT transport with basic connection options
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.MQTT,
  options: {
    url: 'mqtt://localhost:1883',
  },
});
```

----------------------------------------

TITLE: Applying Custom GraphQL Directive in Code-First Approach
DESCRIPTION: This example demonstrates how to apply the @upper directive to a field in a code-first approach using the @Directive() decorator from @nestjs/graphql.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/directives.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Directive('@upper')
@Field()
title: string;
```

----------------------------------------

TITLE: Specifying Cache TTL for WebSocket Subscribers in NestJS
DESCRIPTION: Shows how to specify a cache TTL for WebSocket subscribers using the CacheTTL decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
@CacheTTL(10)
@UseInterceptors(CacheInterceptor)
@SubscribeMessage('events')
handleEvent(client: Client, data: string[]): Observable<string[]> {
  return [];
}
```

----------------------------------------

TITLE: Checking Node.js internationalization support
DESCRIPTION: Command to verify if the Node.js binary has internationalization (ICU) support, which is required by the Nest CLI.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
node -p process.versions.icu
```

----------------------------------------

TITLE: Uploading Multiple Files with FilesInterceptor in NestJS
DESCRIPTION: Example of using FilesInterceptor to handle multiple file uploads in a single field in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
@Post('upload')
@UseInterceptors(FilesInterceptor('files'))
uploadFile(@UploadedFiles() files: Array<Express.Multer.File>) {
  console.log(files);
}
```

----------------------------------------

TITLE: YAML Configuration Example
DESCRIPTION: Sample YAML configuration file structure for application settings.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_4

LANGUAGE: yaml
CODE:
```
http:
  host: 'localhost'
  port: 8080

db:
  postgres:
    url: 'localhost'
    port: 5432
    database: 'yaml-db'

  sqlite:
    database: 'sqlite.db'
```

----------------------------------------

TITLE: Installing HMR Dependencies without CLI
DESCRIPTION: Command to install the required packages for implementing Hot Module Replacement in a NestJS application without using the Nest CLI.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ npm i --save-dev webpack webpack-cli webpack-node-externals ts-loader run-script-webpack-plugin
```

----------------------------------------

TITLE: Creating a Custom Decorator with @SetMetadata in NestJS
DESCRIPTION: Demonstrates how to create a custom decorator using the @SetMetadata decorator from NestJS. This approach allows for more control over metadata key and value.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
import { SetMetadata } from '@nestjs/common';

export const Roles = (...roles: string[]) => SetMetadata('roles', roles);
```

----------------------------------------

TITLE: Configuring In-Memory Cache Module in NestJS
DESCRIPTION: Demonstrates how to import and configure the CacheModule in a NestJS application for in-memory caching.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CacheModule } from '@nestjs/cache-manager';
import { AppController } from './app.controller';

@Module({
  imports: [CacheModule.register()],
  controllers: [AppController],
})
export class AppModule {}
```

----------------------------------------

TITLE: Implementing CSRF Protection Middleware with Express in NestJS
DESCRIPTION: TypeScript code snippet demonstrating how to set up and use the csrf-csrf middleware for CSRF protection in a NestJS application using Express. It imports necessary functions and applies the protection middleware globally.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/csrf.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { doubleCsrf } from 'csrf-csrf';
// ...
// somewhere in your initialization file
const {
  invalidCsrfTokenError, // This is provided purely for convenience if you plan on creating your own middleware.
  generateToken, // Use this in your routes to generate and provide a CSRF hash, along with a token cookie and token.
  validateRequest, // Also a convenience if you plan on making your own middleware.
  doubleCsrfProtection, // This is the default CSRF protection middleware.
} = doubleCsrf(doubleCsrfOptions);
app.use(doubleCsrfProtection);
```

----------------------------------------

TITLE: Installing Express Session Package
DESCRIPTION: Command to install the express-session package and its TypeScript types for use with NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ npm i express-session
$ npm i -D @types/express-session
```

----------------------------------------

TITLE: Using Custom Validation Function in NestJS ConfigModule
DESCRIPTION: Shows how to apply a custom validation function to the ConfigModule to validate environment variables during application bootstrap.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_21

LANGUAGE: typescript
CODE:
```
import { validate } from './env.validation';

@Module({
  imports: [
    ConfigModule.forRoot({
      validate,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Configuring Apollo Sandbox in NestJS GraphQL
DESCRIPTION: This code shows how to configure the GraphQLModule to use Apollo Sandbox instead of graphql-playground as the GraphQL IDE for local development.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { ApolloServerPluginLandingPageLocalDefault } from '@apollo/server/plugin/landingPage/default';

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      playground: false,
      plugins: [ApolloServerPluginLandingPageLocalDefault()],
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Creating Durable Provider using Injectable Decorator in TypeScript
DESCRIPTION: This code snippet shows how to create a durable provider using the @Injectable decorator. The provider is set to request scope and marked as durable.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
import { Injectable, Scope } from '@nestjs/common';

@Injectable({ scope: Scope.REQUEST, durable: true })
export class CatsService {}
```

----------------------------------------

TITLE: Asynchronous Module Initialization in NestJS
DESCRIPTION: Demonstrates how to implement asynchronous module initialization using async/await pattern with lifecycle hooks.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lifecycle-events.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
async onModuleInit(): Promise<void> {
  await this.fetch();
}
```

----------------------------------------

TITLE: Creating NATS Microservice
DESCRIPTION: Configuration for creating a NestJS microservice using NATS transport with basic server connection settings.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.NATS,
  options: {
    servers: ['nats://localhost:4222'],
  },
});
```

----------------------------------------

TITLE: Injecting Cache Manager in NestJS
DESCRIPTION: Shows how to inject the cache manager instance into a class using the CACHE_MANAGER token.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}
```

----------------------------------------

TITLE: Configuring Health Module with HTTP
DESCRIPTION: Complete HealthModule configuration including HTTP module and controller
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { TerminusModule } from '@nestjs/terminus';
import { HttpModule } from '@nestjs/axios';
import { HealthController } from './health.controller';

@Module({
  imports: [TerminusModule, HttpModule],
  controllers: [HealthController],
})
export class HealthModule {}
```

----------------------------------------

TITLE: Module with Dependency Injection
DESCRIPTION: Demonstrates how to inject providers into a module class for configuration purposes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

@Module({
  controllers: [CatsController],
  providers: [CatsService],
})
export class CatsModule {
  constructor(private catsService: CatsService) {}
}
```

----------------------------------------

TITLE: Initializing Schedule Module in NestJS
DESCRIPTION: Configuration to activate job scheduling by importing ScheduleModule into the root AppModule.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { ScheduleModule } from '@nestjs/schedule';

@Module({
  imports: [
    ScheduleModule.forRoot()
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Library-Specific Response Handling in NestJS
DESCRIPTION: Demonstrates how to use library-specific response objects in NestJS controllers using the @Res() decorator, with examples for both standard and passthrough modes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_21

LANGUAGE: typescript
CODE:
```
import { Controller, Get, Post, Res, HttpStatus } from '@nestjs/common';
import { Response } from 'express';

@Controller('cats')
export class CatsController {
  @Post()
  create(@Res() res: Response) {
    res.status(HttpStatus.CREATED).send();
  }

  @Get()
  findAll(@Res() res: Response) {
     res.status(HttpStatus.OK).json([]);
  }
}

@Get()
findAll(@Res({ passthrough: true }) res: Response) {
  res.status(HttpStatus.OK);
  return [];
}
```

----------------------------------------

TITLE: Configuring Global Interceptors with Dependency Injection in NestJS
DESCRIPTION: This snippet shows how to set up a global interceptor within a module to enable dependency injection for the interceptor.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { APP_INTERCEPTOR } from '@nestjs/core';

@Module({
  providers: [
    {
      provide: APP_INTERCEPTOR,
      useClass: LoggingInterceptor,
    },
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Setting Field-Level Complexity in GraphQL Schema
DESCRIPTION: Example of setting complexity for a field using the @Field decorator
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/complexity.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Field({ complexity: 3 })
title: string;
```

----------------------------------------

TITLE: Using Default Configuration Values
DESCRIPTION: Demonstrates setting default values when accessing configuration properties
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
// use "localhost" when "database.host" is not defined
const dbHost = this.configService.get<string>('database.host', 'localhost');
```

----------------------------------------

TITLE: Using PickType in GraphQL Schema
DESCRIPTION: Example of using PickType utility to create a new type by selecting specific properties from an existing type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@InputType()
export class UpdateEmailInput extends PickType(CreateUserInput, [
  'email',
] as const) {}
```

----------------------------------------

TITLE: Disabling Detailed Error Messages in ValidationPipe
DESCRIPTION: This code snippet shows how to disable detailed error messages in the `ValidationPipe` by passing an options object with `disableErrorMessages` set to `true`. This can be useful in production environments where detailed error messages are not desired.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_8

LANGUAGE: typescript
CODE:
```
app.useGlobalPipes(
  new ValidationPipe({
    disableErrorMessages: true,
  }),
);
```

----------------------------------------

TITLE: Creating .dockerignore File for NestJS Project
DESCRIPTION: This .dockerignore file specifies which files and directories should be ignored when building the Docker image. It helps keep the image lightweight by excluding unnecessary files.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
node_modules
dist
*.log
*.md
.git
```

----------------------------------------

TITLE: Defining Model Reference (Population) in Mongoose Schema - TypeScript
DESCRIPTION: Configures an 'owner' property as a reference to another collection, enabling Mongoose population. Uses mongoose.Schema.Types.ObjectId and the 'ref' option for linking to the Owner model. Depends on mongoose and correct definition of the Owner schema; allows efficient cross-collection queries.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_5

LANGUAGE: typescript
CODE:
```
import * as mongoose from 'mongoose';
import { Owner } from '../owners/schemas/owner.schema';

// inside the class definition
@Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Owner' })
owner: Owner;

```

----------------------------------------

TITLE: Creating Custom Getter Functions for Config Service in NestJS (JavaScript)
DESCRIPTION: JavaScript version of implementing a custom service with getter methods for configuration values using NestJS's dependency injection.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_23

LANGUAGE: typescript
CODE:
```
@Dependencies(ConfigService)
@Injectable()
export class ApiConfigService {
  constructor(configService) {
    this.configService = configService;
  }

  get isAuthEnabled() {
    return this.configService.get('AUTH_ENABLED') === 'true';
  }
}
```

----------------------------------------

TITLE: Starting NestJS Application with SWC Builder
DESCRIPTION: Command to start a NestJS application using the SWC builder for faster compilation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ nest start -b swc
# OR nest start --builder swc
```

----------------------------------------

TITLE: Registering Field Middleware and Extensions in NestJS GraphQL
DESCRIPTION: Example showing how to combine the @Field decorator with middleware and @Extensions decorator to implement field-level access control for a password field.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/extensions.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Field({ middleware: [checkRoleMiddleware] })
@Extensions({ role: Role.ADMIN })
password: string;
```

----------------------------------------

TITLE: Configuring MulterModule Asynchronously with Class in NestJS
DESCRIPTION: This code demonstrates how to use registerAsync() with a class to configure MulterModule. It includes an example of a class implementing the MulterOptionsFactory interface to provide Multer options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
MulterModule.registerAsync({
  useClass: MulterConfigService,
});
```

LANGUAGE: typescript
CODE:
```
@Injectable()
class MulterConfigService implements MulterOptionsFactory {
  createMulterOptions(): MulterModuleOptions {
    return {
      dest: './upload',
    };
  }
}
```

----------------------------------------

TITLE: Configuring GraphQLModule with Schema-First Approach in NestJS
DESCRIPTION: This snippet demonstrates how to set up the GraphQLModule using the schema-first approach, specifying the location of GraphQL SDL schema definition files.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot<ApolloDriverConfig>({
  driver: ApolloDriver,
  typePaths: ['./**/*.graphql'],
}),
```

----------------------------------------

TITLE: Accessing Underlying Redis Driver in NestJS Microservice
DESCRIPTION: Demonstrates how to access the underlying Redis driver instances for both publishing and subscribing, enabling advanced use cases or driver-specific operations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
const [pub, sub] =
  this.client.unwrap<[import('ioredis').Redis, import('ioredis').Redis]>();
```

----------------------------------------

TITLE: Dynamically Adding a Timeout in NestJS
DESCRIPTION: Shows how to dynamically create and add a new timeout using the SchedulerRegistry's addTimeout method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_18

LANGUAGE: typescript
CODE:
```
addTimeout(name: string, milliseconds: number) {
  const callback = () => {
    this.logger.warn(`Timeout ${name} executing after (${milliseconds})!`);
  };

  const timeout = setTimeout(callback, milliseconds);
  this.schedulerRegistry.addTimeout(name, timeout);
}
```

----------------------------------------

TITLE: Validating Arrays in Controller Methods with ParseArrayPipe (TypeScript)
DESCRIPTION: This snippet applies ParseArrayPipe to validate arrays of objects in the request body, ensuring each item conforms to the specified DTO class type. The pipe is constructed with items:CreateUserDto, and is useful for accepting bulk data in POST endpoints while maintaining strong type safety. Requires @nestjs/common's ParseArrayPipe.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_21

LANGUAGE: typescript
CODE:
```
@Post()
createBulk(
  @Body(new ParseArrayPipe({ items: CreateUserDto }))
  createUserDtos: CreateUserDto[],
) {
  return 'This action adds new users';
}
```

----------------------------------------

TITLE: Enabling URI Versioning in NestJS
DESCRIPTION: This snippet demonstrates how to enable URI versioning in a NestJS application. It uses the VersioningType.URI option to configure versioning in the main application file.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule);
// or "app.enableVersioning()"
app.enableVersioning({
  type: VersioningType.URI,
});
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Implementing User Service with Prisma
DESCRIPTION: User service implementation with CRUD operations using Prisma Client
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { PrismaService } from './prisma.service';
import { User, Prisma } from '@prisma/client';

@Injectable()
export class UsersService {
  constructor(private prisma: PrismaService) {}

  async user(
    userWhereUniqueInput: Prisma.UserWhereUniqueInput,
  ): Promise<User | null> {
    return this.prisma.user.findUnique({
      where: userWhereUniqueInput,
    });
  }

  async users(params: {
    skip?: number;
    take?: number;
    cursor?: Prisma.UserWhereUniqueInput;
    where?: Prisma.UserWhereInput;
    orderBy?: Prisma.UserOrderByWithRelationInput;
  }): Promise<User[]> {
    const { skip, take, cursor, where, orderBy } = params;
    return this.prisma.user.findMany({
      skip,
      take,
      cursor,
      where,
      orderBy,
    });
  }

  async createUser(data: Prisma.UserCreateInput): Promise<User> {
    return this.prisma.user.create({
      data,
    });
  }

  async updateUser(params: {
    where: Prisma.UserWhereUniqueInput;
    data: Prisma.UserUpdateInput;
  }): Promise<User> {
    const { where, data } = params;
    return this.prisma.user.update({
      data,
      where,
    });
  }

  async deleteUser(where: Prisma.UserWhereUniqueInput): Promise<User> {
    return this.prisma.user.delete({
      where,
    });
  }
}
```

----------------------------------------

TITLE: Registering a Mongoose Model in the Module with forFeature - NestJS TypeScript
DESCRIPTION: Registers the Cat schema with the MongooseModule within a domain-specific module. The MongooseModule.forFeature method makes the Cat model available for dependency injection in providers. Requires @nestjs/mongoose and a defined CatSchema.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_11

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';
import { Cat, CatSchema } from './schemas/cat.schema';

@Module({
  imports: [MongooseModule.forFeature([{ name: Cat.name, schema: CatSchema }])],
  controllers: [CatsController],
  providers: [CatsService],
})
export class CatsModule {}

```

----------------------------------------

TITLE: Subscribing to Redis Client Status Updates in NestJS
DESCRIPTION: Example of how to subscribe to status updates from the Redis client, providing real-time information about the connection and driver state.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
this.client.status.subscribe((status: RedisStatus) => {
  console.log(status);
});
```

----------------------------------------

TITLE: Installing JWT Dependencies in NestJS
DESCRIPTION: Installation of required packages for JWT implementation including @nestjs/jwt for JWT manipulation and passport-jwt for JWT strategy.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
$ npm install --save @nestjs/jwt passport-jwt
$ npm install --save-dev @types/passport-jwt
```

----------------------------------------

TITLE: Configuring CatsModule with Mongoose Integration
DESCRIPTION: Sets up the CatsModule by importing the DatabaseModule and including the necessary controllers, services, and providers for Mongoose integration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';
import { catsProviders } from './cats.providers';
import { DatabaseModule } from '../database/database.module';

@Module({
  imports: [DatabaseModule],
  controllers: [CatsController],
  providers: [
    CatsService,
    ...catsProviders,
  ],
})
export class CatsModule {}
```

----------------------------------------

TITLE: Implementing a Logging Interceptor in NestJS
DESCRIPTION: This snippet demonstrates how to create a LoggingInterceptor class that logs the execution time of route handlers. It uses RxJS operators to manipulate the response stream.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

@Injectable()
export class LoggingInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    console.log('Before...');

    const now = Date.now();
    return next
      .handle()
      .pipe(
        tap(() => console.log(`After... ${Date.now() - now}ms`)),
      );
  }
}
```

----------------------------------------

TITLE: Creating a Script for On-Demand TypeScript Definition Generation in NestJS
DESCRIPTION: This script uses the GraphQLDefinitionsFactory to generate TypeScript definitions from GraphQL SDL files on demand.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { GraphQLDefinitionsFactory } from '@nestjs/graphql';
import { join } from 'path';

const definitionsFactory = new GraphQLDefinitionsFactory();
definitionsFactory.generate({
  typePaths: ['./src/**/*.graphql'],
  path: join(process.cwd(), 'src/graphql.ts'),
  outputAs: 'class',
});
```

----------------------------------------

TITLE: Disabling Auto-Commit in NestJS Kafka Microservice Configuration
DESCRIPTION: This snippet demonstrates how to disable auto-committing of messages in the NestJS Kafka microservice configuration by setting 'autoCommit: false' in the 'run' options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.KAFKA,
  options: {
    client: {
      brokers: ['localhost:9092'],
    },
    run: {
      autoCommit: false
    }
  }
});
```

----------------------------------------

TITLE: Combining Multiple DTOs with IntersectionType Utility in NestJS (TypeScript)
DESCRIPTION: This code combines properties from two DTO classes into a new class using IntersectionType from @nestjs/mapped-types, creating a compound DTO for scenarios requiring merged data contracts. Both class references are passed to IntersectionType. Ensure correct imports and type compatibility when using this utility.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_18

LANGUAGE: typescript
CODE:
```
export class CreateCatDto {
  name: string;
  breed: string;
}

export class AdditionalCatInfo {
  color: string;
}

```

LANGUAGE: typescript
CODE:
```
export class UpdateCatDto extends IntersectionType(
  CreateCatDto,
  AdditionalCatInfo,
) {}
```

----------------------------------------

TITLE: Configuring Redis Transporter in NestJS Microservice
DESCRIPTION: Example of how to set up the Redis transporter in a NestJS microservice using the createMicroservice method. It specifies the transport type and connection options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.REDIS,
  options: {
    host: 'localhost',
    port: 6379,
  },
});
```

----------------------------------------

TITLE: Unit Testing NestJS Controller and Service
DESCRIPTION: Example of a unit test for CatsController and CatsService using Jest. It demonstrates manual instantiation of classes and mocking of service methods.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

describe('CatsController', () => {
  let catsController: CatsController;
  let catsService: CatsService;

  beforeEach(() => {
    catsService = new CatsService();
    catsController = new CatsController(catsService);
  });

  describe('findAll', () => {
    it('should return an array of cats', async () => {
      const result = ['test'];
      jest.spyOn(catsService, 'findAll').mockImplementation(() => result);

      expect(await catsController.findAll()).toBe(result);
    });
  });
});
```

----------------------------------------

TITLE: Implementing Global Middleware in NestJS
DESCRIPTION: This snippet shows how to apply middleware globally to all routes in a NestJS application. It uses the app.use() method on the NestFactory-created application instance to bind the logger middleware to all routes.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule);
app.use(logger);
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Using CurrentUser Decorator in GraphQL Resolver
DESCRIPTION: Demonstrates how to use the CurrentUser decorator in a GraphQL resolver to access the authenticated user. This example shows a whoAmI query that returns the current user's data.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_34

LANGUAGE: typescript
CODE:
```
@Query(() => User)
@UseGuards(GqlAuthGuard)
whoAmI(@CurrentUser() user: User) {
  return this.usersService.findById(user.id);
}
```

----------------------------------------

TITLE: Custom Logger Service Implementation
DESCRIPTION: Complete implementation of a custom logger service implementing the LoggerService interface.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import { LoggerService, Injectable } from '@nestjs/common';

@Injectable()
export class MyLogger implements LoggerService {
  /**
   * Write a 'log' level log.
   */
  log(message: any, ...optionalParams: any[]) {}

  /**
   * Write a 'fatal' level log.
   */
  fatal(message: any, ...optionalParams: any[]) {}

  /**
   * Write an 'error' level log.
   */
  error(message: any, ...optionalParams: any[]) {}

  /**
   * Write a 'warn' level log.
   */
  warn(message: any, ...optionalParams: any[]) {}

  /**
   * Write a 'debug' level log.
   */
  debug?(message: any, ...optionalParams: any[]) {}

  /**
   * Write a 'verbose' level log.
   */
  verbose?(message: any, ...optionalParams: any[]) {}
}
```

----------------------------------------

TITLE: Applying Multiple Middleware in NestJS
DESCRIPTION: This example demonstrates how to apply multiple middleware functions sequentially in a NestJS application. It uses the consumer.apply() method with a comma-separated list of middleware functions, including cors, helmet, and a custom logger.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
consumer.apply(cors(), helmet(), logger).forRoutes(CatsController);
```

----------------------------------------

TITLE: Initializing LazyModuleLoader in Service Class
DESCRIPTION: Shows how to inject and initialize the LazyModuleLoader in a service class using dependency injection.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lazy-loading-modules.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@Injectable()
export class CatsService {
  constructor(private lazyModuleLoader: LazyModuleLoader) {}
}
```

----------------------------------------

TITLE: ConfigService with Injected Options
DESCRIPTION: Final implementation of ConfigService using dependency injection for options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
import * as dotenv from 'dotenv';
import * as fs from 'fs';
import * as path from 'path';
import { Injectable, Inject } from '@nestjs/common';
import { EnvConfig } from './interfaces';

@Injectable()
export class ConfigService {
  private readonly envConfig: EnvConfig;

  constructor(@Inject('CONFIG_OPTIONS') private options: Record<string, any>) {
    const filePath = `${process.env.NODE_ENV || 'development'}.env`;
    const envFile = path.resolve(__dirname, '../../', options.folder, filePath);
    this.envConfig = dotenv.parse(fs.readFileSync(envFile));
  }

  get(key: string): string {
    return this.envConfig[key];
  }
}
```

----------------------------------------

TITLE: Generated TypeScript Definition for Schema-First Enum
DESCRIPTION: Shows the TypeScript enum that would be generated from a schema-first GraphQL enum definition.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
export enum AllowedColor {
  RED
  GREEN
  BLUE
}
```

----------------------------------------

TITLE: Defining Multiple References in Mongoose Schema - TypeScript
DESCRIPTION: Establishes an 'owners' property as an array of references to the Owner collection. Wraps the type option in an array for Mongoose schema configuration. Useful for one-to-many relationships. Dependencies: mongoose, Owner schema.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_6

LANGUAGE: typescript
CODE:
```
@Prop({ type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Owner' }] })
owners: Owner[];

```

----------------------------------------

TITLE: Configuring NATS Client Module
DESCRIPTION: Setting up NATS client using ClientsModule with server configuration and service name.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'MATH_SERVICE',
        transport: Transport.NATS,
        options: {
          servers: ['nats://localhost:4222'],
        }
      },
    ]),
  ]
  ...
})
```

----------------------------------------

TITLE: Controller-based Middleware Configuration
DESCRIPTION: Demonstrates applying middleware to specific controller classes instead of route paths. Shows integration with CatsController.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';
import { LoggerMiddleware } from './common/middleware/logger.middleware';
import { CatsModule } from './cats/cats.module';
import { CatsController } from './cats/cats.controller';

@Module({
  imports: [CatsModule],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer
      .apply(LoggerMiddleware)
      .forRoutes(CatsController);
  }
}
```

----------------------------------------

TITLE: Creating an Input Type for GraphQL Mutations in NestJS
DESCRIPTION: Defining an input type class using @InputType() decorator to pass complex objects as arguments to GraphQL mutations. This example creates an UpvotePostInput class with a postId field.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { InputType, Field } from '@nestjs/graphql';

@InputType()
export class UpvotePostInput {
  @Field()
  postId: number;
}
```

----------------------------------------

TITLE: Using WebSocket Exception Filter in NestJS
DESCRIPTION: Illustrates how to apply a WebSocket exception filter to a specific message handler using the @UseFilters decorator in a NestJS gateway.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/exception-filters.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@UseFilters(new WsExceptionFilter())
@SubscribeMessage('events')
onEvent(client, data: any): WsResponse<any> {
  const event = 'events';
  return { event, data };
}
```

----------------------------------------

TITLE: Configuring Fastify to Listen on All Interfaces
DESCRIPTION: Example showing how to configure Fastify to accept connections from any host by binding to 0.0.0.0.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
async function bootstrap() {
  const app = await NestFactory.create<NestFastifyApplication>(
    AppModule,
    new FastifyAdapter(),
  );
  await app.listen(3000, '0.0.0.0');
}
```

----------------------------------------

TITLE: Implementing Functional Middleware in NestJS TypeScript
DESCRIPTION: This snippet demonstrates how to create a simple functional middleware for logging requests in NestJS. It defines a logger function that takes Express Request, Response, and NextFunction as parameters.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/middlewares.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Request, Response, NextFunction } from 'express';

export function logger(req: Request, res: Response, next: NextFunction) {
  console.log(`Request...`);
  next();
};
```

LANGUAGE: typescript
CODE:
```
export function logger(req, res, next) {
  console.log(`Request...`);
  next();
};
```

----------------------------------------

TITLE: Implementing Cron Jobs in NestJS Service
DESCRIPTION: Example of creating a cron job using @Cron decorator that executes at second 45 of every minute.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';

@Injectable()
export class TasksService {
  private readonly logger = new Logger(TasksService.name);

  @Cron('45 * * * * *')
  handleCron() {
    this.logger.debug('Called when the current second is 45');
  }
}
```

----------------------------------------

TITLE: Setting Custom Factory Method Name
DESCRIPTION: Shows how to customize the factory method name using setFactoryMethodName()
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
export const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN } =
  new ConfigurableModuleBuilder<ConfigModuleOptions>().setFactoryMethodName('createConfigOptions').build();
```

----------------------------------------

TITLE: Sending Messages to Microservice
DESCRIPTION: Demonstrates how to send messages to a microservice using ClientProxy's send method with pattern and payload.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
accumulate(): Observable<number> {
  const pattern = { cmd: 'sum' };
  const payload = [1, 2, 3];
  return this.client.send<number>(pattern, payload);
}
```

----------------------------------------

TITLE: Configuring Helmet with Apollo Server Fastify in NestJS
DESCRIPTION: TypeScript code showing how to configure Helmet with specific Content Security Policy (CSP) settings to work with Apollo Server Fastify in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/helmet.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
await app.register(fastifyHelmet, {
   contentSecurityPolicy: {
     directives: {
       defaultSrc: [`'self'`, 'unpkg.com'],
       styleSrc: [
         `'self'`,
         `'unsafe-inline'`,
         'cdn.jsdelivr.net',
         'fonts.googleapis.com',
         'unpkg.com',
       ],
       fontSrc: [`'self'`, 'fonts.gstatic.com', 'data:'],
       imgSrc: [`'self'`, 'data:', 'cdn.jsdelivr.net'],
       scriptSrc: [
         `'self'`,
         `https: 'unsafe-inline'`,
         `cdn.jsdelivr.net`,
         `'unsafe-eval'`,
       ],
     },
   },
 });

// If you are not going to use CSP at all, you can use this:
await app.register(fastifyHelmet, {
  contentSecurityPolicy: false,
});
```

----------------------------------------

TITLE: Setting Custom Response Headers in NestJS
DESCRIPTION: Shows how to set custom HTTP response headers using the @Header decorator. The example demonstrates setting a Cache-Control header for a POST endpoint.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@Post()
@Header('Cache-Control', 'no-store')
create() {
  return 'This action adds a new cat';
}
```

----------------------------------------

TITLE: Asynchronous Sequelize Configuration in NestJS
DESCRIPTION: Shows how to use forRootAsync to configure Sequelize asynchronously in NestJS. This method allows for dynamic configuration based on environment variables or other asynchronous sources.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_36

LANGUAGE: typescript
CODE:
```
SequelizeModule.forRootAsync({
  imports: [ConfigModule],
  useFactory: (configService: ConfigService) => ({
    dialect: 'mysql',
    host: configService.get('HOST'),
    port: +configService.get('PORT'),
    username: configService.get('USERNAME'),
    password: configService.get('PASSWORD'),
    database: configService.get('DATABASE'),
    models: [],
  }),
  inject: [ConfigService],
});
```

----------------------------------------

TITLE: Creating Null-to-Empty-String Transformation Interceptor in NestJS
DESCRIPTION: This interceptor transforms null values to empty strings in the response. It demonstrates how to create a reusable solution for data transformation across an entire application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable()
export class ExcludeNullInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    return next
      .handle()
      .pipe(map(value => value === null ? '' : value ));
  }
}
```

LANGUAGE: javascript
CODE:
```
import { Injectable } from '@nestjs/common';
import { map } from 'rxjs/operators';

@Injectable()
export class ExcludeNullInterceptor {
  intercept(context, next) {
    return next
      .handle()
      .pipe(map(value => value === null ? '' : value ));
  }
}
```

----------------------------------------

TITLE: Implementing JWT Strategy in NestJS with Passport
DESCRIPTION: Creates a JWT strategy class that extends PassportStrategy to handle JWT token validation. The strategy extracts JWT from the Authorization header, verifies its validity, and returns user information from the payload.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
import { ExtractJwt, Strategy } from 'passport-jwt';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable } from '@nestjs/common';
import { jwtConstants } from './constants';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: jwtConstants.secret,
    });
  }

  async validate(payload: any) {
    return { userId: payload.sub, username: payload.username };
  }
}
```

LANGUAGE: javascript
CODE:
```
import { ExtractJwt, Strategy } from 'passport-jwt';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable } from '@nestjs/common';
import { jwtConstants } from './constants';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: jwtConstants.secret,
    });
  }

  async validate(payload) {
    return { userId: payload.sub, username: payload.username };
  }
}
```

----------------------------------------

TITLE: Implementing MongooseOptionsFactory for Async Configuration
DESCRIPTION: Defines a class that implements the `MongooseOptionsFactory` interface, required when using the `useClass` option for asynchronous module configuration. The `createMongooseOptions` method must return the Mongoose connection options object.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_33

LANGUAGE: typescript
CODE:
```
@Injectable()
export class MongooseConfigService implements MongooseOptionsFactory {
  createMongooseOptions(): MongooseModuleOptions {
    return {
      uri: 'mongodb://localhost/nest',
    };
  }
}
```

----------------------------------------

TITLE: Accessing RabbitMQ Context
DESCRIPTION: Example of handling RabbitMQ messages with context and payload decorators
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@MessagePattern('notifications')
getNotifications(@Payload() data: number[], @Ctx() context: RmqContext) {
  console.log(`Pattern: ${context.getPattern()}`);
}
```

----------------------------------------

TITLE: Mocking ContextIdFactory for Request-Scoped Testing in NestJS
DESCRIPTION: This snippet shows how to create a context identifier and mock the ContextIdFactory to use this ID for all incoming requests during testing. This allows access to a consistent DI container sub-tree for request-scoped providers.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
const contextId = ContextIdFactory.create();
jest
  .spyOn(ContextIdFactory, 'getByRequest')
  .mockImplementation(() => contextId);
```

----------------------------------------

TITLE: Bearer Authentication in NestJS
DESCRIPTION: Demonstrates implementation of bearer token authentication using @ApiBearerAuth decorator and its DocumentBuilder configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/security.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@ApiBearerAuth()
@Controller('cats')
export class CatsController {}
```

LANGUAGE: typescript
CODE:
```
const options = new DocumentBuilder().addBearerAuth();
```

----------------------------------------

TITLE: Creating Basic Cache Interceptor in NestJS
DESCRIPTION: This interceptor demonstrates how to implement a simple caching mechanism. It overrides the response stream to return cached data when available, preventing the execution of the route handler.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable, of } from 'rxjs';

@Injectable()
export class CacheInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const isCached = true;
    if (isCached) {
      return of([]);
    }
    return next.handle();
  }
}
```

LANGUAGE: javascript
CODE:
```
import { Injectable } from '@nestjs/common';
import { of } from 'rxjs';

@Injectable()
export class CacheInterceptor {
  intercept(context, next) {
    const isCached = true;
    if (isCached) {
      return of([]);
    }
    return next.handle();
  }
}
```

----------------------------------------

TITLE: Defining Prisma Data Models
DESCRIPTION: Schema definition for User and Post models with relationships.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_4

LANGUAGE: groovy
CODE:
```
model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int      @default(autoincrement()) @id
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}
```

----------------------------------------

TITLE: Defining a GraphQL Query in NestJS
DESCRIPTION: This snippet demonstrates how to define a GraphQL query using the @Query() decorator in a NestJS resolver class. It shows how to specify the return type and handle arguments.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@Query(() => Author)
async author(@Args('id', { type: () => Int }) id: number) {
  return this.authorsService.findOneById(id);
}
```

----------------------------------------

TITLE: Specifying Array Type Properties in Mongoose Schema - TypeScript
DESCRIPTION: Specifies that the 'tags' property is an array of strings within the schema using NestJS's @Prop decorator. Requires @nestjs/mongoose and TypeScript reflection for type metadata. Useful for representing collections of items in a document field.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_3

LANGUAGE: typescript
CODE:
```
@Prop([String])
tags: string[];

```

----------------------------------------

TITLE: Implementing UsersService in TypeScript
DESCRIPTION: Definition of UsersService class with a hard-coded list of users and a method to find a user by username. This service encapsulates user operations for the authentication process.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';

// This should be a real class/interface representing a user entity
export type User = any;

@Injectable()
export class UsersService {
  private readonly users = [
    {
      userId: 1,
      username: 'john',
      password: 'changeme',
    },
    {
      userId: 2,
      username: 'maria',
      password: 'guess',
    },
  ];

  async findOne(username: string): Promise<User | undefined> {
    return this.users.find(user => user.username === username);
  }
}
```

----------------------------------------

TITLE: Custom HTTP Exception Response
DESCRIPTION: Example of throwing an HttpException with a custom error response and status code.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Get()
async findAll() {
  try {
    await this.service.findAll()
  } catch (error) {
    throw new HttpException({
      status: HttpStatus.FORBIDDEN,
      error: 'This is a custom message',
    }, HttpStatus.FORBIDDEN, {
      cause: error
    });
  }
}
```

----------------------------------------

TITLE: Running NestJS Build Script via NPM
DESCRIPTION: Executes the 'build' script defined in the project's package.json file using npm. This typically invokes the locally installed NestJS CLI's build command (`nest build`), leveraging project-specific dependencies and configurations for compiling the application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/scripts.md#_snippet_0

LANGUAGE: Bash
CODE:
```
$ npm run build
```

----------------------------------------

TITLE: Accessing HttpAdapter Instance in NestJS
DESCRIPTION: Shows how to access the actual HttpAdapter instance from the HttpAdapterHost.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/http-adapter.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const adapterHost = app.get(HttpAdapterHost);
const httpAdapter = adapterHost.httpAdapter;
```

----------------------------------------

TITLE: Creating an Exception Filter that Extends BaseExceptionFilter in NestJS
DESCRIPTION: Demonstrates how to extend the built-in BaseExceptionFilter to inherit its behavior while allowing for custom overrides. This pattern enables delegation of exception processing to the base filter.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
import { Catch, ArgumentsHost } from '@nestjs/common';
import { BaseExceptionFilter } from '@nestjs/core';

@Catch()
export class AllExceptionsFilter extends BaseExceptionFilter {
  catch(exception: unknown, host: ArgumentsHost) {
    super.catch(exception, host);
  }
}
```

----------------------------------------

TITLE: Installing Helmet for Fastify in NestJS
DESCRIPTION: Command to install the Fastify-specific Helmet package for use in a NestJS application with FastifyAdapter.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/helmet.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ npm i --save @fastify/helmet
```

----------------------------------------

TITLE: Exporting Custom Providers with Full Provider Object in NestJS
DESCRIPTION: This example shows how to export a custom provider using the full provider object instead of just the token.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
const connectionFactory = {
  provide: 'CONNECTION',
  useFactory: (optionsProvider: OptionsProvider) => {
    const options = optionsProvider.get();
    return new DatabaseConnection(options);
  },
  inject: [OptionsProvider],
};

@Module({
  providers: [connectionFactory],
  exports: [connectionFactory],
})
export class AppModule {}
```

----------------------------------------

TITLE: Importing a Library Module in a Nest.js Application
DESCRIPTION: Example of importing a library module into an application module. This demonstrates the usage of the path alias (@app) that was configured during library creation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/libraries.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { MyLibraryModule } from '@app/my-library';

@Module({
  imports: [MyLibraryModule],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
```

----------------------------------------

TITLE: Creating a gRPC Microservice in NestJS
DESCRIPTION: Example of setting up a NestJS application as a gRPC microservice with configuration for the hero service. It specifies the transport type and options including the package name and path to the proto file.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.GRPC,
  options: {
    package: 'hero',
    protoPath: join(__dirname, 'hero/hero.proto'),
  },
});
```

----------------------------------------

TITLE: Using @Client Decorator for gRPC Client in NestJS
DESCRIPTION: Alternative approach using @Client decorator to instantiate gRPC client with transport and proto configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
@Injectable()
export class AppService implements OnModuleInit {
  @Client({
    transport: Transport.GRPC,
    options: {
      package: 'hero',
      protoPath: join(__dirname, 'hero/hero.proto'),
    },
  })
  client: ClientGrpc;

  private heroesService: HeroesService;

  onModuleInit() {
    this.heroesService = this.client.getService<HeroesService>('HeroesService');
  }

  getHero(): Observable<string> {
    return this.heroesService.findOne({ id: 1 });
  }
}
```

----------------------------------------

TITLE: Getting LazyModuleLoader from Application Instance
DESCRIPTION: Demonstrates how to obtain the LazyModuleLoader instance from the main application bootstrap file.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lazy-loading-modules.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const lazyModuleLoader = app.get(LazyModuleLoader);
```

----------------------------------------

TITLE: Filtering Subscriptions with Access to Resolver Instance in NestJS
DESCRIPTION: Demonstrates how to implement a subscription filter with access to the resolver instance, allowing use of injected providers.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
@Subscription(() => Comment, {
  filter(this: AuthorResolver, payload, variables) {
    // "this" refers to an instance of "AuthorResolver"
    return payload.commentAdded.title === variables.title;
  }
})
commentAdded(@Args('title') title: string, @Context('pubsub') pubSub: PubSub) {
  return pubSub.subscribe('commentAdded');
}
```

----------------------------------------

TITLE: Kafka Microservice Configuration
DESCRIPTION: Demonstrates configuration setup for Kafka microservice with client ID and consumer group settings.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.KAFKA,
  options: {
    client: {
      clientId: 'hero', // hero-server
      brokers: ['localhost:9092'],
    },
    consumer: {
      groupId: 'hero-consumer' // hero-consumer-server
    },
  }
});
```

----------------------------------------

TITLE: Implementing SequelizeOptionsFactory for Configuration in NestJS
DESCRIPTION: Demonstrates how to create a custom service that implements SequelizeOptionsFactory to provide Sequelize configuration options. This approach allows for more complex configuration logic.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_37

LANGUAGE: typescript
CODE:
```
@Injectable()
class SequelizeConfigService implements SequelizeOptionsFactory {
  createSequelizeOptions(): SequelizeModuleOptions {
    return {
      dialect: 'mysql',
      host: 'localhost',
      port: 3306,
      username: 'root',
      password: 'root',
      database: 'test',
      models: [],
    };
  }
}
```

----------------------------------------

TITLE: Setting Global Default Version in NestJS
DESCRIPTION: This code shows how to set a global default version for controllers and routes in a NestJS application. It allows specifying a single version, multiple versions, or VERSION_NEUTRAL as the default.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
app.enableVersioning({
  // ...
  defaultVersion: '1'
  // or
  defaultVersion: ['1', '2']
  // or
  defaultVersion: VERSION_NEUTRAL
});
```

----------------------------------------

TITLE: Accessing Configuration Values
DESCRIPTION: Examples of retrieving environment variables and custom configuration values using ConfigService
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
// get an environment variable
const dbUser = this.configService.get<string>('DATABASE_USER');

// get a custom configuration value
const dbHost = this.configService.get<string>('database.host');
```

----------------------------------------

TITLE: Implementing a Resolver Class for Authors in NestJS
DESCRIPTION: Complete implementation of an AuthorsResolver class with both query and field resolvers. This demonstrates how to create query handlers and resolve related fields using the @Parent decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@Resolver(() => Author)
export class AuthorsResolver {
  constructor(
    private authorsService: AuthorsService,
    private postsService: PostsService,
  ) {}

  @Query(() => Author)
  async author(@Args('id', { type: () => Int }) id: number) {
    return this.authorsService.findOneById(id);
  }

  @ResolveField()
  async posts(@Parent() author: Author) {
    const { id } = author;
    return this.postsService.findAll({ authorId: id });
  }
}
```

----------------------------------------

TITLE: Using Custom Config Service in NestJS Application (JavaScript)
DESCRIPTION: JavaScript version of using a custom config service with getter methods in a NestJS service.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_25

LANGUAGE: typescript
CODE:
```
@Dependencies(ApiConfigService)
@Injectable()
export class AppService {
  constructor(apiConfigService) {
    if (apiConfigService.isAuthEnabled) {
      // Authentication is enabled
    }
  }
}
```

----------------------------------------

TITLE: Using a Specific Named Mongoose Connection in a NestJS Feature Module
DESCRIPTION: Illustrates how to specify which named Mongoose connection should be used by a feature module when registering models with MongooseModule.forFeature.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_17

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    MongooseModule.forFeature([{ name: Cat.name, schema: CatSchema }], 'cats'),
  ],
})
export class CatsModule {}
```

----------------------------------------

TITLE: Implementing Post Service with Prisma
DESCRIPTION: Post service implementation with CRUD operations using Prisma Client
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { PrismaService } from './prisma.service';
import { Post, Prisma } from '@prisma/client';

@Injectable()
export class PostsService {
  constructor(private prisma: PrismaService) {}

  async post(
    postWhereUniqueInput: Prisma.PostWhereUniqueInput,
  ): Promise<Post | null> {
    return this.prisma.post.findUnique({
      where: postWhereUniqueInput,
    });
  }

  async posts(params: {
    skip?: number;
    take?: number;
    cursor?: Prisma.PostWhereUniqueInput;
    where?: Prisma.PostWhereInput;
    orderBy?: Prisma.PostOrderByWithRelationInput;
  }): Promise<Post[]> {
    const { skip, take, cursor, where, orderBy } = params;
    return this.prisma.post.findMany({
      skip,
      take,
      cursor,
      where,
      orderBy,
    });
  }

  async createPost(data: Prisma.PostCreateInput): Promise<Post> {
    return this.prisma.post.create({
      data,
    });
  }

  async updatePost(params: {
    where: Prisma.PostWhereUniqueInput;
    data: Prisma.PostUpdateInput;
  }): Promise<Post> {
    const { data, where } = params;
    return this.prisma.post.update({
      data,
      where,
    });
  }

  async deletePost(where: Prisma.PostWhereUniqueInput): Promise<Post> {
    return this.prisma.post.delete({
      where,
    });
  }
}
```

----------------------------------------

TITLE: Context Switching Methods in ArgumentsHost
DESCRIPTION: Lists the utility methods available in ArgumentsHost for switching to the appropriate application context (RPC, HTTP, or WebSockets).
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
/**
 * Switch context to RPC.
 */
switchToRpc(): RpcArgumentsHost;
/**
 * Switch context to HTTP.
 */
switchToHttp(): HttpArgumentsHost;
/**
 * Switch context to WebSockets.
 */
switchToWs(): WsArgumentsHost;
```

----------------------------------------

TITLE: Queue Management Operations in NestJS BullMQ
DESCRIPTION: Examples of basic queue management operations like pause and resume.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
await audioQueue.pause();

await audioQueue.resume();
```

----------------------------------------

TITLE: Handling Mongoose Connection Events (Synchronous Config)
DESCRIPTION: Shows how to register event listeners for Mongoose connection events using the `onConnectionCreate` option within a synchronous `forRoot` call. The provided function receives the connection object and can attach listeners for various lifecycle events.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_35

LANGUAGE: typescript
CODE:
```
MongooseModule.forRoot('mongodb://localhost/test', {
  onConnectionCreate: (connection: Connection) => {
    connection.on('connected', () => console.log('connected'));
    connection.on('open', () => console.log('open'));
    connection.on('disconnected', () => console.log('disconnected'));
    connection.on('reconnected', () => console.log('reconnected'));
    connection.on('disconnecting', () => console.log('disconnecting'));

    return connection;
  },
}),
```

----------------------------------------

TITLE: Installing Devtools Integration Package
DESCRIPTION: Command to install the NestJS Devtools integration package using npm.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/overview.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npm i @nestjs/devtools-integration
```

----------------------------------------

TITLE: Defining a Subscription Resolver in NestJS (Code First Approach)
DESCRIPTION: Creates a subscription resolver using the @Subscription decorator and PubSub from the mercurius package.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
@Resolver(() => Author)
export class AuthorResolver {
  // ...
  @Subscription(() => Comment)
  commentAdded(@Context('pubsub') pubSub: PubSub) {
    return pubSub.subscribe('commentAdded');
  }
}
```

----------------------------------------

TITLE: Configuring CacheModule with Dependency Injection in NestJS
DESCRIPTION: This example illustrates how to use a factory function with dependency injection to configure the CacheModule. It injects a ConfigService to dynamically set the cache TTL.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
CacheModule.registerAsync({
  imports: [ConfigModule],
  useFactory: async (configService: ConfigService) => ({
    ttl: configService.get('CACHE_TTL'),
  }),
  inject: [ConfigService],
});
```

----------------------------------------

TITLE: Configuring Helmet with Apollo Server in NestJS
DESCRIPTION: TypeScript code showing how to configure Helmet with specific Content Security Policy (CSP) settings to work with Apollo Server and Apollo Sandbox in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/helmet.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
app.use(helmet({
  crossOriginEmbedderPolicy: false,
  contentSecurityPolicy: {
    directives: {
      imgSrc: [`'self'`, 'data:', 'apollo-server-landing-page.cdn.apollographql.com'],
      scriptSrc: [`'self'`, `https: 'unsafe-inline'`],
      manifestSrc: [`'self'`, 'apollo-server-landing-page.cdn.apollographql.com'],
      frameSrc: [`'self'`, 'sandbox.embed.apollographql.com'],
    },
  },
}));
```

----------------------------------------

TITLE: Entity Transformation Pipe Usage in NestJS
DESCRIPTION: Shows how to use a custom pipe for transforming route parameters into database entities.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_18

LANGUAGE: typescript
CODE:
```
@Get(':id')
findOne(@Param('id', UserByIdPipe) userEntity: UserEntity) {
  return userEntity;
}
```

----------------------------------------

TITLE: Configuring Separate Process for BullMQ Queue in NestJS
DESCRIPTION: This snippet demonstrates how to configure a BullMQ queue to run job handlers in a separate (forked) process. It uses the BullModule to register a queue with a processor file path.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { BullModule } from '@nestjs/bullmq';
import { join } from 'path';

@Module({
  imports: [
    BullModule.registerQueue({
      name: 'audio',
      processors: [join(__dirname, 'processor.js')],
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Complete GraphQL Schema Definition with Mutation
DESCRIPTION: The complete SDL schema definition including Author and Post types, a Query for fetching an author, and a Mutation for upvoting a post. This shows how mutations integrate with the rest of a GraphQL schema.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_5

LANGUAGE: graphql
CODE:
```
type Author {
  id: Int!
  firstName: String
  lastName: String
  posts: [Post]
}

type Post {
  id: Int!
  title: String
  votes: Int
}

type Query {
  author(id: Int!): Author
}

type Mutation {
  upvotePost(postId: Int!): Post
}
```

----------------------------------------

TITLE: Configuring CQRS Module in NestJS Application
DESCRIPTION: Setup of CQRS module in the root application module (AppModule) using CqrsModule.forRoot().
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CqrsModule } from '@nestjs/cqrs';

@Module({
  imports: [CqrsModule.forRoot()],
})
export class AppModule {}
```

----------------------------------------

TITLE: Defining Required Properties in Mongoose Schema - TypeScript
DESCRIPTION: Configures the 'name' property to be required within the schema by passing an options object to the @Prop decorator. Ensures that 'name' must be set on document creation. Depends on @nestjs/mongoose.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_4

LANGUAGE: typescript
CODE:
```
@Prop({ required: true })
name: string;

```

----------------------------------------

TITLE: Pushing Docker Image to Registry for NestJS Application
DESCRIPTION: This set of commands shows how to log in to a Docker registry, tag the local image, and push it to the registry for deployment or sharing. Replace 'your-dockerhub-username' with the actual username or registry URL.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
docker login # Log in to your Docker registry
docker tag my-nestjs-app your-dockerhub-username/my-nestjs-app # Tag your image
docker push your-dockerhub-username/my-nestjs-app # Push your image
```

----------------------------------------

TITLE: Handling Unhandled Exceptions in NestJS CQRS
DESCRIPTION: Implementation of unhandled exception handling using UnhandledExceptionBus. Shows how to subscribe to and process unhandled exceptions in event handlers.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
private destroy$ = new Subject<void>();

constructor(private unhandledExceptionsBus: UnhandledExceptionBus) {
  this.unhandledExceptionsBus
    .pipe(takeUntil(this.destroy$))
    .subscribe((exceptionInfo) => {
      // Handle exception here
      // e.g. send it to external service, terminate process, or publish a new event
    });
}

onModuleDestroy() {
  this.destroy$.next();
  this.destroy$.complete();
}
```

----------------------------------------

TITLE: Enabling Wildcard Support for Redis Transporter in NestJS
DESCRIPTION: Demonstrates how to enable wildcard support in the Redis transporter configuration, allowing the use of pattern-based subscriptions.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice(AppModule, {
  transport: Transport.REDIS,
  options: {
    // Other options
    wildcards: true,
  },
});
```

----------------------------------------

TITLE: Implementing ValidationPipe with WebSocket Gateway in TypeScript
DESCRIPTION: Example showing how to bind a ValidationPipe to a WebSocket message handler using @UsePipes decorator. The pipe is configured with a custom exception factory that throws WsException instead of HttpException for validation errors.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/pipes.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new WsException(errors) }))
@SubscribeMessage('events')
handleEvent(client: Client, data: unknown): WsResponse<unknown> {
  const event = 'events';
  return { event, data };
}
```

LANGUAGE: typescript
CODE:
```
@UsePipes(new ValidationPipe({ exceptionFactory: (errors) => new WsException(errors) }))
@SubscribeMessage('events')
handleEvent(client, data) {
  const event = 'events';
  return { event, data };
}
```

----------------------------------------

TITLE: Implementing Worker Event Listener in NestJS BullMQ
DESCRIPTION: Example of setting up a worker event listener for the 'active' event using @OnWorkerEvent decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
import { Processor, Process, OnWorkerEvent } from '@nestjs/bullmq';
import { Job } from 'bullmq';

@Processor('audio')
export class AudioConsumer {
  @OnWorkerEvent('active')
  onActive(job: Job) {
    console.log(
      `Processing job ${job.id} of type ${job.name} with data ${job.data}...`,
    );
  }

  // ...
}
```

----------------------------------------

TITLE: Configuring Global Cache Interceptor in NestJS
DESCRIPTION: Demonstrates how to bind the CacheInterceptor globally for all endpoints in a NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { CacheModule, CacheInterceptor } from '@nestjs/cache-manager';
import { AppController } from './app.controller';
import { APP_INTERCEPTOR } from '@nestjs/core';

@Module({
  imports: [CacheModule.register()],
  controllers: [AppController],
  providers: [
    {
      provide: APP_INTERCEPTOR,
      useClass: CacheInterceptor,
    },
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Handling Mongoose Connection Events (Asynchronous Config)
DESCRIPTION: Illustrates how to incorporate the `onConnectionCreate` option for registering connection event listeners within an asynchronous `forRootAsync` configuration, typically inside the `useFactory` function.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_36

LANGUAGE: typescript
CODE:
```
MongooseModule.forRootAsync({
  useFactory: () => ({
    uri: 'mongodb://localhost/test',
    onConnectionCreate: (connection: Connection) => {
      // Register event listeners here
      return connection;
    },
  }),
}),
```

----------------------------------------

TITLE: Implementing Custom Health Indicator (NestJS v11)
DESCRIPTION: Demonstrates the new way of implementing a custom health indicator for the TerminusModule in NestJS v11 using the HealthIndicatorService API.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
@Injectable()
export class DogHealthIndicator {
  constructor(
    private readonly httpService: HttpService,
    //  Inject the `HealthIndicatorService` provided by the `TerminusModule`
    private readonly healthIndicatorService: HealthIndicatorService,
  ) {}

  async isHealthy(key: string) {
    // Start the health indicator check for the given key
    const indicator = this.healthIndicatorService.check(key);

    try {
      const badboys = await this.getBadboys();
      const isHealthy = badboys.length === 0;

      if (!isHealthy) {
        // Mark the indicator as "down" and add additional info to the response
        return indicator.down({ badboys: badboys.length });
      }

      // Mark the health indicator as up
      return indicator.up();
    } catch (error) {
      return indicator.down('Unable to retrieve dogs');
    }
  }

  private getBadboys() {
    // ...
  }
}
```

----------------------------------------

TITLE: Configuring Bull Module with useClass Syntax in TypeScript
DESCRIPTION: Shows how to use the useClass syntax to provide Bull configuration through a dedicated service class.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_37

LANGUAGE: typescript
CODE:
```
BullModule.forRootAsync({
  useClass: BullConfigService,
});
```

----------------------------------------

TITLE: Installing Nest CLI globally with npm
DESCRIPTION: Command to install the Nest CLI tool globally using npm. This makes the CLI available as a system-wide command.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install -g @nestjs/cli
```

----------------------------------------

TITLE: Installing MikroORM dependencies in Bash
DESCRIPTION: Shows the command to install the core MikroORM package along with the NestJS integration module and the SQLite database driver using npm. This is a prerequisite step before importing and configuring MikroORM in a NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i @mikro-orm/core @mikro-orm/nestjs @mikro-orm/sqlite
```

----------------------------------------

TITLE: Installing Cookie Parser for Express in NestJS
DESCRIPTION: This snippet shows how to install the cookie-parser package and its TypeScript types for use with Express in a NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ npm i cookie-parser
$ npm i -D @types/cookie-parser
```

----------------------------------------

TITLE: Custom Cache Key Tracking in NestJS
DESCRIPTION: Demonstrates how to create a custom CacheInterceptor subclass to implement custom cache key tracking.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
@Injectable()
class HttpCacheInterceptor extends CacheInterceptor {
  trackBy(context: ExecutionContext): string | undefined {
    return 'key';
  }
}
```

----------------------------------------

TITLE: Defining Mongoose Virtual Property with @Virtual Decorator
DESCRIPTION: Shows how to define a virtual property (`fullName`) on a Mongoose schema class using the `@Virtual` decorator from `@nestjs/mongoose`. Virtuals are computed dynamically and not stored in the database.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_40

LANGUAGE: typescript
CODE:
```
class Person {
  @Prop()
  firstName: string;

  @Prop()
  lastName: string;

  @Virtual({
    get: function (this: Person) {
      return `${this.firstName} ${this.lastName}`;
    },
  })
  fullName: string;
}
```

----------------------------------------

TITLE: Implementing Authentication Controller in NestJS
DESCRIPTION: AuthController implementation with sign-in endpoint that handles authentication requests.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { Body, Controller, Post, HttpCode, HttpStatus } from '@nestjs/common';
import { AuthService } from './auth.service';

@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @HttpCode(HttpStatus.OK)
  @Post('login')
  signIn(@Body() signInDto: Record<string, any>) {
    return this.authService.signIn(signInDto.username, signInDto.password);
  }
}
```

----------------------------------------

TITLE: JWT Auth Module Configuration in NestJS
DESCRIPTION: AuthModule setup with JWT configuration including token expiration and secret key settings.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { LocalStrategy } from './local.strategy';
import { UsersModule } from '../users/users.module';
import { PassportModule } from '@nestjs/passport';
import { JwtModule } from '@nestjs/jwt';
import { jwtConstants } from './constants';

@Module({
  imports: [
    UsersModule,
    PassportModule,
    JwtModule.register({
      secret: jwtConstants.secret,
      signOptions: { expiresIn: '60s' },
    }),
  ],
  providers: [AuthService, LocalStrategy],
  exports: [AuthService],
})
export class AuthModule {}
```

----------------------------------------

TITLE: Creating Database Connection Provider in NestJS
DESCRIPTION: Defines a provider for establishing a MongoDB connection using Mongoose in NestJS. It uses an async factory function to connect to the database.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import * as mongoose from 'mongoose';

export const databaseProviders = [
  {
    provide: 'DATABASE_CONNECTION',
    useFactory: (): Promise<typeof mongoose> =>
      mongoose.connect('mongodb://localhost/nest'),
  },
];
```

----------------------------------------

TITLE: Explicit Conversion of Request Parameters using ParseIntPipe and ParseBoolPipe (TypeScript)
DESCRIPTION: This example shows explicit use of built-in transformation pipes (ParseIntPipe, ParseBoolPipe) to enforce and validate the types of incoming path and query parameters, useful when global transformation is disabled. The ParseIntPipe converts a string to a number, while ParseBoolPipe converts a string to a boolean. Both are provided by the @nestjs/common module and should be imported as dependencies.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_13

LANGUAGE: typescript
CODE:
```
@Get(':id')
findOne(
  @Param('id', ParseIntPipe) id: number,
  @Query('sort', ParseBoolPipe) sort: boolean,
) {
  console.log(typeof id === 'number'); // true
  console.log(typeof sort === 'boolean'); // true
  return 'This action returns a user';
}
```

----------------------------------------

TITLE: Creating Basic Authorization Guard in NestJS
DESCRIPTION: Implementation of a basic authorization guard that validates requests based on authentication token. The guard implements CanActivate interface and uses ExecutionContext to access request details.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Observable } from 'rxjs';

@Injectable()
export class AuthGuard implements CanActivate {
  canActivate(
    context: ExecutionContext,
  ): boolean | Promise<boolean> | Observable<boolean> {
    const request = context.switchToHttp().getRequest();
    return validateRequest(request);
  }
}
```

----------------------------------------

TITLE: Importing feature module with registered MikroORM repositories into the root AppModule in TypeScript
DESCRIPTION: Shows the root AppModule importing both the MikroOrmModule with global configuration and a feature module that registered entity repositories, enabling repository injection and usage in services within the feature module context.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_6

LANGUAGE: typescript
CODE:
```
// app.module.ts
@Module({
  imports: [MikroOrmModule.forRoot(...), PhotoModule],
})
export class AppModule {}
```

----------------------------------------

TITLE: Using Fastify Session in NestJS Route Handler with @Session() Decorator
DESCRIPTION: Example of accessing and modifying Fastify session data within a NestJS route handler using the @Session() decorator and secureSession.Session type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@Get()
findAll(@Session() session: secureSession.Session) {
  const visits = session.get('visits');
  session.set('visits', visits ? visits + 1 : 1);
}
```

----------------------------------------

TITLE: Initializing a Hybrid NestJS Application with TCP Microservice
DESCRIPTION: Creates a hybrid NestJS application by combining a standard HTTP application with a TCP microservice. The code demonstrates how to create the app, connect the microservice, and start both servers.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/hybrid-application.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule);
const microservice = app.connectMicroservice<MicroserviceOptions>({
  transport: Transport.TCP,
});

await app.startAllMicroservices();
await app.listen(3001);
```

----------------------------------------

TITLE: Publishing Events in NestJS GraphQL Subscriptions
DESCRIPTION: Shows how to publish events using PubSub within a mutation resolver. This example publishes a 'commentAdded' event when a new comment is added.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Mutation(() => Comment)
async addComment(
  @Args('postId', { type: () => Int }) postId: number,
  @Args('comment', { type: () => Comment }) comment: CommentInput,
) {
  const newComment = this.commentsService.addComment({ id: postId, comment });
  pubSub.publish('commentAdded', { commentAdded: newComment });
  return newComment;
}
```

----------------------------------------

TITLE: Injecting Sequelize Instance for Specific Connection in NestJS
DESCRIPTION: Demonstrates how to inject a Sequelize instance for a specific named connection in a NestJS service. This is useful when working with multiple database connections.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_35

LANGUAGE: typescript
CODE:
```
@Injectable()
export class AlbumsService {
  constructor(
    @InjectConnection('albumsConnection')
    private sequelize: Sequelize,
  ) {}
}
```

----------------------------------------

TITLE: Creating a Git Branch for NestJS Contribution
DESCRIPTION: Command to create a new git branch for implementing a fix or feature in the NestJS repository. This is step 3 in the pull request submission process.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
git checkout -b my-fix-branch master
```

----------------------------------------

TITLE: Configuring Global Dynamic Module in TypeScript
DESCRIPTION: Shows how to register a dynamic module in the global scope by setting the global property to true in the module configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
{
  global: true,
  module: DatabaseModule,
  providers: providers,
  exports: providers,
}
```

----------------------------------------

TITLE: Using Custom Paginated Response Decorator in NestJS
DESCRIPTION: This snippet demonstrates applying the custom @ApiPaginatedResponse decorator to an endpoint, specifying the model type for the paginated response, improving maintainability and consistency in API documentation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
@ApiPaginatedResponse(CatDto)
async findAll(): Promise<PaginatedDto<CatDto>> {}
```

----------------------------------------

TITLE: Array Type Definition in Swagger
DESCRIPTION: Demonstration of how to properly define array types in Swagger documentation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@ApiProperty({ type: [String] })
names: string[];
```

----------------------------------------

TITLE: Subscription with Resolver Instance Access
DESCRIPTION: Demonstrates how to access the resolver instance within subscription filters for using injected providers and external services.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_20

LANGUAGE: typescript
CODE:
```
@Subscription('commentAdded', {
  filter(this: AuthorResolver, payload, variables) {
    // "this" refers to an instance of "AuthorResolver"
    return payload.commentAdded.title === variables.title;
  }
})
commentAdded(@Context('pubsub') pubSub: PubSub) {
  return pubSub.subscribe('commentAdded');
}
```

----------------------------------------

TITLE: Enabling Media Type Versioning in NestJS
DESCRIPTION: This snippet illustrates how to enable Media Type versioning in a NestJS application. It configures the application to use the Accept header for version specification.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule);
app.enableVersioning({
  type: VersioningType.MEDIA_TYPE,
  key: 'v=',
});
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Defining a Role Enum in TypeScript
DESCRIPTION: This code defines a `Role` enum with two values: `User` and `Admin`.  This enum is used to represent the different roles a user can have in the application. It serves as the foundation for the RBAC implementation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export enum Role {
  User = 'user',
  Admin = 'admin',
}
```

----------------------------------------

TITLE: Creating Base Input Type in TypeScript GraphQL
DESCRIPTION: Definition of a base CreateUserInput class with required email, password, and firstName fields using GraphQL decorators.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@InputType()
class CreateUserInput {
  @Field()
  email: string;

  @Field()
  password: string;

  @Field()
  firstName: string;
}
```

----------------------------------------

TITLE: Implementing Custom Versioning in NestJS
DESCRIPTION: This code demonstrates how to implement Custom versioning in a NestJS application. It defines an extractor function to determine the version from a custom header and configures the application to use this custom versioning approach.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/versioning.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
// Example extractor that pulls out a list of versions from a custom header and turns it into a sorted array.
// This example uses Fastify, but Express requests can be processed in a similar way.
const extractor = (request: FastifyRequest): string | string[] =>
  [request.headers['custom-versioning-field'] ?? '']
     .flatMap(v => v.split(','))
     .filter(v => !!v)
     .sort()
     .reverse()

const app = await NestFactory.create(AppModule);
app.enableVersioning({
  type: VersioningType.CUSTOM,
  extractor,
});
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Registering Global Exception Filter that Extends BaseExceptionFilter in NestJS
DESCRIPTION: Shows how to inject the HttpAdapter reference when registering a global exception filter that extends BaseExceptionFilter, allowing the custom filter to work with the application's HTTP adapter.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  const { httpAdapter } = app.get(HttpAdapterHost);
  app.useGlobalFilters(new AllExceptionsFilter(httpAdapter));

  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();
```

----------------------------------------

TITLE: Applying Helmet Middleware in NestJS with Express
DESCRIPTION: TypeScript code snippet demonstrating how to apply Helmet as a global middleware in a NestJS application using Express.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/helmet.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import helmet from 'helmet';
// somewhere in your initialization file
app.use(helmet());
```

----------------------------------------

TITLE: Asynchronous Configuration for BullMQ in NestJS
DESCRIPTION: This snippet shows how to use asynchronous configuration for BullMQ in NestJS. It demonstrates the use of a factory function to provide configuration options, including dependency injection.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
BullModule.forRootAsync({
  imports: [ConfigModule],
  useFactory: async (configService: ConfigService) => ({
    connection: {
      host: configService.get('QUEUE_HOST'),
      port: configService.get('QUEUE_PORT'),
    },
  }),
  inject: [ConfigService],
});
```

----------------------------------------

TITLE: Applying Metadata at Controller Level in NestJS
DESCRIPTION: Illustrates how to apply metadata at the controller level, which affects all routes in the controller. This example sets the 'admin' role for the entire CatsController.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
@Roles(['admin'])
@Controller('cats')
export class CatsController {}
```

----------------------------------------

TITLE: ValidationPipe Options Interface Definition
DESCRIPTION: This interface defines the configuration options for the `ValidationPipe`, including options inherited from `ValidatorOptions` and specific options like `transform`, `disableErrorMessages`, and `exceptionFactory`. These options control the behavior of the validation process.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_1

LANGUAGE: typescript
CODE:
```
export interface ValidationPipeOptions extends ValidatorOptions {
  transform?: boolean;
  disableErrorMessages?: boolean;
  exceptionFactory?: (errors: ValidationError[]) => any;
}
```

----------------------------------------

TITLE: Registering Fastify Cookie Plugin in NestJS
DESCRIPTION: This code demonstrates how to register the @fastify/cookie plugin in a NestJS application using Fastify adapter.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import fastifyCookie from '@fastify/cookie';

// somewhere in your initialization file
const app = await NestFactory.create<NestFastifyApplication>(AppModule, new FastifyAdapter());
await app.register(fastifyCookie, {
  secret: 'my-secret', // for cookies signature
});
```

----------------------------------------

TITLE: Installing NestJS Microservices Package
DESCRIPTION: Command to install the required package for building microservices in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i --save @nestjs/microservices
```

----------------------------------------

TITLE: Setting Custom HTTP Status Codes in NestJS Controllers
DESCRIPTION: Demonstrates how to override the default HTTP status code using the @HttpCode decorator. The example shows setting a 204 No Content status for a POST endpoint.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@Post()
@HttpCode(204)
create() {
  return 'This action adds a new cat';
}
```

----------------------------------------

TITLE: Configuring TLS Security in NestJS TCP Client
DESCRIPTION: Demonstrates client-side TLS configuration for secure microservice communication using CA certificates.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_20

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { ClientsModule, Transport } from '@nestjs/microservices';

@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'MATH_SERVICE',
        transport: Transport.TCP,
        options: {
          tlsOptions: {
            ca: [fs.readFileSync('<pathToCaFile>', 'utf-8').toString()],
          },
        },
      },
    ]),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Implementing a Basic Mutation in NestJS GraphQL (Code-First Approach)
DESCRIPTION: Creating an upvotePost mutation that increments a post's votes using the code-first approach with the @Mutation() decorator. The method takes a postId as argument and returns the updated Post entity.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@Mutation(() => Post)
async upvotePost(@Args({ name: 'postId', type: () => Int }) postId: number) {
  return this.postsService.upvoteById({ id: postId });
}
```

----------------------------------------

TITLE: Configuring TypeORM with User Entity in NestJS AppModule
DESCRIPTION: Updated AppModule configuration to include the User entity in TypeORM's entity array.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { User } from './users/user.entity';

@Module({
  imports: [
    TypeOrmModule.forRoot({
      type: 'mysql',
      host: 'localhost',
      port: 3306,
      username: 'root',
      password: 'root',
      database: 'test',
      entities: [User],
      synchronize: true,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Implementing Button Interaction in TypeScript with Necord
DESCRIPTION: This snippet shows how to create a button interaction handler using Necord in a NestJS application. It defines a method that responds to a button click event with a reply message.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { Context, Button, ButtonContext } from 'necord';

@Injectable()
export class AppComponents {
  @Button('BUTTON')
  public onButtonClick(@Context() [interaction]: ButtonContext) {
    return interaction.reply({ content: 'Button clicked!' });
  }
}
```

----------------------------------------

TITLE: Testing JWT Authentication with cURL in NestJS
DESCRIPTION: Demonstrates how to test the JWT authentication flow using cURL commands: accessing a protected route without authentication, logging in to obtain a JWT token, and accessing the protected route with the valid token.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
$ # GET /profile
$ curl http://localhost:3000/profile
$ # result -> {"statusCode":401,"message":"Unauthorized"}

$ # POST /auth/login
$ curl -X POST http://localhost:3000/auth/login -d '{"username": "john", "password": "changeme"}' -H "Content-Type: application/json"
$ # result -> {"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm... }

$ # GET /profile using access_token returned from previous step as bearer code
$ curl http://localhost:3000/profile -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm..."
$ # result -> {"userId":1,"username":"john"}
```

----------------------------------------

TITLE: Implementing Redirect Response with Fastify
DESCRIPTION: Example demonstrating how to properly handle redirect responses using Fastify's approach.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Get()
index(@Res() res) {
  res.status(302).redirect('/login');
}
```

----------------------------------------

TITLE: Custom ClientProxy Provider Configuration
DESCRIPTION: Demonstrates setting up a custom provider using ClientProxyFactory for dynamic client configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
@Module({
  providers: [
    {
      provide: 'MATH_SERVICE',
      useFactory: (configService: ConfigService) => {
        const mathSvcOptions = configService.getMathSvcOptions();
        return ClientProxyFactory.create(mathSvcOptions);
      },
      inject: [ConfigService],
    }
  ]
})
```

----------------------------------------

TITLE: Defining a Discriminator Schema for NestJS Mongoose
DESCRIPTION: Defines a specific discriminator schema class (@Schema) that will inherit from a base schema. This example shows the schema for a 'ClickedLinkEvent', adding unique properties.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_26

LANGUAGE: typescript
CODE:
```
@Schema()
export class ClickedLinkEvent {
  kind: string;
  time: Date;

  @Prop({ type: String, required: true })
  url: string;
}

export const ClickedLinkEventSchema = SchemaFactory.createForClass(ClickedLinkEvent);
```

----------------------------------------

TITLE: Implementing Custom Validation Pipe with Class Validator
DESCRIPTION: Custom validation pipe implementation using class-validator and class-transformer libraries for object validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';
import { validate } from 'class-validator';
import { plainToInstance } from 'class-transformer';

@Injectable()
export class ValidationPipe implements PipeTransform<any> {
  async transform(value: any, { metatype }: ArgumentMetadata) {
    if (!metatype || !this.toValidate(metatype)) {
      return value;
    }
    const object = plainToInstance(metatype, value);
    const errors = await validate(object);
    if (errors.length > 0) {
      throw new BadRequestException('Validation failed');
    }
    return value;
  }

  private toValidate(metatype: Function): boolean {
    const types: Function[] = [String, Boolean, Number, Array, Object];
    return !types.includes(metatype);
  }
}
```

----------------------------------------

TITLE: Pausing a Queue in NestJS Bull
DESCRIPTION: Example of pausing a Bull queue in NestJS. A paused queue will not process new jobs until resumed, though current jobs being processed will continue until they are finalized.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_31

LANGUAGE: typescript
CODE:
```
await audioQueue.pause();
```

----------------------------------------

TITLE: Configuring HTTPS with Express in NestJS
DESCRIPTION: Sets up a NestJS application that uses HTTPS by providing key and certificate files to the NestFactory.create() method. The application listens on the port specified in environment variables or defaults to 3000.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/multiple-servers.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
const httpsOptions = {
  key: fs.readFileSync('./secrets/private-key.pem'),
  cert: fs.readFileSync('./secrets/public-certificate.pem'),
};
const app = await NestFactory.create(AppModule, {
  httpsOptions,
});
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Swagger Property with Schema Configuration
DESCRIPTION: Example of @ApiProperty decorator with additional schema configuration options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@ApiProperty({
  description: 'The age of a cat',
  minimum: 1,
  default: 1,
})
age: number;
```

----------------------------------------

TITLE: Generic Paginated Response Schema with Raw Definitions in NestJS
DESCRIPTION: This complex snippet illustrates creating a generic PaginatedDto class with a type parameter, and how to define the @ApiOkResponse schema with allOf referencing the class and overriding the 'results' property to be an array of a specific model. It supports detailed schema customization for paginated responses.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
export class PaginatedDto<TData> {
  @ApiProperty()
  total: number;

  @ApiProperty()
  limit: number;

  @ApiProperty()
  offset: number;

  results: TData[];
}

// Example entity
export class CatDto {
  @ApiProperty()
  name: string;

  @ApiProperty()
  age: number;

  @ApiProperty()
  breed: string;
}

// Usage in controller
@ApiOkResponse({
  schema: {
    allOf: [
      { $ref: getSchemaPath(PaginatedDto) },
      {
        properties: {
          results: {
            type: 'array',
            items: { $ref: getSchemaPath(CatDto) },
          },
        },
      },
    ],
  },
})
async findAll(): Promise<PaginatedDto<CatDto>> {}
```

----------------------------------------

TITLE: Implementing CSRF Protection with Fastify in NestJS
DESCRIPTION: TypeScript code snippet showing how to register and use the @fastify/csrf-protection plugin for CSRF protection in a NestJS application using Fastify. It imports the plugin and registers it with the Fastify app instance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/csrf.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import fastifyCsrf from '@fastify/csrf-protection';
// ...
// somewhere in your initialization file after registering some storage plugin
await app.register(fastifyCsrf);
```

----------------------------------------

TITLE: Using Input Type in a GraphQL Mutation (Code-First)
DESCRIPTION: Example of using a custom input type (UpvotePostInput) as an argument in a GraphQL mutation. This demonstrates how to accept complex objects as parameters in mutations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Mutation(() => Post)
async upvotePost(
  @Args('upvotePostData') upvotePostData: UpvotePostInput,
) {}
```

----------------------------------------

TITLE: Implementing Command Dispatch in Service Layer
DESCRIPTION: Service class implementation showing how to dispatch commands using CommandBus in NestJS CQRS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Injectable()
export class HeroesGameService {
  constructor(private commandBus: CommandBus) {}

  async killDragon(heroId: string, killDragonDto: KillDragonDto) {
    return this.commandBus.execute(
      new KillDragonCommand(heroId, killDragonDto.dragonId)
    );
  }
}
```

----------------------------------------

TITLE: Configuring Auto-Loading Entities in NestJS TypeORM Module
DESCRIPTION: Shows how to set up automatic entity loading in TypeORM configuration to avoid manual entity registration. This approach uses the autoLoadEntities property in the TypeOrmModule.forRoot() method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';

@Module({
  imports: [
    TypeOrmModule.forRoot({
      ...
      autoLoadEntities: true,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Defining NestJS CatsModule
DESCRIPTION: TypeScript code defining a NestJS module for cats, including imports for HttpModule and PrismaModule, and providers for various cat-related services.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [HttpModule.register({ baseUrl: 'https://api.cats.com/' }), PrismaModule],
  providers: [CatsService, CatsApiService, CatsDAL, Logger],
  exports: [CatsService],
})
export class CatsModule {}
```

----------------------------------------

TITLE: Custom Health Indicator Implementation
DESCRIPTION: Example of creating a custom health indicator service to check application-specific health conditions.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { HealthIndicatorService } from '@nestjs/terminus';

export interface Dog {
  name: string;
  type: string;
}

@Injectable()
export class DogHealthIndicator {
  constructor(
    private readonly healthIndicatorService: HealthIndicatorService
  ) {}

  private dogs: Dog[] = [
    { name: 'Fido', type: 'goodboy' },
    { name: 'Rex', type: 'badboy' },
  ];

  async isHealthy(key: string){
    const indicator = this.healthIndicatorService.check(key);
    const badboys = this.dogs.filter(dog => dog.type === 'badboy');
    const isHealthy = badboys.length === 0;

    if (!isHealthy) {
      return indicator.down({ badboys: badboys.length });
    }

    return indicator.up();
  }
}
```

----------------------------------------

TITLE: Implementing CacheOptionsFactory Interface in NestJS
DESCRIPTION: This code shows how to implement the CacheOptionsFactory interface in a custom service class. The class provides a method to create cache options, including setting the TTL.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
@Injectable()
class CacheConfigService implements CacheOptionsFactory {
  createCacheOptions(): CacheModuleOptions {
    return {
      ttl: 5,
    };
  }
}
```

----------------------------------------

TITLE: Generated GraphQL SDL Schema
DESCRIPTION: The resulting GraphQL Schema Definition Language (SDL) generated from the Character interface.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_1

LANGUAGE: graphql
CODE:
```
interface Character {
  id: ID!
  name: String!
}
```

----------------------------------------

TITLE: Schema Generation with Custom Scalars
DESCRIPTION: Demonstrates schema generation with both resolvers and custom scalar types. Takes an array of resolver classes and an array of scalar classes as arguments.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/schema-generator.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const schema = await gqlSchemaFactory.create(
  [RecipesResolver, AuthorsResolver, PostsResolvers],
  [DurationScalar, DateScalar],
);
```

----------------------------------------

TITLE: Defining Another Discriminator Schema for NestJS Mongoose
DESCRIPTION: Defines another specific discriminator schema class (@Schema) that will inherit from the same base schema. This example shows the schema for a 'SignUpEvent', adding unique properties.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_27

LANGUAGE: typescript
CODE:
```
@Schema()
export class SignUpEvent {
  kind: string;
  time: Date;

  @Prop({ type: String, required: true })
  user: string;
}

export const SignUpEventSchema = SchemaFactory.createForClass(SignUpEvent);
```

----------------------------------------

TITLE: Adding Extra Providers to MulterModule in NestJS
DESCRIPTION: This code demonstrates how to pass additional providers to the registerAsync() method of MulterModule. These providers will be merged with the module providers.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
MulterModule.registerAsync({
  imports: [ConfigModule],
  useClass: ConfigService,
  extraProviders: [MyAdditionalProvider],
});
```

----------------------------------------

TITLE: Accessing Handler Metadata in NestJS Guard
DESCRIPTION: Shows how to use the Reflector's get method to access custom metadata from a route handler. This example retrieves the roles set by the Roles decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
const roles = this.reflector.get(Roles, context.getHandler());
```

----------------------------------------

TITLE: Determining Application Context Type in NestJS
DESCRIPTION: Shows how to use the getType() method of ArgumentsHost to determine the current application context (HTTP, RPC, or GraphQL).
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
if (host.getType() === 'http') {
  // do something that is only important in the context of regular HTTP requests (REST)
} else if (host.getType() === 'rpc') {
  // do something that is only important in the context of Microservice requests
} else if (host.getType<GqlContextType>() === 'graphql') {
  // do something that is only important in the context of GraphQL requests
}
```

----------------------------------------

TITLE: Async Module Configuration with Custom Factory
DESCRIPTION: Example of using useClass for async module configuration
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ConfigModule.registerAsync({
      useClass: ConfigModuleOptionsFactory,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Sharing Configuration Between HTTP and Microservice Applications in NestJS
DESCRIPTION: Demonstrates how to inherit global pipes, interceptors, guards, and filters from the main HTTP application to microservices by setting the inheritAppConfig option when connecting a microservice.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/hybrid-application.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const microservice = app.connectMicroservice<MicroserviceOptions>(
  {
    transport: Transport.TCP,
  },
  { inheritAppConfig: true },
);
```

----------------------------------------

TITLE: Uploading Single File in NestJS Controller
DESCRIPTION: Demonstrates how to use FileInterceptor and UploadedFile decorator to handle single file upload in a NestJS controller.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@Post('upload')
@UseInterceptors(FileInterceptor('file'))
uploadFile(@UploadedFile() file: Express.Multer.File) {
  console.log(file);
}
```

----------------------------------------

TITLE: Implementing GET and POST Routes in NestJS Controller
DESCRIPTION: Demonstrates creating a basic controller with GET and POST routes for a cats resource. The example shows the implementation in both TypeScript and JavaScript syntax with decorators to define HTTP methods.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/controllers.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Controller, Get, Post } from '@nestjs/common';

@Controller('cats')
export class CatsController {
  @Post()
  create(): string {
    return 'This action adds a new cat';
  }

  @Get()
  findAll(): string {
    return 'This action returns all cats';
  }
}
```

----------------------------------------

TITLE: Applying RpcExceptionFilter to MessagePattern in NestJS
DESCRIPTION: Shows how to apply a custom RpcExceptionFilter to a specific message pattern handler in NestJS microservices.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/exception-filters.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@UseFilters(new ExceptionFilter())
@MessagePattern({ cmd: 'sum' })
accumulate(data: number[]): number {
  return (data || []).reduce((a, b) => a + b);
}
```

----------------------------------------

TITLE: Injecting a Provider into a Controller in TypeScript (NestJS)
DESCRIPTION: This code shows how to inject a provider (CatsService) into a controller (CatsController) using constructor-based dependency injection in NestJS. It also defines a GET route to retrieve all cats.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Controller, Get } from '@nestjs/common';
import { CatsService } from './cats.service';
import { Cat } from './interfaces/cat.interface';

@Controller('cats')
export class CatsController {
  constructor(private catsService: CatsService) {}

  @Get()
  async findAll(): Promise<Cat[]> {
    return this.catsService.findAll();
  }
}
```

----------------------------------------

TITLE: Using Public Decorator on NestJS Route
DESCRIPTION: This snippet demonstrates how to use the custom Public decorator to mark a route as public, exempting it from authentication checks.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
@Public()
@Get()
findAll() {
  return [];
}
```

----------------------------------------

TITLE: Creating a @Roles() Decorator (TypeScript)
DESCRIPTION: This code defines a custom `@Roles()` decorator using `SetMetadata` from `@nestjs/common`. This decorator allows specifying which roles are required to access a particular route. The `ROLES_KEY` constant is used to store the metadata.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { SetMetadata } from '@nestjs/common';
import { Role } from '../enums/role.enum';

export const ROLES_KEY = 'roles';
export const Roles = (...roles: Role[]) => SetMetadata(ROLES_KEY, roles);
```

----------------------------------------

TITLE: Kafka Message Interface Definition
DESCRIPTION: Defines the interface structure for incoming Kafka messages with all available properties.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
interface IncomingMessage {
  topic: string;
  partition: number;
  timestamp: string;
  size: number;
  attributes: number;
  offset: string;
  key: any;
  value: any;
  headers: Record<string, any>;
}
```

----------------------------------------

TITLE: Monitoring Microservice Instance Status
DESCRIPTION: Shows how to subscribe to status updates from both client and server instances in microservices.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
this.client.status.subscribe((status: TcpStatus) => {
  console.log(status);
});
```

----------------------------------------

TITLE: Loading Module Lazily with LazyModuleLoader
DESCRIPTION: Shows the pattern for dynamically loading a module using the LazyModuleLoader.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lazy-loading-modules.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const { LazyModule } = await import('./lazy.module');
const moduleRef = await this.lazyModuleLoader.load(() => LazyModule);
```

----------------------------------------

TITLE: Configuring Joi Validation Options in NestJS
DESCRIPTION: Shows how to customize Joi validation behavior by specifying validation options like allowUnknown and abortEarly in the ConfigModule.forRoot method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
import * as Joi from 'joi';

@Module({
  imports: [
    ConfigModule.forRoot({
      validationSchema: Joi.object({
        NODE_ENV: Joi.string()
          .valid('development', 'production', 'test', 'provision')
          .default('development'),
        PORT: Joi.number().port().default(3000),
      }),
      validationOptions: {
        allowUnknown: false,
        abortEarly: true,
      },
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Asynchronous WebSocket Handler
DESCRIPTION: Example of an asynchronous WebSocket handler using Observable for multiple responses.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/gateways.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@SubscribeMessage('events')
onEvent(@MessageBody() data: unknown): Observable<WsResponse<number>> {
  const event = 'events';
  const response = [1, 2, 3];

  return from(response).pipe(
    map(data => ({ event, data })),
  );
}
```

----------------------------------------

TITLE: Creating Intersecting DTOs in TypeScript
DESCRIPTION: Demonstrates how to combine two different DTOs into a single type using IntersectionType.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/mapped-types.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { ApiProperty } from '@nestjs/swagger';

export class CreateCatDto {
  @ApiProperty()
  name: string;

  @ApiProperty()
  breed: string;
}

export class AdditionalCatInfo {
  @ApiProperty()
  color: string;
}
```

LANGUAGE: typescript
CODE:
```
export class UpdateCatDto extends IntersectionType(
  CreateCatDto,
  AdditionalCatInfo,
) {}
```

----------------------------------------

TITLE: Configuring MongooseModule Async with Factory (Dependency Injection)
DESCRIPTION: Shows how to configure the MongooseModule asynchronously using a factory function that injects dependencies. The `imports` array specifies modules providing dependencies, and the `inject` array lists providers to be injected into the factory function.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_31

LANGUAGE: typescript
CODE:
```
MongooseModule.forRootAsync({
  imports: [ConfigModule],
  useFactory: async (configService: ConfigService) => ({
    uri: configService.get<string>('MONGODB_URI'),
  }),
  inject: [ConfigService],
});
```

----------------------------------------

TITLE: Using Public Decorator for Route Exemption in NestJS
DESCRIPTION: Demonstrates applying the Public decorator to make a specific endpoint bypass the global authentication check. This allows the route to be accessed without authentication.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_25

LANGUAGE: typescript
CODE:
```
@Public()
@Get()
findAll() {
  return [];
}
```

----------------------------------------

TITLE: Implementing NATS Queue Groups
DESCRIPTION: Configuration for creating a NATS queue subscription for load balancing.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.NATS,
  options: {
    servers: ['nats://localhost:4222'],
    queue: 'cats_queue',
  },
});
```

----------------------------------------

TITLE: Implementing autocomplete for slash commands in Necord
DESCRIPTION: Shows how to create an autocomplete interceptor for slash commands in Necord.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { AutocompleteInteraction } from 'discord.js';
import { AutocompleteInterceptor } from 'necord';

@Injectable()
class CatsAutocompleteInterceptor extends AutocompleteInterceptor {
  public transformOptions(interaction: AutocompleteInteraction) {
    const focused = interaction.options.getFocused(true);
    let choices: string[];

    if (focused.name === 'cat') {
      choices = ['Siamese', 'Persian', 'Maine Coon'];
    }

    return interaction.respond(
      choices
        .filter((choice) => choice.startsWith(focused.value.toString()))
        .map((choice) => ({ name: choice, value: choice })),
    );
  }
}
```

----------------------------------------

TITLE: Implementing Route Constraints in Fastify
DESCRIPTION: Example demonstrating how to use Fastify's route constraints feature for version-specific routing.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@RouteConstraints({ version: '1.2.x' })
newFeature() {
  return 'This works only for version >= 1.2.x';
}
```

----------------------------------------

TITLE: Custom Exception Class
DESCRIPTION: Implementation of a custom exception class that extends HttpException.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
export class ForbiddenException extends HttpException {
  constructor() {
    super('Forbidden', HttpStatus.FORBIDDEN);
  }
}
```

----------------------------------------

TITLE: Processing Named Jobs in a Bull Queue Consumer
DESCRIPTION: Shows how to create a job handler that processes only jobs with a specific name by passing the job name to the @Process decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_26

LANGUAGE: typescript
CODE:
```
@Process('transcode')
async transcode(job: Job<unknown>) { ... }
```

----------------------------------------

TITLE: Throwing RpcException in NestJS Microservices
DESCRIPTION: Demonstrates how to throw an RpcException in a NestJS microservice. RpcException is used instead of HttpException for microservices.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/exception-filters.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
throw new RpcException('Invalid credentials.');
```

----------------------------------------

TITLE: Defining GraphQL Schema for Subscriptions
DESCRIPTION: Shows the GraphQL schema definition for subscriptions, including types for Author, Post, Query, Comment, and the Subscription type for commentAdded.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_6

LANGUAGE: graphql
CODE:
```
type Author {
  id: Int!
  firstName: String
  lastName: String
  posts: [Post]
}

type Post {
  id: Int!
  title: String
  votes: Int
}

type Query {
  author(id: Int!): Author
}

type Comment {
  id: String
  content: String
}

type Subscription {
  commentAdded(title: String!): Comment
}
```

----------------------------------------

TITLE: Creating Enum Internal Values Resolver in NestJS
DESCRIPTION: Creates a resolver object that maps enum values to different internal representations, useful when backend uses different values than the public API.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_18

LANGUAGE: typescript
CODE:
```
export const allowedColorResolver: Record<keyof typeof AllowedColor, any> = {
  RED: '#f00',
};
```

----------------------------------------

TITLE: Implementing Bidirectional Streaming with @GrpcStreamCall in NestJS
DESCRIPTION: Demonstrates how to implement a bidirectional streaming gRPC method using the @GrpcStreamCall decorator. This example shows handling incoming data and writing responses to the stream.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
@GrpcStreamCall()
bidiHello(requestStream: any) {
  requestStream.on('data', message => {
    console.log(message);
    requestStream.write({
      reply: 'Hello, world!'
    });
  });
}
```

----------------------------------------

TITLE: Using CaslAbilityFactory to Check Permissions in TypeScript
DESCRIPTION: Shows the typical usage pattern after injecting `CaslAbilityFactory`. It calls the `createForUser` method with a `user` object to get a user-specific `Ability` instance. It then uses the `ability.can()` method to check if the user has permission for a specific action (`Action.Read`) on a subject (`'all'`).
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_19

LANGUAGE: typescript
CODE:
```
const ability = this.caslAbilityFactory.createForUser(user);
if (ability.can(Action.Read, 'all')) {
  // "user" has read access to everything
}
```

----------------------------------------

TITLE: Filtering Providers by Metadata with DiscoveryService
DESCRIPTION: Shows how to retrieve and filter providers based on custom metadata attached via decorators. This example finds providers tagged with the 'experimental' feature flag.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/discovery-service.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
const providers = this.discoveryService.getProviders();

const [provider] = providers.filter(
  (item) =>
    this.discoveryService.getMetadataByDecorator(FeatureFlag, item) ===
    'experimental',
);

console.log(
  'Providers with the "experimental" feature flag metadata:',
  provider,
);
```

----------------------------------------

TITLE: Creating Namespaced Configuration
DESCRIPTION: Example of creating a namespaced configuration using registerAs function
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
export default registerAs('database', () => ({
  host: process.env.DATABASE_HOST,
  port: process.env.DATABASE_PORT || 5432
}));
```

----------------------------------------

TITLE: Implementing Application Shutdown Hook
DESCRIPTION: Example of implementing OnApplicationShutdown interface to handle application termination signals.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/lifecycle-events.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Injectable()
class UsersService implements OnApplicationShutdown {
  onApplicationShutdown(signal: string) {
    console.log(signal); // e.g. "SIGINT"
  }
}
```

----------------------------------------

TITLE: Creating a Custom User Decorator in NestJS
DESCRIPTION: Demonstrates how to create a custom param decorator that extracts the user object from the request, making route handlers more readable and maintainable.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { createParamDecorator, ExecutionContext } from '@nestjs/common';

export const User = createParamDecorator(
  (data: unknown, ctx: ExecutionContext) => {
    const request = ctx.switchToHttp().getRequest();
    return request.user;
  },
);
```

----------------------------------------

TITLE: Custom Configuration Factory
DESCRIPTION: Example of a custom configuration factory function that processes environment variables and provides typed configuration values.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
export default () => ({
  port: parseInt(process.env.PORT, 10) || 3000,
  database: {
    host: process.env.DATABASE_HOST,
    port: parseInt(process.env.DATABASE_PORT, 10) || 5432
  }
});
```

----------------------------------------

TITLE: Implementing Timeout Interceptor in NestJS
DESCRIPTION: This interceptor adds a timeout mechanism to route requests. It uses RxJS operators to cancel the request after a specified time and throw a RequestTimeoutException.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/interceptors.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { Injectable, NestInterceptor, ExecutionContext, CallHandler, RequestTimeoutException } from '@nestjs/common';
import { Observable, throwError, TimeoutError } from 'rxjs';
import { catchError, timeout } from 'rxjs/operators';

@Injectable()
export class TimeoutInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    return next.handle().pipe(
      timeout(5000),
      catchError(err => {
        if (err instanceof TimeoutError) {
          return throwError(() => new RequestTimeoutException());
        }
        return throwError(() => err);
      }),
    );
  };
};
```

LANGUAGE: javascript
CODE:
```
import { Injectable, RequestTimeoutException } from '@nestjs/common';
import { Observable, throwError, TimeoutError } from 'rxjs';
import { catchError, timeout } from 'rxjs/operators';

@Injectable()
export class TimeoutInterceptor {
  intercept(context, next) {
    return next.handle().pipe(
      timeout(5000),
      catchError(err => {
        if (err instanceof TimeoutError) {
          return throwError(() => new RequestTimeoutException());
        }
        return throwError(() => err);
      }),
    );
  };
};
```

----------------------------------------

TITLE: Implementing a Request-Response Message Handler in NestJS
DESCRIPTION: Example of a NestJS controller using the @MessagePattern decorator to handle request-response style messages. The handler accumulates an array of numbers.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Controller } from '@nestjs/common';
import { MessagePattern } from '@nestjs/microservices';

@Controller()
export class MathController {
  @MessagePattern({ cmd: 'sum' })
  accumulate(data: number[]): number {
    return (data || []).reduce((a, b) => a + b);
  }
}
```

----------------------------------------

TITLE: Composing Multiple Type Mappings in TypeScript
DESCRIPTION: Shows how to compose multiple type mapping utilities together to create complex type transformations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/mapped-types.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
export class UpdateCatDto extends PartialType(
  OmitType(CreateCatDto, ['name'] as const),
) {}
```

----------------------------------------

TITLE: Using Exported Sequelize Models in Another Module
DESCRIPTION: Importing a module that exports Sequelize models to use them in a different module's providers.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_30

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { UsersModule } from './users.module';
import { UsersService } from './users.service';
import { UsersController } from './users.controller';

@Module({
  imports: [UsersModule],
  providers: [UsersService],
  controllers: [UsersController]
})
export class UserHttpModule {}
```

----------------------------------------

TITLE: Executing a Message Handler from Custom Transport Strategy
DESCRIPTION: Example of accessing and executing a specific message handler from a custom transport strategy. This demonstrates how to retrieve and invoke a handler using its pattern name.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
async listen(callback: () => void) {
  const echoHandler = this.messageHandlers.get('echo');
  console.log(await echoHandler('Hello world!'));
  callback();
}
```

----------------------------------------

TITLE: Creating a Basic Endpoint for Validation Testing
DESCRIPTION: This code snippet defines a basic POST endpoint that accepts a `CreateUserDto` as the request body. This endpoint is used to test the `ValidationPipe` and ensure that the validation rules defined in the DTO are being enforced.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_3

LANGUAGE: typescript
CODE:
```
@Post()
create(@Body() createUserDto: CreateUserDto) {
  return 'This action adds a new user';
}
```

----------------------------------------

TITLE: Auto-loading Sequelize Models in NestJS Module
DESCRIPTION: Demonstrates how to configure the SequelizeModule to automatically load models and synchronize the database schema. This approach simplifies model management and maintains proper domain boundaries.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_32

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { SequelizeModule } from '@nestjs/sequelize';

@Module({
  imports: [
    SequelizeModule.forRoot({
      ...
      autoLoadModels: true,
      synchronize: true,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Asynchronous Kafka Client Initialization in NestJS
DESCRIPTION: Initialize a Kafka client asynchronously in NestJS, ensuring proper subscription to response topics before connecting. This is done in the onModuleInit lifecycle hook.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
async onModuleInit() {
  this.client.subscribeToResponseOf('hero.kill.dragon');
  await this.client.connect();
}
```

----------------------------------------

TITLE: Defining Custom Request Headers with @ApiHeader in NestJS
DESCRIPTION: This snippet shows how to specify expected custom headers for a controller route using @ApiHeader. It helps document headers like 'X-MyHeader' that clients need to include when making requests.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
@ApiHeader({
  name: 'X-MyHeader',
  description: 'Custom header',
})
@Controller('cats')
export class CatsController {}
```

----------------------------------------

TITLE: Configuring Global Cache Module in NestJS
DESCRIPTION: Demonstrates how to set up the CacheModule as a global module in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
CacheModule.register({
  isGlobal: true,
});
```

----------------------------------------

TITLE: Injecting an entity repository in a service using @InjectRepository decorator in TypeScript
DESCRIPTION: Demonstrates using the @InjectRepository() decorator to inject a standard EntityRepository for the Photo entity into a NestJS service. This enables the service to perform database operations directly on the Photo entity's repository.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_7

LANGUAGE: typescript
CODE:
```
@Injectable()
export class PhotoService {
  constructor(
    @InjectRepository(Photo)
    private readonly photoRepository: EntityRepository<Photo>,
  ) {}
}
```

----------------------------------------

TITLE: Overriding Cache Settings in NestJS Controller
DESCRIPTION: Shows how to override cache settings (CacheKey and CacheTTL) on a per-method basis in a controller.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
@Controller()
@CacheTTL(50)
export class AppController {
  @CacheKey('custom_key')
  @CacheTTL(20)
  findAll(): string[] {
    return [];
  }
}
```

----------------------------------------

TITLE: Using Interface for Configuration Type Hinting
DESCRIPTION: Shows how to use TypeScript interfaces for type-safe configuration access
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
interface DatabaseConfig {
  host: string;
  port: number;
}

const dbConfig = this.configService.get<DatabaseConfig>('database');

// you can now use `dbConfig.port` and `dbConfig.host`
const port = dbConfig.port;
```

----------------------------------------

TITLE: Filtered Subscription Implementation
DESCRIPTION: Shows how to add filtering to GraphQL subscriptions using the filter property to control event broadcasting based on payload and variables.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
@Subscription('commentAdded', {
  filter: (payload, variables) =>
    payload.commentAdded.title === variables.title,
})
commentAdded(@Context('pubsub') pubSub: PubSub) {
  return pubSub.subscribe('commentAdded');
}
```

----------------------------------------

TITLE: Implementing Server Streaming with Callback in NestJS gRPC
DESCRIPTION: Shows how to implement a server streaming gRPC method using @GrpcStreamCall decorator. This example demonstrates handling incoming data and sending a response using a callback function.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
@GrpcStreamCall()
lotsOfGreetings(requestStream: any, callback: (err: unknown, value: HelloResponse) => void) {
  requestStream.on('data', message => {
    console.log(message);
  });
  requestStream.on('end', () => callback(null, { reply: 'Hello, world!' }));
}
```

----------------------------------------

TITLE: Customizing Schema Name with @ApiSchema() in TypeScript
DESCRIPTION: This snippet shows how to use the @ApiSchema() decorator to change the name of a generated OpenAPI schema. It renames the schema from 'CreateCatDto' to 'CreateCatRequest'.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@ApiSchema({ name: 'CreateCatRequest' })
class CreateCatDto {}
```

----------------------------------------

TITLE: Dispatching Events with Custom Client Proxy
DESCRIPTION: This snippet shows how to use the custom client proxy to dispatch an event, demonstrating the event-based communication feature.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
googlePubSubClient.emit('event', 'Hello world!');
```

----------------------------------------

TITLE: Injecting a Mongoose Model from a Named Connection in NestJS
DESCRIPTION: Explains how to inject a Mongoose Model associated with a specific named database connection into a NestJS service using the @InjectModel decorator or legacy dependency injection.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_20

LANGUAGE: typescript
CODE:
```
@Injectable()
export class CatsService {
  constructor(@InjectModel(Cat.name, 'cats') private catModel: Model<Cat>) {}
}
```

LANGUAGE: typescript
CODE:
```
@Injectable()
@Dependencies(getModelToken(Cat.name, 'cats'))
export class CatsService {
  constructor(catModel) {
    this.catModel = catModel;
  }
}
```

----------------------------------------

TITLE: Helper Function to Detect GraphQL Field Resolution in NestJS
DESCRIPTION: A utility function that determines if the current execution context is resolving a GraphQL field (not a top-level Query or Mutation). Useful for conditionally applying enhancers to optimize performance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
export function isResolvingGraphQLField(context: ExecutionContext): boolean {
  if (context.getType<GqlContextType>() === 'graphql') {
    const gqlContext = GqlExecutionContext.create(context);
    const info = gqlContext.getInfo();
    const parentType = info.parentType.name;
    return parentType !== 'Query' && parentType !== 'Mutation';
  }
  return false;
}
```

----------------------------------------

TITLE: Configuring Sentry Instrumentation
DESCRIPTION: Initial Sentry setup code that must be imported before other modules. Configures tracing and profiling integrations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const Sentry = require("@sentry/nestjs");
const { nodeProfilingIntegration } = require("@sentry/profiling-node");

// Ensure to call this before requiring any other modules!
Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    // Add our Profiling integration
    nodeProfilingIntegration(),
  ],

  // Add Tracing by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,

  // Set sampling rate for profiling
  // This is relative to tracesSampleRate
  profilesSampleRate: 1.0,
});
```

----------------------------------------

TITLE: Deriving DTO Subsets with PickType Utility in NestJS (TypeScript)
DESCRIPTION: This snippet uses the PickType utility (from @nestjs/mapped-types) to create a DTO containing only a selected subset of properties from a given base DTO, improving code reuse and targeting specific validation scenarios. The second parameter is an array of property names to include. Requires @nestjs/mapped-types as a dependency.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_16

LANGUAGE: typescript
CODE:
```
export class UpdateCatAgeDto extends PickType(CreateCatDto, ['age'] as const) {}
```

----------------------------------------

TITLE: Streaming File Using StreamableFile in NestJS Controller
DESCRIPTION: This example shows how to use the StreamableFile class to return a file from a NestJS controller. This approach preserves access to post-controller interceptor logic.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/streaming-files.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Controller, Get, StreamableFile } from '@nestjs/common';
import { createReadStream } from 'fs';
import { join } from 'path';

@Controller('file')
export class FileController {
  @Get()
  getFile(): StreamableFile {
    const file = createReadStream(join(process.cwd(), 'package.json'));
    return new StreamableFile(file);
  }
}
```

----------------------------------------

TITLE: Using Callback-Style TypeORM Transactions in NestJS
DESCRIPTION: Shows an alternative approach to transactions using the callback-style transaction method from TypeORM's DataSource. This provides a more concise way to handle transactions without explicit transaction lifecycle management.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
async createMany(users: User[]) {
  await this.dataSource.transaction(async manager => {
    await manager.save(users[0]);
    await manager.save(users[1]);
  });
}
```

----------------------------------------

TITLE: Accessing RedisContext in NestJS Message Handler
DESCRIPTION: Shows how to access the RedisContext object in a NestJS message handler, which provides additional information about the incoming request, such as the channel name.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@MessagePattern('notifications')
getNotifications(@Payload() data: number[], @Ctx() context: RedisContext) {
  console.log(`Channel: ${context.getChannel()}`);
}
```

----------------------------------------

TITLE: Removing Items from Cache in NestJS
DESCRIPTION: Demonstrates how to remove specific items or clear the entire cache.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/caching.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
// Remove specific item
await this.cacheManager.del('key');

// Clear entire cache
await this.cacheManager.clear();
```

----------------------------------------

TITLE: Listing All Timeouts in NestJS
DESCRIPTION: Shows how to list all timeouts using the SchedulerRegistry's getTimeouts method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_20

LANGUAGE: typescript
CODE:
```
getTimeouts() {
  const timeouts = this.schedulerRegistry.getTimeouts();
  timeouts.forEach(key => this.logger.log(`Timeout: ${key}`));
}
```

----------------------------------------

TITLE: GraphQL Schema Definition for Subscriptions
DESCRIPTION: Defines the GraphQL schema types including Author, Post, Query, Comment, and Subscription types.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_21

LANGUAGE: graphql
CODE:
```
type Author {
  id: Int!
  firstName: String
  lastName: String
  posts: [Post]
}

type Post {
  id: Int!
  title: String
  votes: Int
}

type Query {
  author(id: Int!): Author
}

type Comment {
  id: String
  content: String
}

type Subscription {
  commentAdded(title: String!): Comment
}
```

----------------------------------------

TITLE: Using Environment Variables Loaded Hook in NestJS
DESCRIPTION: Shows how to use the ConfigModule.envVariablesLoaded hook to ensure environment variables are loaded before accessing them in conditional module configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_26

LANGUAGE: typescript
CODE:
```
export async function getStorageModule() {
  await ConfigModule.envVariablesLoaded;
  return process.env.STORAGE === 'S3' ? S3StorageModule : DefaultStorageModule;
}
```

----------------------------------------

TITLE: Query Execution with Request Context
DESCRIPTION: Example of executing a query with custom request context in CQRS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_20

LANGUAGE: typescript
CODE:
```
const myRequest = new MyRequest(user);
const hero = await this.queryBus.execute(new GetHeroQuery(heroId), myRequest);
```

----------------------------------------

TITLE: Applying Field Middleware to a Custom Field Resolver
DESCRIPTION: This snippet shows how to bind a field middleware to a method decorated with @ResolveField. The middleware will be executed when this specific resolver is called.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/field-middleware.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@ResolveField(() => String, { middleware: [loggerMiddleware] })
title() {
  return 'Placeholder';
}
```

----------------------------------------

TITLE: TypeScript Configuration to Fix Endless File Change Detection in Watch Mode
DESCRIPTION: tsconfig.json configuration to resolve the issue where TypeScript 4.9+ enters an endless loop of file change detection on Windows. This sets the file watching strategy to use polling instead of file system events.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/errors.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
  "watchOptions": {
    "watchFile": "fixedPollingInterval"
  }
```

----------------------------------------

TITLE: Implementing an Observable-based Message Handler in NestJS
DESCRIPTION: Shows how to use RxJS Observables in a NestJS microservice message handler to emit multiple values.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@MessagePattern({ cmd: 'sum' })
accumulate(data: number[]): Observable<number> {
  return from([1, 2, 3]);
}
```

----------------------------------------

TITLE: Creating Prisma Service in NestJS
DESCRIPTION: Implementation of PrismaService that handles database connection initialization
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { Injectable, OnModuleInit } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit {
  async onModuleInit() {
    await this.$connect();
  }
}
```

----------------------------------------

TITLE: Creating a Custom Transient Logger in NestJS
DESCRIPTION: Shows how to extend NestJS's ConsoleLogger with custom functionality, using a transient scope to ensure each service gets its own logger instance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
import { Injectable, Scope, ConsoleLogger } from '@nestjs/common';

@Injectable({ scope: Scope.TRANSIENT })
export class MyLogger extends ConsoleLogger {
  customLog() {
    this.log('Please feed the cat!');
  }
}
```

----------------------------------------

TITLE: Combining Method and Controller Metadata in NestJS
DESCRIPTION: Shows how to use Reflector's utility methods to combine metadata from both the method and controller levels. This example uses getAllAndOverride to prioritize method-level metadata.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
const roles = this.reflector.getAllAndOverride(Roles, [context.getHandler(), context.getClass()]);
```

----------------------------------------

TITLE: Configuring Fastify Options
DESCRIPTION: Example showing how to pass configuration options to Fastify through the FastifyAdapter constructor.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
new FastifyAdapter({ logger: true });
```

----------------------------------------

TITLE: Service Description Layout in HTML
DESCRIPTION: HTML structure for displaying service descriptions with images and text content in a row layout.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/enterprise.md#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
<div class="row">
  <div class="content">
    <h4>Team Augmentation & Development</h4>
    <p>
      With team augmentation, NestJS core team members can work directly with your team on a daily basis to help take your project to the next-level. Consider us "part of your team", tackling the most ambitious projects - right by your side.
    </p>
  </div>
  <div class="thumbnail p-l-30">
    <img src="/assets/enterprise/help.svg" />
  </div>
</div>
```

----------------------------------------

TITLE: Exporting Sequelize Models from a Module
DESCRIPTION: Making Sequelize models available to other modules by re-exporting the SequelizeModule from a feature module.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_29

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { SequelizeModule } from '@nestjs/sequelize';
import { User } from './user.entity';

@Module({
  imports: [SequelizeModule.forFeature([User])],
  exports: [SequelizeModule]
})
export class UsersModule {}
```

----------------------------------------

TITLE: Event Publisher with Request Context
DESCRIPTION: Example of using EventPublisher to merge request context with a model.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_22

LANGUAGE: typescript
CODE:
```
const hero = this.publisher.mergeObjectContext(
  await this.repository.findOneById(+heroId),
  this.request, // Inject the request context here
);
```

----------------------------------------

TITLE: Using Namespaced Configuration Provider
DESCRIPTION: Demonstrates using namespaced configuration as a provider for other modules
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
import databaseConfig from './config/database.config';

@Module({
  imports: [
    TypeOrmModule.forRootAsync(databaseConfig.asProvider()),
  ],
})
```

----------------------------------------

TITLE: WebSocket Exception Response Structure in NestJS
DESCRIPTION: Shows the structure of the exception message emitted by NestJS when a WsException is thrown in a WebSocket application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/exception-filters.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
{
  status: 'error',
  message: 'Invalid credentials.'
}
```

----------------------------------------

TITLE: Creating TypeORM Entity Subscribers in NestJS
DESCRIPTION: Demonstrates how to create a TypeORM subscriber to listen for entity events in a NestJS application. The example shows a subscriber that hooks into the User entity's beforeInsert event.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
import {
  DataSource,
  EntitySubscriberInterface,
  EventSubscriber,
  InsertEvent,
} from 'typeorm';
import { User } from './user.entity';

@EventSubscriber()
export class UserSubscriber implements EntitySubscriberInterface<User> {
  constructor(dataSource: DataSource) {
    dataSource.subscribers.push(this);
  }

  listenTo() {
    return User;
  }

  beforeInsert(event: InsertEvent<User>) {
    console.log(`BEFORE USER INSERTED: `, event.entity);
  }
}
```

----------------------------------------

TITLE: Using Non-Class-Based Provider Tokens in NestJS
DESCRIPTION: This snippet shows how to use string-valued tokens as custom providers in NestJS. It demonstrates injecting a pre-existing connection object using a string token.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { connection } from './connection';

@Module({
  providers: [
    {
      provide: 'CONNECTION',
      useValue: connection,
    },
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Using Custom Kafka Exception Filter in NestJS Event Handler
DESCRIPTION: This snippet demonstrates how to integrate the custom Kafka Exception Filter into a NestJS event handler. It sets the maximum number of retries to 5.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
@UseFilters(new KafkaMaxRetryExceptionFilter(5))
export class MyEventHandler {
  @EventPattern('your-topic')
  async handleEvent(@Payload() data: any, @Ctx() context: KafkaContext) {
    // Your event processing logic...
  }
}
```

----------------------------------------

TITLE: Registering Mongoose Plugins for All Schemas on a Connection in NestJS
DESCRIPTION: Shows how to register a Mongoose plugin that applies to all schemas associated with a specific connection by using the connectionFactory option in MongooseModule.forRoot.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_24

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';

@Module({
  imports: [
    MongooseModule.forRoot('mongodb://localhost/test', {
      connectionFactory: (connection) => {
        connection.plugin(require('mongoose-autopopulate'));
        return connection;
      }
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Defining SwaggerDocumentOptions Interface
DESCRIPTION: TypeScript interface definition for SwaggerDocumentOptions, which allows customization of Swagger document generation behavior.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
export interface SwaggerDocumentOptions {
  include?: Function[];
  extraModels?: Function[];
  ignoreGlobalPrefix?: boolean;
  deepScanRoutes?: boolean;
  operationIdFactory?: OperationIdFactory;
  linkNameFactory?: (
    controllerKey: string,
    methodKey: string,
    fieldKey: string
  ) => string;
  autoTagControllers?: boolean;
}
```

----------------------------------------

TITLE: Defining Entity Schema with TypeORM in NestJS
DESCRIPTION: Demonstrates how to define an entity using TypeORM's EntitySchema approach instead of decorators. This method separates entity definition from the model class, defining columns, primary keys, and relationships in a schema object.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
import { EntitySchema } from 'typeorm';
import { User } from './user.entity';

export const UserSchema = new EntitySchema<User>({
  name: 'User',
  target: User,
  columns: {
    id: {
      type: Number,
      primary: true,
      generated: true,
    },
    firstName: {
      type: String,
    },
    lastName: {
      type: String,
    },
    isActive: {
      type: Boolean,
      default: true,
    },
  },
  relations: {
    photos: {
      type: 'one-to-many',
      target: 'Photo', // the name of the PhotoSchema
    },
  },
});
```

----------------------------------------

TITLE: Applying the @Roles() Decorator (TypeScript)
DESCRIPTION: This code demonstrates how to use the `@Roles()` decorator to protect a route handler.  The `@Post()` decorator indicates it's a POST request handler, and `@Roles(Role.Admin)` specifies that only users with the `Admin` role can access this endpoint. The `CreateCatDto` is expected in the request body.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_3

LANGUAGE: typescript
CODE:
```
@Post()
@Roles(Role.Admin)
create(@Body() createCatDto: CreateCatDto) {
  this.catsService.create(createCatDto);
}
```

----------------------------------------

TITLE: Configuring REQUEST Scope for a Service in NestJS
DESCRIPTION: Demonstrates how to specify REQUEST scope for a service using the @Injectable decorator. With REQUEST scope, a new instance of the provider is created for each incoming request.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Injectable, Scope } from '@nestjs/common';

@Injectable({ scope: Scope.REQUEST })
export class CatsService {}
```

----------------------------------------

TITLE: Registering Mongoose Plugins for a Specific Schema in NestJS Asynchronously
DESCRIPTION: Illustrates how to register a Mongoose plugin for a specific schema using the MongooseModule.forFeatureAsync method and a useFactory that applies the plugin to the schema.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_23

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    MongooseModule.forFeatureAsync([
      {
        name: Cat.name,
        useFactory: () => {
          const schema = CatsSchema;
          schema.plugin(require('mongoose-autopopulate'));
          return schema;
        },
      },
    ]),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Registering Payload for Durable Tree in TypeScript
DESCRIPTION: This code snippet shows how to modify the return value of the attach method to include a payload for durable trees. The payload contains the tenantId, which can be injected using @Inject(REQUEST) or @Inject(CONTEXT) decorators.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
return {
  resolve: (info: HostComponentInfo) =>
    info.isTreeDurable ? tenantSubTreeId : contextId,
  payload: { tenantId },
};
```

----------------------------------------

TITLE: GraphQL Resolver Implementation
DESCRIPTION: Example of an auto-generated GraphQL resolver with CRUD operations including queries and mutations
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/crud-generator.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Resolver, Query, Mutation, Args, Int } from '@nestjs/graphql';
import { UsersService } from './users.service';
import { User } from './entities/user.entity';
import { CreateUserInput } from './dto/create-user.input';
import { UpdateUserInput } from './dto/update-user.input';

@Resolver(() => User)
export class UsersResolver {
  constructor(private readonly usersService: UsersService) {}

  @Mutation(() => User)
  createUser(@Args('createUserInput') createUserInput: CreateUserInput) {
    return this.usersService.create(createUserInput);
  }

  @Query(() => [User], { name: 'users' })
  findAll() {
    return this.usersService.findAll();
  }

  @Query(() => User, { name: 'user' })
  findOne(@Args('id', { type: () => Int }) id: number) {
    return this.usersService.findOne(id);
  }

  @Mutation(() => User)
  updateUser(@Args('updateUserInput') updateUserInput: UpdateUserInput) {
    return this.usersService.update(updateUserInput.id, updateUserInput);
  }

  @Mutation(() => User)
  removeUser(@Args('id', { type: () => Int }) id: number) {
    return this.usersService.remove(id);
  }
}
```

----------------------------------------

TITLE: Accessing @SetMetadata Decorator Metadata in NestJS Guard
DESCRIPTION: Illustrates how to access metadata set using a custom @SetMetadata decorator in a NestJS guard. This example retrieves the roles set for a route handler.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_18

LANGUAGE: typescript
CODE:
```
const roles = this.reflector.get<string[]>('roles', context.getHandler());
```

----------------------------------------

TITLE: Request-Scoped Service with Context Injection
DESCRIPTION: Demonstrates how to create a request-scoped service with access to the request context in microservices.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
import { Injectable, Scope, Inject } from '@nestjs/common';
import { CONTEXT, RequestContext } from '@nestjs/microservices';

@Injectable({ scope: Scope.REQUEST })
export class CatsService {
  constructor(@Inject(CONTEXT) private ctx: RequestContext) {}
}
```

----------------------------------------

TITLE: Registering Mongoose Schema Hooks with Dependency Injection in NestJS
DESCRIPTION: Demonstrates how to register asynchronous Mongoose schema hooks using MongooseModule.forFeatureAsync and useFactory, injecting dependencies (like ConfigService) that can be used within the hook logic.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_22

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    MongooseModule.forFeatureAsync([
      {
        name: Cat.name,
        imports: [ConfigModule],
        useFactory: (configService: ConfigService) => {
          const schema = CatsSchema;
          schema.pre('save', function() {
            console.log(
              `${configService.get('APP_NAME')}: Hello from pre save`,
            ),
          });
          return schema;
        },
        inject: [ConfigService],
      },
    ]),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Configuring Bull Module with useExisting Syntax in TypeScript
DESCRIPTION: Demonstrates using the useExisting syntax to reuse an existing ConfigService from another module for Bull configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_39

LANGUAGE: typescript
CODE:
```
BullModule.forRootAsync({
  imports: [ConfigModule],
  useExisting: ConfigService,
});
```

----------------------------------------

TITLE: Defining Policy Handler Interfaces and Types - NestJS - TypeScript
DESCRIPTION: Defines the IPolicyHandler interface and related types allowing for both class-based and functional policy handlers in NestJS. Requires the AppAbility type from the casl-ability.factory module. These interfaces enable flexibility in how policies are written for authorization guards, accepting either objects with a handle() method or callback functions that return a boolean. Intended to be used as types for decorators and guards enforcing access control.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_22

LANGUAGE: TypeScript
CODE:
```
import { AppAbility } from '../casl/casl-ability.factory';

interface IPolicyHandler {
  handle(ability: AppAbility): boolean;
}

type PolicyHandlerCallback = (ability: AppAbility) => boolean;

export type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;
```

----------------------------------------

TITLE: Registering entity repositories within a NestJS module using MikroOrmModule.forFeature in TypeScript
DESCRIPTION: Describes how to use the forFeature() method of MikroOrmModule to register repositories for specific entities such as Photo. This pattern scopes the repository to the module and allows injection of repositories via decorators in dependent services.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_5

LANGUAGE: typescript
CODE:
```
// photo.module.ts
@Module({
  imports: [MikroOrmModule.forFeature([Photo])],
  providers: [PhotoService],
  controllers: [PhotoController],
})
export class PhotoModule {}
```

----------------------------------------

TITLE: Defining PubSub Provider in NestJS
DESCRIPTION: Creates a provider for PubSub instance to be used across the application. This allows for dependency injection of the PubSub instance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
{
  provide: 'PUB_SUB',
  useValue: new PubSub(),
}
```

----------------------------------------

TITLE: Loading Namespaced Configuration
DESCRIPTION: Shows how to load namespaced configuration in a module
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
import databaseConfig from './config/database.config';

@Module({
  imports: [
    ConfigModule.forRoot({
      load: [databaseConfig],
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Displaying Nest CLI help commands
DESCRIPTION: Command to show all available Nest CLI commands and options by invoking the help flag.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ nest --help
```

----------------------------------------

TITLE: Applying ContextIdStrategy in NestJS Application
DESCRIPTION: This code snippet demonstrates how to apply the custom ContextIdStrategy in a NestJS application. It should be placed in the main.ts file or before any request hits the application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
ContextIdFactory.apply(new AggregateByTenantContextIdStrategy());
```

----------------------------------------

TITLE: Extending BaseWsExceptionFilter in NestJS
DESCRIPTION: Demonstrates how to create a custom WebSocket exception filter by extending the BaseWsExceptionFilter class in NestJS. This allows for overriding default behavior while delegating to the base filter.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/exception-filters.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Catch, ArgumentsHost } from '@nestjs/common';
import { BaseWsExceptionFilter } from '@nestjs/websockets';

@Catch()
export class AllExceptionsFilter extends BaseWsExceptionFilter {
  catch(exception: unknown, host: ArgumentsHost) {
    super.catch(exception, host);
  }
}
```

----------------------------------------

TITLE: Configuring Users Module in NestJS
DESCRIPTION: Configuration of UsersModule to export UsersService for use in other modules.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { UsersService } from './users.service';

@Module({
  providers: [UsersService],
  exports: [UsersService],
})
export class UsersModule {}
```

----------------------------------------

TITLE: Installing Passport and related packages
DESCRIPTION: Commands to install necessary packages for Passport authentication in NestJS, including the local strategy and type definitions.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install --save @nestjs/passport passport passport-local
$ npm install --save-dev @types/passport-local
```

----------------------------------------

TITLE: Sample Output of NestJS Info Command
DESCRIPTION: Example output of the 'nest info' command showing the NestJS ASCII art logo, system information including OS and Node.js version, and versions of installed NestJS packages.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
 _   _             _      ___  _____  _____  _     _____
| \ | |           | |    |_  |/  ___|/  __ \| |   |_   _|
|  \| |  ___  ___ | |_     | |\ `--. | /  \/| |     | |
| . ` | / _ \/ __|| __|    | | `--. \| |    | |     | |
| |\  ||  __/\__ \| |_ /\__/ //\__/ /| \__/\| |_____| |_
\_| \_/ \___||___/ \__|\____/ \____/  \____/\_____/\___/

[System Information]
OS Version : macOS High Sierra
NodeJS Version : v20.18.0
[Nest Information]
microservices version : 10.0.0
websockets version : 10.0.0
testing version : 10.0.0
common version : 10.0.0
core version : 10.0.0
```

----------------------------------------

TITLE: Deleting a Cron Job in NestJS
DESCRIPTION: Demonstrates how to delete a named cron job using the SchedulerRegistry's deleteCronJob method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
deleteCron(name: string) {
  this.schedulerRegistry.deleteCronJob(name);
  this.logger.warn(`job ${name} deleted!`);
}
```

----------------------------------------

TITLE: Injecting a Specific Named Mongoose Connection into a NestJS Service
DESCRIPTION: Demonstrates how to inject a Mongoose Connection object associated with a specific named connection into a NestJS service using the @InjectConnection decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_18

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { InjectConnection } from '@nestjs/mongoose';
import { Connection } from 'mongoose';

@Injectable()
export class CatsService {
  constructor(@InjectConnection('cats') private connection: Connection) {}
}
```

----------------------------------------

TITLE: Implementing Custom WebSocket Adapter in TypeScript
DESCRIPTION: This code snippet shows a custom implementation of a WebSocket adapter using the ws library in NestJS. It demonstrates how to create, bind, and handle WebSocket connections and messages.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import * as WebSocket from 'ws';
import { WebSocketAdapter, INestApplicationContext } from '@nestjs/common';
import { MessageMappingProperties } from '@nestjs/websockets';
import { Observable, fromEvent, EMPTY } from 'rxjs';
import { mergeMap, filter } from 'rxjs/operators';

export class WsAdapter implements WebSocketAdapter {
  constructor(private app: INestApplicationContext) {}

  create(port: number, options: any = {}): any {
    return new WebSocket.Server({ port, ...options });
  }

  bindClientConnect(server, callback: Function) {
    server.on('connection', callback);
  }

  bindMessageHandlers(
    client: WebSocket,
    handlers: MessageMappingProperties[],
    process: (data: any) => Observable<any>,
  ) {
    fromEvent(client, 'message')
      .pipe(
        mergeMap(data => this.bindMessageHandler(data, handlers, process)),
        filter(result => result),
      )
      .subscribe(response => client.send(JSON.stringify(response)));
  }

  bindMessageHandler(
    buffer,
    handlers: MessageMappingProperties[],
    process: (data: any) => Observable<any>,
  ): Observable<any> {
    const message = JSON.parse(buffer.data);
    const messageHandler = handlers.find(
      handler => handler.message === message.event,
    );
    if (!messageHandler) {
      return EMPTY;
    }
    return process(messageHandler.callback(message.data));
  }

  close(server) {
    server.close();
  }
}
```

----------------------------------------

TITLE: Implementing TypeOrmOptionsFactory in NestJS Service
DESCRIPTION: This code snippet demonstrates how to create a service class that implements the TypeOrmOptionsFactory interface. This class is used to provide TypeORM configuration options in a more structured way.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_20

LANGUAGE: typescript
CODE:
```
@Injectable()
export class TypeOrmConfigService implements TypeOrmOptionsFactory {
  createTypeOrmOptions(): TypeOrmModuleOptions {
    return {
      type: 'mysql',
      host: 'localhost',
      port: 3306,
      username: 'root',
      password: 'root',
      database: 'test',
      entities: [],
      synchronize: true,
    };
  }
}
```

----------------------------------------

TITLE: Enabling CORS in NestJS using enableCors() method
DESCRIPTION: This snippet demonstrates how to enable CORS in a NestJS application using the enableCors() method on the Nest application object. It also shows how to set up the application to listen on a specified port.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/cors.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule);
app.enableCors();
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Uploading Any Files with AnyFilesInterceptor in NestJS
DESCRIPTION: Example of using AnyFilesInterceptor to handle file uploads with arbitrary field names in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/file-upload.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
@Post('upload')
@UseInterceptors(AnyFilesInterceptor())
uploadFile(@UploadedFiles() files: Array<Express.Multer.File>) {
  console.log(files);
}
```

----------------------------------------

TITLE: Keyed Kafka Messages with Headers
DESCRIPTION: Shows how to send keyed Kafka messages with custom headers for co-partitioning requirements. Includes realm information in headers and hero ID as message key.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@Controller()
export class HeroesController {
  @MessagePattern('hero.kill.dragon')
  killDragon(@Payload() message: KillDragonMessage): any {
    const realm = 'Nest';
    const heroId = message.heroId;
    const dragonId = message.dragonId;

    const items = [
      { id: 1, name: 'Mythical Sword' },
      { id: 2, name: 'Key to Dungeon' },
    ];

    return {
      headers: {
        realm
      },
      key: heroId,
      value: items
    }
  }
}
```

----------------------------------------

TITLE: Adding LIFO Job to Queue in NestJS BullMQ
DESCRIPTION: Example of adding a job to be processed as Last In First Out (LIFO) using the lifo option.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
const job = await this.audioQueue.add(
  'transcode',
  {
    foo: 'bar',
  },
  { lifo: true },
);
```

----------------------------------------

TITLE: Installing @nestjs/throttler Package - Bash
DESCRIPTION: Installs the @nestjs/throttler package using npm. This package provides the necessary tools to implement rate limiting in NestJS applications. Requires Node.js and npm installed in the development environment.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i --save @nestjs/throttler
```

----------------------------------------

TITLE: Configuring Selective Spec Generation
DESCRIPTION: Configuration example showing how to disable spec file generation specifically for service schematics while maintaining default behavior for other generators.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
{
  "generateOptions": {
    "spec": {
      "service": false
    }
  },
  ...
}
```

----------------------------------------

TITLE: Request-Scoped Command Handler with Context Injection
DESCRIPTION: Implementation of a request-scoped command handler with injected request context.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
@CommandHandler(KillDragonCommand, {
  scope: Scope.REQUEST,
})
export class KillDragonHandler {
  constructor(
    @Inject(REQUEST) private request: MyRequest, // Inject the request context
  ) {}

  // Handler implementation here
}
```

----------------------------------------

TITLE: Adding Schema Description with @ApiSchema() in TypeScript
DESCRIPTION: This example demonstrates how to add a description to a generated OpenAPI schema using the @ApiSchema() decorator. The description is added to the 'CreateCatDto' schema.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
@ApiSchema({ description: 'Description of the CreateCatDto schema' })
class CreateCatDto {}
```

----------------------------------------

TITLE: Adding a Prioritized Job to a Bull Queue
DESCRIPTION: Demonstrates adding a job with a priority level, where lower numbers indicate higher priority (1 is highest priority).
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_23

LANGUAGE: typescript
CODE:
```
const job = await this.audioQueue.add(
  {
    foo: 'bar',
  },
  { priority: 2 },
);
```

----------------------------------------

TITLE: Adding Prioritized Job to Queue in NestJS BullMQ
DESCRIPTION: Example of adding a job with priority level 2 using the priority option.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
const job = await this.audioQueue.add(
  'transcode',
  {
    foo: 'bar',
  },
  { priority: 2 },
);
```

----------------------------------------

TITLE: Filtering Subscriptions in NestJS
DESCRIPTION: Implements a filter function for subscriptions to control which events are sent to subscribers based on payload and variables.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
@Subscription(() => Comment, {
  filter: (payload, variables) =>
    payload.commentAdded.title === variables.title,
})
commentAdded(@Args('title') title: string, @Context('pubsub') pubSub: PubSub) {
  return pubSub.subscribe('commentAdded');
}
```

----------------------------------------

TITLE: Comparing Resolved Instances in NestJS
DESCRIPTION: Demonstrates how multiple calls to resolve() create unique instances of a provider. This example resolves TransientService twice and compares the instances to show they are not equal.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/module-reference.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Injectable()
export class CatsService implements OnModuleInit {
  constructor(private moduleRef: ModuleRef) {}

  async onModuleInit() {
    const transientServices = await Promise.all([
      this.moduleRef.resolve(TransientService),
      this.moduleRef.resolve(TransientService),
    ]);
    console.log(transientServices[0] === transientServices[1]); // false
  }
}
```

LANGUAGE: typescript
CODE:
```
@Injectable()
@Dependencies(ModuleRef)
export class CatsService {
  constructor(moduleRef) {
    this.moduleRef = moduleRef;
  }

  async onModuleInit() {
    const transientServices = await Promise.all([
      this.moduleRef.resolve(TransientService),
      this.moduleRef.resolve(TransientService),
    ]);
    console.log(transientServices[0] === transientServices[1]); // false
  }
}
```

----------------------------------------

TITLE: Using ParseIntPipe with Route Parameters in NestJS
DESCRIPTION: Demonstrates how to apply the ParseIntPipe to route parameters for automatic type conversion.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
@Get(':id')
async findOne(@Param('id', new ParseIntPipe()) id) {
  return this.catsService.findOne(id);
}
```

----------------------------------------

TITLE: Installing nest-commander Package
DESCRIPTION: Command to install the nest-commander package via npm
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/nest-commander.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i nest-commander
```

----------------------------------------

TITLE: Configuring Brotli Compression Quality in Fastify
DESCRIPTION: Configuration of Brotli compression quality parameters in Fastify compression middleware.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/compression.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { constants } from 'zlib';
// somewhere in your initialization file
await app.register(compression, { brotliOptions: { params: { [constants.BROTLI_PARAM_QUALITY]: 4 } } });
```

----------------------------------------

TITLE: Injecting Model with Dependencies Decorator (Vanilla JavaScript/TypeScript) - TypeScript
DESCRIPTION: Uses the @Dependencies decorator as an alternative to @InjectModel for injecting the Cat model, suitable for use without TypeScript experimental decorators. Shows typical CRUD methods. Requires @nestjs/common, @nestjs/mongoose, and proper set-up of Cat model token.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_13

LANGUAGE: typescript
CODE:
```
import { Model } from 'mongoose';
import { Injectable, Dependencies } from '@nestjs/common';
import { getModelToken } from '@nestjs/mongoose';
import { Cat } from './schemas/cat.schema';

@Injectable()
@Dependencies(getModelToken(Cat.name))
export class CatsService {
  constructor(catModel) {
    this.catModel = catModel;
  }

  async create(createCatDto) {
    const createdCat = new this.catModel(createCatDto);
    return createdCat.save();
  }

  async findAll() {
    return this.catModel.find().exec();
  }
}

```

----------------------------------------

TITLE: Implementing Custom Error Serialization in Client Proxy
DESCRIPTION: This snippet demonstrates how to create a custom client proxy that serializes errors into RpcExceptions, showcasing advanced error handling techniques.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
import { ClientTcp, RpcException } from '@nestjs/microservices';

class ErrorHandlingProxy extends ClientTCP {
  serializeError(err: Error) {
    return new RpcException(err);
  }
}
```

----------------------------------------

TITLE: Example: Checking Permissions for a Non-Admin User (TypeScript)
DESCRIPTION: Provides a concrete example of creating a non-admin `User` instance, generating their `Ability` object using `CaslAbilityFactory`, and checking various permissions (`Action.Read`, `Action.Delete`, `Action.Create` on the `Article` subject) using `ability.can()`. The results (`true`, `false`, `false`) demonstrate the rules defined in `CaslAbilityFactory`.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_20

LANGUAGE: typescript
CODE:
```
const user = new User();
user.isAdmin = false;

const ability = this.caslAbilityFactory.createForUser(user);
ability.can(Action.Read, Article); // true
ability.can(Action.Delete, Article); // false
ability.can(Action.Create, Article); // false
```

----------------------------------------

TITLE: Registering Global AuthGuard in NestJS
DESCRIPTION: This snippet shows how to register an AuthGuard as a global guard in a NestJS module. This allows automatic binding of the AuthGuard to all endpoints.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
providers: [
  {
    provide: APP_GUARD,
    useClass: AuthGuard,
  },
],
```

----------------------------------------

TITLE: Implementing Timeouts in NestJS
DESCRIPTION: Examples of creating timeout-based scheduled tasks using @Timeout decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@Timeout(5000)
handleTimeout() {
  this.logger.debug('Called once after 5 seconds');
}
```

LANGUAGE: typescript
CODE:
```
@Timeout('notifications', 2500)
handleTimeout() {}
```

----------------------------------------

TITLE: Adding Delayed Job to Queue in NestJS BullMQ
DESCRIPTION: Example of adding a job to a queue with a 3-second delay using the delay option.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
const job = await this.audioQueue.add(
  'transcode',
  {
    foo: 'bar',
  },
  { delay: 3000 }, // 3 seconds delayed
);
```

----------------------------------------

TITLE: Accessing Underlying Kafka Producer and Consumer in NestJS
DESCRIPTION: This snippet shows how to access the underlying Kafka producer and consumer instances in NestJS for advanced use cases, such as manually closing connections or using driver-specific methods.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/kafka.md#2025-04-23_snippet_18

LANGUAGE: typescript
CODE:
```
const producer = this.client.producer;
const consumer = this.client.consumer;
```

----------------------------------------

TITLE: Installing bcrypt Package for Hashing in NestJS
DESCRIPTION: This shell command installs the bcrypt package and its TypeScript types for use in a NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/encryption-hashing.md#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ npm i bcrypt
$ npm i -D @types/bcrypt
```

----------------------------------------

TITLE: Configuring RabbitMQ Wildcards in NestJS Microservice
DESCRIPTION: Shows how to enable wildcard support in RabbitMQ routing keys configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(
  AppModule,
  {
    transport: Transport.RMQ,
    options: {
      urls: ['amqp://localhost:5672'],
      queue: 'cats_queue',
      wildcards: true,
    },
  },
);
```

----------------------------------------

TITLE: Configuring EventEmitterModule in NestJS
DESCRIPTION: Shows how to pass configuration options to the EventEmitterModule.forRoot() method to customize the underlying EventEmitter instance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
EventEmitterModule.forRoot({
  // set this to `true` to use wildcards
  wildcard: false,
  // the delimiter used to segment namespaces
  delimiter: '.',
  // set this to `true` if you want to emit the newListener event
  newListener: false,
  // set this to `true` if you want to emit the removeListener event
  removeListener: false,
  // the maximum amount of listeners that can be assigned to an event
  maxListeners: 10,
  // show event name in memory leak message when more than maximum amount of listeners is assigned
  verboseMemoryLeak: false,
  // disable throwing uncaughtException if an error event is emitted and it has no listeners
  ignoreErrors: false,
});
```

----------------------------------------

TITLE: Listening to Events in NestJS
DESCRIPTION: Shows how to use the @OnEvent() decorator to declare an event listener method in a NestJS service or controller.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@OnEvent('order.created')
handleOrderCreatedEvent(payload: OrderCreatedEvent) {
  // handle and process "OrderCreatedEvent" event
}
```

----------------------------------------

TITLE: Using Custom Cookie Decorator in NestJS Route Handler
DESCRIPTION: This code shows how to use the custom @Cookies() decorator in a NestJS route handler to extract a specific cookie value.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
@Get()
findAll(@Cookies('name') name: string) {}
```

----------------------------------------

TITLE: Schema-First Interface Definition
DESCRIPTION: Defines a GraphQL interface using Schema Definition Language (SDL).
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_5

LANGUAGE: graphql
CODE:
```
interface Character {
  id: ID!
  name: String!
}
```

----------------------------------------

TITLE: Implementing a gRPC Service Handler with Class-Based Association
DESCRIPTION: Implementation of a gRPC service using class name for automatic service association. The class name 'HeroesService' is used to match the service definition in the proto file without requiring arguments in the @GrpcMethod decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@Controller()
export class HeroesService {
  @GrpcMethod()
  findOne(data: HeroById, metadata: Metadata, call: ServerUnaryCall<any, any>): Hero {
    const items = [
      { id: 1, name: 'John' },
      { id: 2, name: 'Doe' },
    ];
    return items.find(({ id }) => id === data.id);
  }
}
```

----------------------------------------

TITLE: Using switchToHttp() for HTTP Context
DESCRIPTION: Demonstrates how to use the switchToHttp() method to access the request and response objects in an HTTP context with proper typing.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
const ctx = host.switchToHttp();
const request = ctx.getRequest<Request>();
const response = ctx.getResponse<Response>();
```

----------------------------------------

TITLE: JWT Constants Configuration in NestJS
DESCRIPTION: Configuration file defining JWT secret key constant for token signing and verification.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
export const jwtConstants = {
  secret: 'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',
};
```

----------------------------------------

TITLE: Creating a Custom Cookie Decorator in NestJS
DESCRIPTION: This snippet demonstrates how to create a custom decorator for convenient, declarative access to incoming cookies in NestJS, which works across different platforms.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { createParamDecorator, ExecutionContext } from '@nestjs/common';

export const Cookies = createParamDecorator((data: string, ctx: ExecutionContext) => {
  const request = ctx.switchToHttp().getRequest();
  return data ? request.cookies?.[data] : request.cookies;
});
```

----------------------------------------

TITLE: Injecting TypeORM DataSource in NestJS AppModule
DESCRIPTION: Example of injecting the TypeORM DataSource into the AppModule constructor for database operations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { DataSource } from 'typeorm';

@Module({
  imports: [TypeOrmModule.forRoot(), UsersModule],
})
export class AppModule {
  constructor(private dataSource: DataSource) {}
}
```

----------------------------------------

TITLE: Handling NATS Context and Payload
DESCRIPTION: Example of accessing NATS context and payload in a message handler with subject information.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/nats.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@MessagePattern('notifications')
getNotifications(@Payload() data: number[], @Ctx() context: NatsContext) {
  console.log(`Subject: ${context.getSubject()}`);
}
```

----------------------------------------

TITLE: Implementing REST API Controller
DESCRIPTION: Main application controller implementing REST endpoints using User and Post services
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
import {
  Controller,
  Get,
  Param,
  Post,
  Body,
  Put,
  Delete,
} from '@nestjs/common';
import { UsersService } from './user.service';
import { PostsService } from './post.service';
import { User as UserModel, Post as PostModel } from '@prisma/client';

@Controller()
export class AppController {
  constructor(
    private readonly userService: UsersService,
    private readonly postService: PostsService,
  ) {}

  @Get('post/:id')
  async getPostById(@Param('id') id: string): Promise<PostModel> {
    return this.postService.post({ id: Number(id) });
  }

  @Get('feed')
  async getPublishedPosts(): Promise<PostModel[]> {
    return this.postService.posts({
      where: { published: true },
    });
  }

  @Get('filtered-posts/:searchString')
  async getFilteredPosts(
    @Param('searchString') searchString: string,
  ): Promise<PostModel[]> {
    return this.postService.posts({
      where: {
        OR: [
          {
            title: { contains: searchString },
          },
          {
            content: { contains: searchString },
          },
        ],
      },
    });
  }

  @Post('post')
  async createDraft(
    @Body() postData: { title: string; content?: string; authorEmail: string },
  ): Promise<PostModel> {
    const { title, content, authorEmail } = postData;
    return this.postService.createPost({
      title,
      content,
      author: {
        connect: { email: authorEmail },
      },
    });
  }

  @Post('user')
  async signupUser(
    @Body() userData: { name?: string; email: string },
  ): Promise<UserModel> {
    return this.userService.createUser(userData);
  }

  @Put('publish/:id')
  async publishPost(@Param('id') id: string): Promise<PostModel> {
    return this.postService.updatePost({
      where: { id: Number(id) },
      data: { published: true },
    });
  }

  @Delete('post/:id')
  async deletePost(@Param('id') id: string): Promise<PostModel> {
    return this.postService.deletePost({ id: Number(id) });
  }
}
```

----------------------------------------

TITLE: Configuring Sequelize Database Provider
DESCRIPTION: Setup of Sequelize instance with MySQL connection configuration and model registration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Sequelize } from 'sequelize-typescript';
import { Cat } from '../cats/cat.entity';

export const databaseProviders = [
  {
    provide: 'SEQUELIZE',
    useFactory: async () => {
      const sequelize = new Sequelize({
        dialect: 'mysql',
        host: 'localhost',
        port: 3306,
        username: 'root',
        password: 'password',
        database: 'nest',
      });
      sequelize.addModels([Cat]);
      await sequelize.sync();
      return sequelize;
    },
  },
];
```

----------------------------------------

TITLE: Implementing Generic Pagination in TypeScript for GraphQL
DESCRIPTION: This snippet demonstrates how to create a generic pagination implementation using TypeScript decorators and NestJS GraphQL modules. It defines interfaces and classes for edge types and paginated types, which can be used to create specialized paginated objects.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
import { Field, ObjectType, Int } from '@nestjs/graphql';
import { Type } from '@nestjs/common';

interface IEdgeType<T> {
  cursor: string;
  node: T;
}

export interface IPaginatedType<T> {
  edges: IEdgeType<T>[];
  nodes: T[];
  totalCount: number;
  hasNextPage: boolean;
}

export function Paginated<T>(classRef: Type<T>): Type<IPaginatedType<T>> {
  @ObjectType(`${classRef.name}Edge`)
  abstract class EdgeType {
    @Field(() => String)
    cursor: string;

    @Field(() => classRef)
    node: T;
  }

  @ObjectType({ isAbstract: true })
  abstract class PaginatedType implements IPaginatedType<T> {
    @Field(() => [EdgeType], { nullable: true })
    edges: EdgeType[];

    @Field(() => [classRef], { nullable: true })
    nodes: T[];

    @Field(() => Int)
    totalCount: number;

    @Field()
    hasNextPage: boolean;
  }
  return PaginatedType as Type<IPaginatedType<T>>;
}
```

----------------------------------------

TITLE: Defining Basic Consumer in NestJS BullMQ
DESCRIPTION: Basic setup of a queue consumer class using the @Processor decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { Processor } from '@nestjs/bullmq';

@Processor('audio')
export class AudioConsumer {}
```

----------------------------------------

TITLE: Accessing Controller Metadata in NestJS Guard
DESCRIPTION: Demonstrates how to retrieve metadata applied at the controller level using the Reflector class. This is useful when metadata is set for all routes in a controller.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
const roles = this.reflector.get(Roles, context.getClass());
```

----------------------------------------

TITLE: Advanced Asset Configuration in NestJS
DESCRIPTION: Detailed asset configuration showing include/exclude patterns and watch mode settings for GraphQL files.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
"assets": [
  { "include": "**/*.graphql", "exclude": "**/omitted.graphql", "watchAssets": true },
]
```

----------------------------------------

TITLE: Illustrating Module Dependency and Lifecycle Hook Execution Order
DESCRIPTION: Demonstrates the order of execution for OnModuleInit and OnModuleDestroy hooks in a scenario with three modules (A, B, C) where A depends on B, which depends on C.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
// Where A, B, and C are modules and "->" represents the module dependency.
A -> B -> C
```

LANGUAGE: plaintext
CODE:
```
C -> B -> A
```

LANGUAGE: plaintext
CODE:
```
A -> B -> C
```

----------------------------------------

TITLE: Implementing Modal Interaction in TypeScript with Necord
DESCRIPTION: This snippet shows how to create and handle a modal interaction using Necord in a NestJS application. It defines a method that responds to a modal submission by replying with the value of a specific input field.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { Context, Modal, ModalContext } from 'necord';

@Injectable()
export class AppModals {
  @Modal('pizza')
  public onModal(@Context() [interaction]: ModalContext) {
    return interaction.reply({
      content: `Your fav pizza : ${interaction.fields.getTextInputValue('pizza')}`
    });
  }
}
```

----------------------------------------

TITLE: Configuring Global Prefix Ignore in Swagger
DESCRIPTION: Shows how to ignore global prefix for routes when creating Swagger documentation using ignoreGlobalPrefix option.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/other-features.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
const document = SwaggerModule.createDocument(app, options, {
  ignoreGlobalPrefix: true,
});
```

----------------------------------------

TITLE: Updating Package.json Test Scripts for Vitest in NestJS
DESCRIPTION: This snippet shows the updated test scripts in package.json for running Vitest in a NestJS project. It includes commands for running tests, watching for changes, generating coverage reports, debugging, and running E2E tests with a custom configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_20

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test": "vitest run",
    "test:watch": "vitest",
    "test:cov": "vitest run --coverage",
    "test:debug": "vitest --inspect-brk --inspect --logHeapUsage --threads=false",
    "test:e2e": "vitest run --config ./vitest.config.e2e.ts"
  }
}
```

----------------------------------------

TITLE: Registering TypeORM Entity Subscribers in NestJS Module
DESCRIPTION: Shows how to register a TypeORM entity subscriber in a NestJS module. The subscriber is added to the providers array alongside the related service to ensure it's instantiated by NestJS's dependency injection system.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sql.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { User } from './user.entity';
import { UsersController } from './users.controller';
import { UsersService } from './users.service';
import { UserSubscriber } from './user.subscriber';

@Module({
  imports: [TypeOrmModule.forFeature([User])],
  providers: [UsersService, UserSubscriber],
  controllers: [UsersController],
})
export class UsersModule {}
```

----------------------------------------

TITLE: Running a NestJS Application in Development Mode
DESCRIPTION: Command to start a NestJS application in development mode with file watching enabled. This will automatically recompile and reload the server when files change.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/first-steps.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ npm run start:dev
```

----------------------------------------

TITLE: Using Custom Decorators in GraphQL Mutations in NestJS
DESCRIPTION: Shows how to use a custom @User() decorator in a GraphQL mutation to access the authenticated user without explicitly extracting it from the context.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@Mutation()
async upvotePost(
  @User() user: UserEntity,
  @Args('postId') postId: number,
) {}
```

----------------------------------------

TITLE: Using PartialType for Optional Fields in TypeScript
DESCRIPTION: Creates an UpdateCatDto class that extends PartialType of CreateCatDto, making all fields optional.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/mapped-types.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
export class UpdateCatDto extends PartialType(CreateCatDto) {}
```

----------------------------------------

TITLE: Configuring Mercurius Integration for Fastify in NestJS GraphQL
DESCRIPTION: This code shows how to set up the GraphQLModule using the Mercurius driver for Fastify users, enabling the GraphiQL interface.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { MercuriusDriver, MercuriusDriverConfig } from '@nestjs/mercurius';

@Module({
  imports: [
    GraphQLModule.forRoot<MercuriusDriverConfig>({
      driver: MercuriusDriver,
      graphiql: true,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Redis PubSub Configuration
DESCRIPTION: Shows how to configure Redis-based PubSub emitter for production use with MercuriusDriver.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_22

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot<MercuriusDriverConfig>({
  driver: MercuriusDriver,
  subscription: {
    emitter: require('mqemitter-redis')({
      port: 6579,
      host: '127.0.0.1',
    }),
  },
});
```

----------------------------------------

TITLE: Implementing Intervals in NestJS
DESCRIPTION: Examples of creating interval-based scheduled tasks using @Interval decorator.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@Interval(10000)
handleInterval() {
  this.logger.debug('Called every 10 seconds');
}
```

LANGUAGE: typescript
CODE:
```
@Interval('notifications', 2500)
handleInterval() {}
```

----------------------------------------

TITLE: Enabling Automatic TypeScript Definition Generation in NestJS GraphQL
DESCRIPTION: This code configures the GraphQLModule to automatically generate TypeScript definitions from GraphQL SDL, specifying the output path and format.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot<ApolloDriverConfig>({
  driver: ApolloDriver,
  typePaths: ['./**/*.graphql'],
  definitions: {
    path: join(process.cwd(), 'src/graphql.ts'),
    outputAs: 'class',
  },
}),
```

----------------------------------------

TITLE: Accessing RabbitMQ Client Driver Instance in NestJS
DESCRIPTION: Shows how to access the underlying AMQP connection manager instance from the client for advanced usage.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
const managerRef =
  this.client.unwrap<import('amqp-connection-manager').AmqpConnectionManager>();
```

----------------------------------------

TITLE: Configuring Serverless Framework
DESCRIPTION: YAML configuration for Serverless framework defining AWS Lambda function settings and HTTP endpoints
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_5

LANGUAGE: yaml
CODE:
```
service: serverless-example

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x

functions:
  main:
    handler: dist/main.handler
    events:
      - http:
          method: ANY
          path: /
      - http:
          method: ANY
          path: '{proxy+}'
```

----------------------------------------

TITLE: RpcArgumentsHost Interface Methods
DESCRIPTION: Defines the methods available in the RpcArgumentsHost interface for microservices (RPC) contexts, showing how to access data and context objects.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
export interface RpcArgumentsHost {
  /**
   * Returns the data object.
   */
  getData<T>(): T;

  /**
   * Returns the context object.
   */
  getContext<T>(): T;
}
```

----------------------------------------

TITLE: Enabling GraphQL Subscriptions with Apollo Driver in NestJS
DESCRIPTION: Configures the GraphQLModule to enable subscriptions using the Apollo driver. It demonstrates how to use both the deprecated 'installSubscriptionHandlers' option and the recommended 'graphql-ws' package.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot<ApolloDriverConfig>({
  driver: ApolloDriver,
  installSubscriptionHandlers: true,
}),
```

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot<ApolloDriverConfig>({
  driver: ApolloDriver,
  subscriptions: {
    'graphql-ws': true
  },
}),
```

----------------------------------------

TITLE: Configuring MongooseModule Async with Existing Provider
DESCRIPTION: Demonstrates configuring the MongooseModule asynchronously by reusing an existing provider that implements the necessary options factory interface. This avoids creating a new instance within the module.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_34

LANGUAGE: typescript
CODE:
```
MongooseModule.forRootAsync({
  imports: [ConfigModule],
  useExisting: ConfigService,
});
```

----------------------------------------

TITLE: Installing Redis and Socket.IO Adapter Dependencies
DESCRIPTION: This command installs the necessary packages for implementing a Redis-based Socket.IO adapter in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/adapter.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i --save redis socket.io @socket.io/redis-adapter
```

----------------------------------------

TITLE: Providing MikroOrmModule configuration explicitly from external file in TypeScript
DESCRIPTION: Shows how to import MikroORM configuration from a separate TypeScript config file and supply it to MikroOrmModule.forRoot(). This method avoids issues with build tools that use tree shaking and ensures that configuration remains explicit and available at runtime.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import config from './mikro-orm.config'; // your ORM config

@Module({
  imports: [
    MikroOrmModule.forRoot(config),
  ],
  ...
})
export class AppModule {}
```

----------------------------------------

TITLE: Customizing Swagger Operation ID Generation
DESCRIPTION: Example of customizing the operation ID generation in Swagger document options to use method names as operation IDs.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/introduction.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
const options: SwaggerDocumentOptions =  {
  operationIdFactory: (
    controllerKey: string,
    methodKey: string
  ) => methodKey
};
const documentFactory = () => SwaggerModule.createDocument(app, config, options);
```

----------------------------------------

TITLE: Installing Jest with SWC for NestJS
DESCRIPTION: Command to install necessary packages for using Jest with SWC in a NestJS project.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_12

LANGUAGE: bash
CODE:
```
$ npm i --save-dev jest @swc/core @swc/jest
```

----------------------------------------

TITLE: Defining GraphQL Model with CLI Plugin
DESCRIPTION: Simplified Author model definition using the CLI plugin which automatically adds necessary decorators.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/cli-plugin.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@ObjectType()
export class Author {
  @Field(type => ID)
  id: number;
  firstName?: string;
  lastName?: string;
  posts: Post[];
}
```

----------------------------------------

TITLE: Adding Descriptions and Deprecation to Enum Values
DESCRIPTION: Provides descriptions for individual enum values and marks certain values as deprecated using the valuesMap property.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
registerEnumType(AllowedColor, {
  name: 'AllowedColor',
  description: 'The supported colors.',
  valuesMap: {
    RED: {
      description: 'The default color.',
    },
    BLUE: {
      deprecationReason: 'Too blue.',
    },
  },
});
```

----------------------------------------

TITLE: Configuring Custom Logger in Terminus Module
DESCRIPTION: Shows how to configure the Terminus module to use a custom logger by passing it to the TerminusModule.forRoot() method in the module imports.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
@Module({
imports: [
  TerminusModule.forRoot({
    logger: TerminusLogger,
  }),
],
})
export class HealthModule {}
```

----------------------------------------

TITLE: Configuring RabbitMQ Microservice
DESCRIPTION: Setup for creating a NestJS microservice with RabbitMQ transport configuration including connection URL and queue options
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  transport: Transport.RMQ,
  options: {
    urls: ['amqp://localhost:5672'],
    queue: 'cats_queue',
    queueOptions: {
      durable: false
    },
  },
});
```

----------------------------------------

TITLE: Using Custom User Decorator in NestJS Controllers
DESCRIPTION: Shows how to use the custom User decorator in a controller method with both TypeScript and JavaScript (switch) syntax.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/custom-decorators.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Get()
async findOne(@User() user: UserEntity) {
  console.log(user);
}
```

----------------------------------------

TITLE: Using JSON Field in Class
DESCRIPTION: Example of using the JSON scalar type in a class definition.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@Field(() => GraphQLJSON)
info: JSON;
```

----------------------------------------

TITLE: Registering Global Exception Filter in NestJS
DESCRIPTION: Shows how to register a global-scoped exception filter that applies to all controllers and route handlers in the application using the useGlobalFilters method in the bootstrap function.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalFilters(new HttpExceptionFilter());
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();
```

----------------------------------------

TITLE: Customizing Resolver Method Names in NestJS GraphQL
DESCRIPTION: This snippet demonstrates how to customize resolver method names by passing arguments to the @Query and @ResolveField decorators. This allows for more descriptive method names while maintaining the desired GraphQL schema structure.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
@Resolver('Author')
export class AuthorsResolver {
  constructor(
    private authorsService: AuthorsService,
    private postsService: PostsService,
  ) {}

  @Query('author')
  async getAuthor(@Args('id') id: number) {
    return this.authorsService.findOneById(id);
  }

  @ResolveField('posts')
  async getPosts(@Parent() author) {
    const { id } = author;
    return this.postsService.findAll({ authorId: id });
  }
}
```

----------------------------------------

TITLE: Implementing Zod Validation Pipe in TypeScript
DESCRIPTION: Custom validation pipe implementation using Zod schema validation. Transforms incoming data and validates it against a Zod schema, throwing BadRequestException on validation failure.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { PipeTransform, ArgumentMetadata, BadRequestException } from '@nestjs/common';
import { ZodSchema  } from 'zod';

export class ZodValidationPipe implements PipeTransform {
  constructor(private schema: ZodSchema) {}

  transform(value: unknown, metadata: ArgumentMetadata) {
    try {
      const parsedValue = this.schema.parse(value);
      return parsedValue;
    } catch (error) {
      throw new BadRequestException('Validation failed');
    }
  }
}
```

----------------------------------------

TITLE: Implementing Custom GraphQL Directive Transformer in TypeScript
DESCRIPTION: This snippet demonstrates how to create a custom directive transformer function that converts string results to uppercase. It uses the mapSchema function to iterate through schema locations and apply transformations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/directives.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { getDirective, MapperKind, mapSchema } from '@graphql-tools/utils';
import { defaultFieldResolver, GraphQLSchema } from 'graphql';

export function upperDirectiveTransformer(
  schema: GraphQLSchema,
  directiveName: string,
) {
  return mapSchema(schema, {
    [MapperKind.OBJECT_FIELD]: (fieldConfig) => {
      const upperDirective = getDirective(
        schema,
        fieldConfig,
        directiveName,
      )?.[0];

      if (upperDirective) {
        const { resolve = defaultFieldResolver } = fieldConfig;

        // Replace the original resolver with a function that *first* calls
        // the original resolver, then converts its result to upper case
        fieldConfig.resolve = async function (source, args, context, info) {
          const result = await resolve(source, args, context, info);
          if (typeof result === 'string') {
            return result.toUpperCase();
          }
          return result;
        };
        return fieldConfig;
      }
    },
  });
}
```

----------------------------------------

TITLE: Configuring Webpack for HMR in NestJS without CLI
DESCRIPTION: Webpack configuration for enabling Hot Module Replacement in a NestJS application when not using the Nest CLI. This configuration includes the necessary loaders, plugins, and output settings.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
const webpack = require('webpack');
const path = require('path');
const nodeExternals = require('webpack-node-externals');
const { RunScriptWebpackPlugin } = require('run-script-webpack-plugin');

module.exports = {
  entry: ['webpack/hot/poll?100', './src/main.ts'],
  target: 'node',
  externals: [
    nodeExternals({
      allowlist: ['webpack/hot/poll?100'],
    }),
  ],
  module: {
    rules: [
      {
        test: /.tsx?$/,
        use: 'ts-loader',
        exclude: /node_modules/,
      },
    ],
  },
  mode: 'development',
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
  },
  plugins: [new webpack.HotModuleReplacementPlugin(), new RunScriptWebpackPlugin({ name: 'server.js', autoRestart: false })],
  output: {
    path: path.join(__dirname, 'dist'),
    filename: 'server.js',
  },
};
```

----------------------------------------

TITLE: Defining autocomplete options in Necord DTOs
DESCRIPTION: Demonstrates how to mark a DTO property for autocomplete in Necord slash commands.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { StringOption } from 'necord';

export class CatDto {
  @StringOption({
    name: 'cat',
    description: 'Choose a cat breed',
    autocomplete: true,
    required: true,
  })
  cat: string;
}
```

----------------------------------------

TITLE: WsArgumentsHost Interface Methods
DESCRIPTION: Defines the methods available in the WsArgumentsHost interface for WebSockets contexts, showing how to access data and client objects.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
export interface WsArgumentsHost {
  /**
   * Returns the data object.
   */
  getData<T>(): T;
  /**
   * Returns the client object.
   */
  getClient<T>(): T;
}
```

----------------------------------------

TITLE: Using Custom Condition Function for Conditional Module Loading in NestJS
DESCRIPTION: Shows how to use a custom condition function with ConditionalModule to determine whether to load a module based on multiple environment variables.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_28

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ConfigModule.forRoot(),
    ConditionalModule.registerWhen(
      FooBarModule,
      (env: NodeJS.ProcessEnv) => !!env['foo'] && !!env['bar'],
    ),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Basic HTTP Exception Response
DESCRIPTION: Default JSON response format when an unrecognized exception is thrown by the built-in global exception filter.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "statusCode": 500,
  "message": "Internal server error"
}
```

----------------------------------------

TITLE: Listening to Redis Client Error Events in NestJS
DESCRIPTION: Shows how to listen for error events emitted by the Redis client, allowing for custom error handling or additional operations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
this.client.on('error', (err) => {
  console.error(err);
});
```

----------------------------------------

TITLE: Resolving Request-Scoped Service for Testing in NestJS
DESCRIPTION: This snippet demonstrates how to use the mocked context identifier to resolve a request-scoped service instance for testing purposes. It allows access to the same instance that would be created for a real request.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/unit-testing.md#2025-04-23_snippet_10

LANGUAGE: typescript
CODE:
```
catsService = await moduleRef.resolve(CatsService, contextId);
```

----------------------------------------

TITLE: Implementing CatsDAL in NestJS
DESCRIPTION: TypeScript code for a NestJS data access layer (DAL) that interacts with a database using Prisma ORM to save cat data.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client';

@Injectable()
export class CatsDAL {
  constructor(private prisma: PrismaClient) {}

  async saveCat(cat: Cat): Promise<Cat> {
    return this.prisma.cat.create({data: cat});
  }
}
```

----------------------------------------

TITLE: Configuring Field Resolver Enhancers in NestJS GraphQL
DESCRIPTION: Shows how to configure the GraphQL module to run enhancers (interceptors, guards, filters) at the field resolver level. This example enables interceptors for @ResolveField() methods.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot({
  fieldResolverEnhancers: ['interceptors']
}),
```

----------------------------------------

TITLE: Enabling Configuration Cache
DESCRIPTION: Shows how to enable caching for environment variables
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
ConfigModule.forRoot({
  cache: true,
});
```

----------------------------------------

TITLE: Running NestJS Application with HMR
DESCRIPTION: Command to start the NestJS application with Hot Module Replacement enabled using the npm script.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/hot-reload.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
$ npm run start:dev
```

----------------------------------------

TITLE: Installing Prisma Dependencies
DESCRIPTION: Commands to install Prisma CLI as a development dependency in the project.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/prisma.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ cd hello-prisma
$ npm install prisma --save-dev
```

----------------------------------------

TITLE: Configuring GraphQL Module Date Scalar Mode
DESCRIPTION: Configuration for setting the date scalar mode to timestamp in GraphQL module options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot({
  buildSchemaOptions: {
    dateScalarMode: 'timestamp',
  }
}),
```

----------------------------------------

TITLE: Installing Sentry Dependencies for NestJS
DESCRIPTION: Command to install the required Sentry packages including the NestJS SDK and profiling node module.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install --save @sentry/nestjs @sentry/profiling-node
```

----------------------------------------

TITLE: Registering Queue Producer Service
DESCRIPTION: Implementation of a service that produces jobs for the queue using dependency injection
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { Queue } from 'bullmq';
import { InjectQueue } from '@nestjs/bullmq';

@Injectable()
export class AudioService {
  constructor(@InjectQueue('audio') private audioQueue: Queue) {}
}
```

----------------------------------------

TITLE: Setting Graceful Shutdown Timeout in Terminus Module
DESCRIPTION: Demonstrates how to configure a graceful shutdown timeout for the Terminus module, which can be useful when working with orchestrators like Kubernetes to achieve zero downtime during container shutdown.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_18

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    TerminusModule.forRoot({
      gracefulShutdownTimeoutMs: 1000,
    }),
  ]
})
export class HealthModule {}
```

----------------------------------------

TITLE: Configuring Local Strategy Options in NestJS
DESCRIPTION: Demonstrates how to pass strategy-specific options to customize field names for username and password. This allows the strategy to work with custom field names in the authentication request.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_30

LANGUAGE: typescript
CODE:
```
constructor(private authService: AuthService) {
  super({
    usernameField: 'email',
    passwordField: 'password',
  });
}
```

----------------------------------------

TITLE: Exporting Database Providers in NestJS Module
DESCRIPTION: Creates a DatabaseModule that exports the database providers, making them accessible to other parts of the application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { databaseProviders } from './database.providers';

@Module({
  providers: [...databaseProviders],
  exports: [...databaseProviders],
})
export class DatabaseModule {}
```

----------------------------------------

TITLE: Listening to All Events in NestJS
DESCRIPTION: Demonstrates how to create an event listener that catches all events using the multi-level wildcard pattern.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/events.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@OnEvent('**')
handleEverything(payload: any) {
  // handle and process an event
}
```

----------------------------------------

TITLE: Creating Redis ClientProxy using ClientsModule in NestJS
DESCRIPTION: Demonstrates how to create a Redis ClientProxy instance using the ClientsModule in NestJS. It registers the client with specific options and a name for injection.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/redis.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'MATH_SERVICE',
        transport: Transport.REDIS,
        options: {
          host: 'localhost',
          port: 6379,
        }
      },
    ]),
  ]
  ...
})
```

----------------------------------------

TITLE: Defining Query-Level Complexity with Dynamic Calculation
DESCRIPTION: Example of implementing complexity calculation for a GraphQL query based on input parameters
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/complexity.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Query({ complexity: (options: ComplexityEstimatorArgs) => options.args.count * options.childComplexity })
items(@Args('count') count: number) {
  return this.itemsService.getItems({ count });
}
```

----------------------------------------

TITLE: Generated GraphQL Schema for Author Query
DESCRIPTION: This snippet shows the GraphQL schema generated from the author query definition. It specifies the query name, argument, and return type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_6

LANGUAGE: graphql
CODE:
```
type Query {
  author(id: Int!): Author
}
```

----------------------------------------

TITLE: Configuring gRPC Health Checks in NestJS Microservice
DESCRIPTION: Demonstrates how to set up gRPC health checks in a NestJS microservice application. It includes configuring the health implementation and adding it to the gRPC server.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
import { HealthImplementation, protoPath as healthCheckProtoPath } from 'grpc-health-check';

const app = await NestFactory.createMicroservice<MicroserviceOptions>(AppModule, {
  options: {
    protoPath: [
      healthCheckProtoPath,
      protoPath: join(__dirname, 'hero/hero.proto'),
    ],
    onLoadPackageDefinition: (pkg, server) => {
      const healthImpl = new HealthImplementation({
        '': 'UNKNOWN',
      });

      healthImpl.addToServer(server);
      healthImpl.setStatus('', 'SERVING');
    },
  },
});
```

----------------------------------------

TITLE: Custom Exception Handling in NestJS Guard
DESCRIPTION: Example of throwing a custom unauthorized exception in the guard instead of using the default forbidden exception.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
throw new UnauthorizedException();
```

----------------------------------------

TITLE: Installing CASL Dependency via npm
DESCRIPTION: Installs the `@casl/ability` package using the npm package manager. This package is the core dependency required for implementing CASL authorization features in the application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_11

LANGUAGE: bash
CODE:
```
$ npm i @casl/ability
```

----------------------------------------

TITLE: Enabling Type Checking with SWC Builder
DESCRIPTION: Command to start a NestJS application using SWC builder with type checking enabled.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
$ nest start -b swc --type-check
```

----------------------------------------

TITLE: Creating an AsyncLocalStorage Module in NestJS
DESCRIPTION: This snippet demonstrates how to create a NestJS module that provides an AsyncLocalStorage instance as a custom provider. It sets up the AlsModule which can be imported in other parts of the application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/async-local-storage.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@Module({
  providers: [
    {
      provide: AsyncLocalStorage,
      useValue: new AsyncLocalStorage(),
    },
  ],
  exports: [AsyncLocalStorage],
})
export class AlsModule {}
```

----------------------------------------

TITLE: Creating Non-Service Based Providers in NestJS
DESCRIPTION: This example shows how to create a provider that supplies a non-service value, such as configuration objects based on the current environment.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
const configFactory = {
  provide: 'CONFIG',
  useFactory: () => {
    return process.env.NODE_ENV === 'development' ? devConfig : prodConfig;
  },
};

@Module({
  providers: [configFactory],
})
export class AppModule {}
```

----------------------------------------

TITLE: Implementing CatsHttpService in NestJS
DESCRIPTION: TypeScript code for a NestJS service that fetches cat data from an API and logs the operation, demonstrating dependency injection of HttpClient and Logger.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Injectable()
export class CatsHttpService {
  constructor(private httpClient: HttpClient, private logger: Logger) {}

  async fetchCats(): Promise<Cat[]> {
    this.logger.log('Fetching cats from the API');
    const response = await this.httpClient.get('/cats');
    return response.data;
  }
}
```

----------------------------------------

TITLE: Configuring Express Session Middleware in NestJS
DESCRIPTION: Example of applying express-session middleware globally in a NestJS application. It sets up session configuration options including secret, resave, and saveUninitialized.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import * as session from 'express-session';
// somewhere in your initialization file
app.use(
  session({
    secret: 'my-secret',
    resave: false,
    saveUninitialized: false,
  }),
);
```

----------------------------------------

TITLE: Schema-First Interface Resolver
DESCRIPTION: Implements the __resolveType method for type resolution in schema-first approach.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@Resolver('Character')
export class CharactersResolver {
  @ResolveField()
  __resolveType(value) {
    if ('age' in value) {
      return Person;
    }
    return null;
  }
}
```

----------------------------------------

TITLE: Implementing Select Menu Interaction in TypeScript with Necord
DESCRIPTION: This snippet demonstrates how to handle a select menu interaction using Necord in a NestJS application. It defines a method that responds to a select menu interaction by replying with the selected values.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_13

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { Context, StringSelect, StringSelectContext, SelectedStrings } from 'necord';

@Injectable()
export class AppComponents {
  @StringSelect('SELECT_MENU')
  public onSelectMenu(
    @Context() [interaction]: StringSelectContext,
    @SelectedStrings() values: string[],
  ) {
    return interaction.reply({ content: `You selected: ${values.join(', ')}` });
  }
}
```

----------------------------------------

TITLE: TypeScript Configuration for Serverless
DESCRIPTION: TSConfig settings required for serverless integration
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    ...
    "esModuleInterop": true
  }
}
```

----------------------------------------

TITLE: Using ValidationPipe with Route Parameters
DESCRIPTION: This code snippet demonstrates how to use the `ValidationPipe` to validate route parameters. It defines a GET endpoint that accepts an `:id` parameter and uses the `FindOneParams` class to validate that the `id` is a number.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_6

LANGUAGE: typescript
CODE:
```
@Get(':id')
findOne(@Param() params: FindOneParams) {
  return 'This action returns a user';
}
```

----------------------------------------

TITLE: Creating a Dockerfile for NestJS Application
DESCRIPTION: This Dockerfile sets up a Node.js environment, installs dependencies, builds the NestJS application, and prepares it for running. It uses the official Node.js image as a base and exposes port 3000 for the application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/deployment.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
# Use the official Node.js image as the base image
FROM node:20

# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

# Install the application dependencies
RUN npm install

# Copy the rest of the application files
COPY . .

# Build the NestJS application
RUN npm run build

# Expose the application port
EXPOSE 3000

# Command to run the application
CMD ["node", "dist/main"]
```

----------------------------------------

TITLE: Implementing Class Providers with useClass in NestJS
DESCRIPTION: This snippet demonstrates how to use the useClass syntax to dynamically determine a class that a token should resolve to based on the current environment.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dependency-injection.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
const configServiceProvider = {
  provide: ConfigService,
  useClass:
    process.env.NODE_ENV === 'development'
      ? DevelopmentConfigService
      : ProductionConfigService,
};

@Module({
  providers: [configServiceProvider],
})
export class AppModule {}
```

----------------------------------------

TITLE: Registering Custom Durable Provider in NestJS
DESCRIPTION: This code snippet demonstrates how to register a custom durable provider using the long-hand form for provider registration in NestJS. It sets the scope to REQUEST and marks the provider as durable.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
{
  provide: 'foobar',
  useFactory: () => { ... },
  scope: Scope.REQUEST,
  durable: true,
}
```

----------------------------------------

TITLE: Configuring GraphQL Type Definitions Generation
DESCRIPTION: Configuration for generating TypeScript definitions from GraphQL schema with custom scalar mappings.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import { GraphQLDefinitionsFactory } from '@nestjs/graphql';
import { join } from 'path';

const definitionsFactory = new GraphQLDefinitionsFactory();

definitionsFactory.generate({
  typePaths: ['./src/**/*.graphql'],
  path: join(process.cwd(), 'src/graphql.ts'),
  outputAs: 'class',
  defaultScalarType: 'unknown',
  customScalarTypeMapping: {
    DateTime: 'Date',
    BigNumber: '_BigNumber',
  },
  additionalHeader: "import _BigNumber from 'bignumber.js'",
});
```

----------------------------------------

TITLE: Attaching Controller to a Tag with @ApiTags in NestJS
DESCRIPTION: This snippet demonstrates how to associate a NestJS controller with a specific tag in Swagger documentation using the @ApiTags decorator. It is useful for grouping related endpoints visually in the API documentation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
@ApiTags('cats')
@Controller('cats')
export class CatsController {}
```

----------------------------------------

TITLE: Accessing RabbitMQ Server Driver Instance in NestJS
DESCRIPTION: Demonstrates how to access the underlying AMQP connection manager instance from the server.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/rabbitmq.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
const managerRef =
  server.unwrap<import('amqp-connection-manager').AmqpConnectionManager>();
```

----------------------------------------

TITLE: Linting and Formatting NestJS Projects
DESCRIPTION: Commands for linting with ESLint and formatting with Prettier in a NestJS project. These commands are useful for maintaining code quality in headless environments.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/first-steps.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
# Lint and autofix with eslint
$ npm run lint

# Format with prettier
$ npm run format
```

----------------------------------------

TITLE: Applying the @Roles() Decorator (JavaScript)
DESCRIPTION: This code demonstrates how to use the `@Roles()` decorator to protect a route handler.  The `@Post()` decorator indicates it's a POST request handler, and `@Roles(Role.Admin)` specifies that only users with the `Admin` role can access this endpoint. The `Bind(Body())` decorator makes request body available to the `createCatDto` argument.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_4

LANGUAGE: typescript
CODE:
```
@Post()
@Roles(Role.Admin)
@Bind(Body())
create(createCatDto) {
  this.catsService.create(createCatDto);
}
```

----------------------------------------

TITLE: Creating NestJS Swagger Transformer for ts-jest
DESCRIPTION: Configuration file to enable the NestJS Swagger plugin with ts-jest. This transformer applies AST transformations for e2e tests.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
const transformer = require('@nestjs/swagger/plugin');

module.exports.name = 'nestjs-swagger-transformer';
// you should change the version number anytime you change the configuration below - otherwise, jest will not detect changes
module.exports.version = 1;

module.exports.factory = (cs) => {
  return transformer.before(
    {
      // @nestjs/swagger/plugin options (can be empty)
    },
    cs.program, // "cs.tsCompiler.program" for older versions of Jest (<= v27)
  );
};
```

----------------------------------------

TITLE: Testing JWT Authentication Endpoint
DESCRIPTION: cURL command example for testing the JWT authentication endpoint.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_15

LANGUAGE: bash
CODE:
```
$ # POST to /auth/login
$ curl -X POST http://localhost:3000/auth/login -d '{"username": "john", "password": "changeme"}' -H "Content-Type: application/json"
$ # result -> {"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}
$ # Note: above JWT truncated
```

----------------------------------------

TITLE: Configuring Async Options for GraphQLModule in NestJS
DESCRIPTION: This snippet demonstrates how to use forRootAsync to pass module options asynchronously, using a factory function that can inject dependencies.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/quick-start.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRootAsync<ApolloDriverConfig>({
  driver: ApolloDriver,
  imports: [ConfigModule],
  useFactory: async (configService: ConfigService) => ({
    typePaths: configService.get<string>('GRAPHQL_TYPE_PATHS'),
  }),
  inject: [ConfigService],
}),
```

----------------------------------------

TITLE: Implementing Sentry Exception Handling
DESCRIPTION: Custom exception filter implementation with Sentry integration for error capturing.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Catch, ExceptionFilter } from '@nestjs/common';
import { SentryExceptionCaptured } from '@sentry/nestjs';

@Catch()
export class YourCatchAllExceptionFilter implements ExceptionFilter {
  @SentryExceptionCaptured()
  catch(exception, host): void {
    // your implementation here
  }
}
```

----------------------------------------

TITLE: Using Fastify Session in NestJS Route Handler with Request Object
DESCRIPTION: Example of accessing and modifying Fastify session data within a NestJS route handler using the FastifyRequest object.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/sessions.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@Get()
findAll(@Req() request: FastifyRequest) {
  const visits = request.session.get('visits');
  request.session.set('visits', visits ? visits + 1 : 1);
}
```

----------------------------------------

TITLE: Transforming Field Value with Middleware in NestJS GraphQL
DESCRIPTION: This snippet shows how to modify a field's value from within a middleware function. It demonstrates converting the field value to uppercase before returning it to the client.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/field-middleware.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
const value = await next();
return value?.toUpperCase();
```

----------------------------------------

TITLE: Implementing CatsApiService in NestJS
DESCRIPTION: TypeScript code for a NestJS service that retrieves cat data by ID using HttpClient, demonstrating dependency injection and API interaction.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { HttpClient } from '@nestjs/axios';

@Injectable()
export class CatsApiService {
  constructor(private httpClient: HttpClient) {}

  async getCatById(id: number): Promise<Cat> {
    const response = await this.httpClient.get(`/cats/${id}`);
    return response.data;
  }
}
```

----------------------------------------

TITLE: Implementing WebSocket Authentication with graphql-ws in NestJS
DESCRIPTION: Demonstrates how to implement authentication for WebSocket connections using the onConnect callback with the graphql-ws package.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot<ApolloDriverConfig>({
  driver: ApolloDriver,
  subscriptions: {
    'graphql-ws': {
      onConnect: (context: Context<any>) => {
        const { connectionParams, extra } = context;
        // user validation will remain the same as in the example above
        // when using with graphql-ws, additional context value should be stored in the extra field
        extra.user = { user: {} };
      },
    },
  },
  context: ({ extra }) => {
    // you can now access your additional context value through the extra field
  },
});
```

----------------------------------------

TITLE: Unit Testing CatsHttpService with Suites
DESCRIPTION: TypeScript code demonstrating how to use Suites for unit testing the CatsHttpService, including mocking of dependencies and assertions on service behavior.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { TestBed, Mocked } from '@suites/unit';

describe('Cats Http Service Unit Test', () => {
  let catsHttpService: CatsHttpService;
  let httpClient: Mocked<HttpClient>;
  let logger: Mocked<Logger>;

  beforeAll(async () => {
    const { unit, unitRef } = await TestBed.solitary(CatsHttpService).compile();

    catsHttpService = unit;
    httpClient = unitRef.get(HttpClient);
    logger = unitRef.get(Logger);
  });

  it('should fetch cats from the API and log the operation', async () => {
    const catsFixtures: Cat[] = [{ id: 1, name: 'Catty' }, { id: 2, name: 'Mitzy' }];
    httpClient.get.mockResolvedValue({ data: catsFixtures });

    const cats = await catsHttpService.fetchCats();

    expect(logger.log).toHaveBeenCalledWith('Fetching cats from the API');
    expect(httpClient.get).toHaveBeenCalledWith('/cats');
    expect(cats).toEqual<Cat[]>(catsFixtures);
  });
});
```

----------------------------------------

TITLE: Example of HTTP GET Request with Array Query Parameters (Bash)
DESCRIPTION: This bash example demonstrates how to structure an HTTP GET request sending multiple comma-separated values as a single query parameter (ids), which can be parsed by the server with ParseArrayPipe. No additional dependencies required; can be run with any HTTP client.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_23

LANGUAGE: bash
CODE:
```
GET /?ids=1,2,3
```

----------------------------------------

TITLE: Accessing AsyncLocalStorage Store in NestJS Service
DESCRIPTION: This snippet illustrates how to access the AsyncLocalStorage store within a NestJS service. It injects the AsyncLocalStorage instance and uses it to retrieve the user ID from the store for further processing.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/async-local-storage.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Injectable()
export class CatsService {
  constructor(
    private readonly als: AsyncLocalStorage,
    private readonly catsRepository: CatsRepository,
  ) {}

  getCatForUser() {
    const userId = this.als.getStore()["userId"] as number;
    return this.catsRepository.getForUser(userId);
  }
}
```

LANGUAGE: javascript
CODE:
```
@Injectable()
@Dependencies(AsyncLocalStorage, CatsRepository)
export class CatsService {
  constructor(als, catsRepository) {
    this.als = als
    this.catsRepository = catsRepository
  }

  getCatForUser() {
    const userId = this.als.getStore()["userId"] as number;
    return this.catsRepository.getForUser(userId);
  }
}
```

----------------------------------------

TITLE: Using a Service with INQUIRER Token in NestJS
DESCRIPTION: Shows how to use a service that implements the INQUIRER token. When the service method is called, it logs the name of the class that constructed it along with the provided message.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/provider-scopes.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { HelloService } from './hello.service';

@Injectable()
export class AppService {
  constructor(private helloService: HelloService) {}

  getRoot(): string {
    this.helloService.sayHello('My name is getRoot');

    return 'Hello world!';
  }
}
```

----------------------------------------

TITLE: Implementing HTTP Config Service
DESCRIPTION: Example of implementing a configuration service class for HTTP module options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/http-module.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@Injectable()
class HttpConfigService implements HttpModuleOptionsFactory {
  createHttpOptions(): HttpModuleOptions {
    return {
      timeout: 5000,
      maxRedirects: 5,
    };
  }
}
```

----------------------------------------

TITLE: Initializing NestJS Application with Sentry
DESCRIPTION: Main application bootstrap code showing how to import Sentry instrumentation before other modules.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sentry.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
// Import this first!
import "./instrument";

// Now import other modules
import { NestFactory } from "@nestjs/core";
import { AppModule } from "./app.module";

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(3000);
}

bootstrap();
```

----------------------------------------

TITLE: Implementing MQTT Wildcards
DESCRIPTION: Demonstration of using MQTT wildcards in message patterns for topic subscription
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@MessagePattern('sensors/+/temperature/+')
getTemperature(@Ctx() context: MqttContext) {
  console.log(`Topic: ${context.getTopic()}`);
}
```

----------------------------------------

TITLE: Configuring Module Imports with Options in NestJS
DESCRIPTION: Example of importing a ConfigModule with custom options in a NestJS application module.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/dynamic-modules.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { ConfigModule } from './config/config.module';

@Module({
  imports: [ConfigModule.register({ folder: './config' })],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
```

----------------------------------------

TITLE: Enabling JSON Logging in NestJS
DESCRIPTION: Configures the ConsoleLogger to output logs in JSON format, which is useful for log aggregation and analysis in modern cloud environments.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule, {
  logger: new ConsoleLogger({
    json: true,
  }),
});
```

----------------------------------------

TITLE: Installing Sequelize Dependencies
DESCRIPTION: Commands to install required Sequelize packages and TypeScript type definitions for a NestJS project.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install --save sequelize sequelize-typescript mysql2
$ npm install --save-dev @types/sequelize
```

----------------------------------------

TITLE: Jest Configuration for versions below 29
DESCRIPTION: JSON configuration for Jest versions below 29 to enable AST transformers in ts-jest.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/cli-plugin.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{
  ... // other configuration
  "globals": {
    "ts-jest": {
      "astTransformers": {
        "before": ["<path to the file created above>"]
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating HTML Template with Handlebars
DESCRIPTION: HTML template using Handlebars syntax to display dynamic message
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mvc.md#2025-04-23_snippet_3

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>App</title>
  </head>
  <body>
    {{ "{{ message }"}} }
  </body>
</html>
```

----------------------------------------

TITLE: Registering Custom GraphQL Directive in NestJS Module
DESCRIPTION: This snippet shows how to register the custom upperDirectiveTransformer in the GraphQLModule.forRoot() method of a NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/directives.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot({
  // ...
  transformSchema: (schema) => upperDirectiveTransformer(schema, 'upper'),
});
```

----------------------------------------

TITLE: Creating a Union Type in NestJS GraphQL
DESCRIPTION: Uses the createUnionType function to define a union type consisting of Author and Book types. The union allows returning different object types from the same field.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
export const ResultUnion = createUnionType({
  name: 'ResultUnion',
  types: () => [Author, Book] as const,
});
```

----------------------------------------

TITLE: Custom Exception Filter Implementation
DESCRIPTION: Implementation of a custom exception filter that catches HttpExceptions and provides detailed error responses.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/exception-filters.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';
import { Request, Response } from 'express';

@Catch(HttpException)
export class HttpExceptionFilter implements ExceptionFilter {
  catch(exception: HttpException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    const request = ctx.getRequest<Request>();
    const status = exception.getStatus();

    response
      .status(status)
      .json({
        statusCode: status,
        timestamp: new Date().toISOString(),
        path: request.url,
      });
  }
}
```

----------------------------------------

TITLE: Advanced Webpack Configuration with Options Function
DESCRIPTION: Function-based webpack configuration that extends default options while including node_modules in the bundle.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/workspaces.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
module.exports = function (options) {
  return {
    ...options,
    externals: [],
  };
};
```

----------------------------------------

TITLE: Interface Resolver Implementation
DESCRIPTION: Creates a resolver for the Character interface to share field resolver implementation across implementing types.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Resolver, ResolveField, Parent, Info } from '@nestjs/graphql';

@Resolver((type) => Character)
export class CharacterInterfaceResolver {
  @ResolveField(() => [Character])
  friends(
    @Parent() character,
    @Info() { parentType },
    @Args('search', { type: () => String }) searchTerm: string,
  ) {
    return [];
  }
}
```

----------------------------------------

TITLE: Injecting the Native Mongoose Connection - TypeScript
DESCRIPTION: Demonstrates how to inject the low-level native Mongoose Connection into a service using the @InjectConnection decorator. Useful for advanced use cases where native MongoDB or Mongoose operations outside the ODM context are required. Requires @nestjs/mongoose.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_14

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { InjectConnection } from '@nestjs/mongoose';
import { Connection } from 'mongoose';

@Injectable()
export class CatsService {
  constructor(@InjectConnection() private connection: Connection) {}
}

```

----------------------------------------

TITLE: Using ContextIdFactory for Consistent Instance Resolution
DESCRIPTION: Shows how to use ContextIdFactory to generate a context identifier, ensuring that multiple resolve() calls return the same instance. This example creates a context ID and uses it to resolve TransientService twice, resulting in identical instances.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/module-reference.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@Injectable()
export class CatsService implements OnModuleInit {
  constructor(private moduleRef: ModuleRef) {}

  async onModuleInit() {
    const contextId = ContextIdFactory.create();
    const transientServices = await Promise.all([
      this.moduleRef.resolve(TransientService, contextId),
      this.moduleRef.resolve(TransientService, contextId),
    ]);
    console.log(transientServices[0] === transientServices[1]); // true
  }
}
```

LANGUAGE: typescript
CODE:
```
@Injectable()
@Dependencies(ModuleRef)
export class CatsService {
  constructor(moduleRef) {
    this.moduleRef = moduleRef;
  }

  async onModuleInit() {
    const contextId = ContextIdFactory.create();
    const transientServices = await Promise.all([
      this.moduleRef.resolve(TransientService, contextId),
      this.moduleRef.resolve(TransientService, contextId),
    ]);
    console.log(transientServices[0] === transientServices[1]); // true
  }
}
```

----------------------------------------

TITLE: Defining a Mongoose Schema with NestJS Decorators - TypeScript
DESCRIPTION: Defines a Cat schema using NestJS decorators for tight TypeScript integration. Depends on @nestjs/mongoose and mongoose. The class properties are mapped to MongoDB document fields, supporting automatic type inference and extensible property configuration. Input: none; Output: exports CatSchema for module use.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/mongo.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { HydratedDocument } from 'mongoose';

export type CatDocument = HydratedDocument<Cat>;

@Schema()
export class Cat {
  @Prop()
  name: string;

  @Prop()
  age: number;

  @Prop()
  breed: string;
}

export const CatSchema = SchemaFactory.createForClass(Cat);

```

----------------------------------------

TITLE: Code-First Federation Module Configuration
DESCRIPTION: NestJS module configuration for GraphQL Federation using code-first approach
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import {
  ApolloFederationDriver,
  ApolloFederationDriverConfig,
} from '@nestjs/apollo';
import { Module } from '@nestjs/common';
import { UsersResolver } from './users.resolver';
import { UsersService } from './users.service';

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloFederationDriverConfig>({
      driver: ApolloFederationDriver,
      autoSchemaFile: true,
    }),
  ],
  providers: [UsersResolver, UsersService],
})
export class AppModule {}
```

----------------------------------------

TITLE: Cookie Authentication in NestJS
DESCRIPTION: Demonstrates cookie-based authentication implementation using @ApiCookieAuth decorator and its configuration with optional session ID.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/security.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
@ApiCookieAuth()
@Controller('cats')
export class CatsController {}
```

LANGUAGE: typescript
CODE:
```
const options = new DocumentBuilder().addCookieAuth('optional-session-id');
```

----------------------------------------

TITLE: Applying Interceptors to GraphQL Mutations in NestJS
DESCRIPTION: Shows how to use interceptors with GraphQL mutations. The example demonstrates using an EventsInterceptor to handle side effects when upvoting a post.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/guards-interceptors.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
@Mutation()
@UseInterceptors(EventsInterceptor)
async upvotePost(@Args('postId') postId: number) {
  return this.postsService.upvoteById({ id: postId });
}
```

----------------------------------------

TITLE: Configuring Fastify Adapter in NestJS
DESCRIPTION: Main application bootstrap code showing how to initialize NestJS with FastifyAdapter. Includes type configuration and basic server setup.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { NestFactory } from '@nestjs/core';
import {
  FastifyAdapter,
  NestFastifyApplication,
} from '@nestjs/platform-fastify';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create<NestFastifyApplication>(
    AppModule,
    new FastifyAdapter()
  );
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();
```

----------------------------------------

TITLE: Resuming a Queue in NestJS Bull
DESCRIPTION: Example of resuming a previously paused Bull queue in NestJS using the resume() method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_32

LANGUAGE: typescript
CODE:
```
await audioQueue.resume();
```

----------------------------------------

TITLE: Nest CLI command syntax pattern
DESCRIPTION: Example of the general syntax pattern for Nest CLI commands, showing the format with required and optional arguments.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
nest commandOrAlias requiredArg [optionalArg] [options]
```

----------------------------------------

TITLE: Generated GraphQL SDL Schema for Mutation
DESCRIPTION: The SDL (Schema Definition Language) representation of the upvotePost mutation that gets generated from the code-first implementation. It defines a mutation that accepts an integer postId and returns a Post object.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mutations.md#2025-04-23_snippet_1

LANGUAGE: graphql
CODE:
```
type Mutation {
  upvotePost(postId: Int!): Post
}
```

----------------------------------------

TITLE: Running NestJS Start Script via NPM
DESCRIPTION: Executes the 'start' script defined in the project's package.json file using npm. This usually runs the locally installed NestJS CLI's start command (`nest start`) after ensuring the project is built, using project-specific dependencies for execution.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/scripts.md#_snippet_1

LANGUAGE: Bash
CODE:
```
$ npm run start
```

----------------------------------------

TITLE: Configuring Specific Logging Levels in NestJS
DESCRIPTION: This code shows how to enable only specific logging levels in a NestJS application. It sets the logger property to an array of strings representing the desired log levels.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule, {
  logger: ['error', 'warn'],
});
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Defining Enum Type in NestJS GraphQL (Code-First)
DESCRIPTION: Creates a TypeScript enum for use with GraphQL that represents a set of allowed color values.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
export enum AllowedColor {
  RED,
  GREEN,
  BLUE,
}
```

----------------------------------------

TITLE: Applying AuthGuard to WebSocket Event Handler in NestJS (JavaScript)
DESCRIPTION: This snippet shows the JavaScript equivalent of applying an AuthGuard to a WebSocket event handler. It uses the @UseGuards decorator and demonstrates the structure of a WebSocket message handler function without TypeScript type annotations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/websockets/guards.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
@UseGuards(AuthGuard)
@SubscribeMessage('events')
handleEvent(client, data) {
  const event = 'events';
  return { event, data };
}
```

----------------------------------------

TITLE: Sociable Testing CatsService with Suites
DESCRIPTION: TypeScript code demonstrating sociable testing of CatsService using Suites, exposing real CatsDAL interactions while mocking CatsApiService and Prisma client.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/suites.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { TestBed, Mocked } from '@suites/unit';
import { PrismaClient } from '@prisma/client';

describe('Cats Service Sociable Unit Test', () => {
  let catsService: CatsService;
  let prisma: Mocked<PrismaClient>;
  let catsApiService: Mocked<CatsApiService>;

  beforeAll(async () => {
    const { unit, unitRef } = await TestBed.sociable(CatsService)
      .expose(CatsDAL)
      .mock(CatsApiService)
      .final({ getCatById: async () => ({ id: 1, name: 'Catty' })})
      .compile();

    catsService = unit;
    prisma = unitRef.get(PrismaClient);
  });

  it('should get cat by id and save it', async () => {
    const catFixture: Cat = { id: 1, name: 'Catty' };
    prisma.cat.create.mockResolvedValue(catFixture);

    const savedCat = await catsService.getAndSaveCat(1);

    expect(prisma.cat.create).toHaveBeenCalledWith({ data: catFixture });
    expect(savedCat).toEqual(catFixture);
  });
});
```

----------------------------------------

TITLE: Registering Global Field Middleware in NestJS GraphQL
DESCRIPTION: This snippet demonstrates how to register field middleware globally in the GraphQLModule configuration. When registered globally, the middleware will be automatically applied to all fields of all object types in the schema.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/field-middleware.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot({
  autoSchemaFile: 'schema.gql',
  buildSchemaOptions: {
    fieldMiddleware: [loggerMiddleware],
  },
}),
```

----------------------------------------

TITLE: Installing MQTT Package
DESCRIPTION: Command to install the MQTT package dependency for NestJS microservices
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ npm i --save mqtt
```

----------------------------------------

TITLE: Federation Gateway Configuration
DESCRIPTION: Gateway module configuration for GraphQL Federation using Mercurius Gateway driver.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
import {
  MercuriusGatewayDriver,
  MercuriusGatewayDriverConfig,
} from '@nestjs/mercurius';
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';

@Module({
  imports: [
    GraphQLModule.forRoot<MercuriusGatewayDriverConfig>({
      driver: MercuriusGatewayDriver,
      gateway: {
        services: [
          { name: 'users', url: 'http://user-service/graphql' },
          { name: 'posts', url: 'http://post-service/graphql' },
        ],
      },
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: NestJS AWS Lambda Handler Setup
DESCRIPTION: TypeScript implementation of AWS Lambda handler using NestJS with full HTTP server capabilities
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { NestFactory } from '@nestjs/core';
import serverlessExpress from '@codegenie/serverless-express';
import { Callback, Context, Handler } from 'aws-lambda';
import { AppModule } from './app.module';

let server: Handler;

async function bootstrap(): Promise<Handler> {
  const app = await NestFactory.create(AppModule);
  await app.init();

  const expressApp = app.getHttpAdapter().getInstance();
  return serverlessExpress({ app: expressApp });
}

export const handler: Handler = async (
  event: any,
  context: Context,
  callback: Callback,
) => {
  server = server ?? (await bootstrap());
  return server(event, context, callback);
};
```

----------------------------------------

TITLE: Defining and using custom repositories in MikroORM with NestJS in TypeScript
DESCRIPTION: Shows how to declare a custom repository for an entity by specifying it in the entity decorator and extending EntityRepository to add custom methods. In services, injection of the custom repository class is done directly without the @InjectRepository() decorator, relying on NestJS DI by class reference.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_8

LANGUAGE: typescript
CODE:
```
// `**./author.entity.ts**`
@Entity({ repository: () => AuthorRepository })
export class Author {
  // to allow inference in `em.getRepository()`
  [EntityRepositoryType]?: AuthorRepository;
}

// `**./author.repository.ts**`
export class AuthorRepository extends EntityRepository<Author> {
  // your custom methods...
}

@Injectable()
export class MyService {
  constructor(private readonly repo: AuthorRepository) {}
}
```

----------------------------------------

TITLE: ParseUUIDPipe Implementation in NestJS
DESCRIPTION: Demonstrates how to use ParseUUIDPipe to validate UUID parameters in both regular and switch syntax.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/pipes.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Get(':uuid')
async findOne(@Param('uuid', new ParseUUIDPipe()) uuid: string) {
  return this.catsService.findOne(uuid);
}
```

----------------------------------------

TITLE: Schema-First Enum Definition in GraphQL SDL
DESCRIPTION: Defines an enum type using GraphQL SDL in the schema-first approach, specifying the allowed color values.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_16

LANGUAGE: graphql
CODE:
```
enum AllowedColor {
  RED
  GREEN
  BLUE
}
```

----------------------------------------

TITLE: Handling MQTT Context and Payload
DESCRIPTION: Example of accessing MQTT context and payload in message handlers using decorators
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/mqtt.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@MessagePattern('notifications')
getNotifications(@Payload() data: number[], @Ctx() context: MqttContext) {
  console.log(`Topic: ${context.getTopic()}`);
}
```

----------------------------------------

TITLE: Installing Fastify Cookie Plugin for NestJS
DESCRIPTION: This snippet shows how to install the @fastify/cookie package for use with Fastify in a NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/cookies.md#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
$ npm i @fastify/cookie
```

----------------------------------------

TITLE: Handling Global Queue Events in NestJS
DESCRIPTION: Example of implementing a global event listener that handles completed jobs from any process. It demonstrates how to use the @OnGlobalQueueCompleted decorator and retrieve the full job object using the queue's getJob method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_30

LANGUAGE: typescript
CODE:
```
@OnGlobalQueueCompleted()
async onGlobalCompleted(jobId: number, result: any) {
  const job = await this.immediateQueue.getJob(jobId);
  console.log('(Global) on completed: job ', job.id, ' -> result: ', result);
}
```

----------------------------------------

TITLE: Error Message for Circular Dependencies in NestJS
DESCRIPTION: Example of the error message when circular dependencies exist between modules. This occurs when two or more modules depend on each other directly or indirectly, requiring the use of forwardRef() to resolve.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/errors.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
Nest cannot create the <module> instance.
The module at index [<index>] of the <module> "imports" array is undefined.

Potential causes:
- A circular dependency between modules. Use forwardRef() to avoid it. Read more: https://docs.nestjs.com/fundamentals/circular-dependency
- The module at index [<index>] is of type "undefined". Check your import statements and the type of the module.

Scope [<module_import_chain>]
# example chain AppModule -> FooModule
```

----------------------------------------

TITLE: Generated TypeScript Definitions for Union Types
DESCRIPTION: Shows the TypeScript class and type definitions that would be generated from the schema-first approach for union types.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
export class Author {
  name: string;
}

export class Book {
  title: string;
}

export type ResultUnion = Author | Book;
```

----------------------------------------

TITLE: Enabling File Uploads with @ApiBody, @ApiConsumes, and File Interceptors in NestJS
DESCRIPTION: This snippet shows how to set up file upload endpoints using @UseInterceptors with FileInterceptor, declare content type with @ApiConsumes, and document the expected request payload with @ApiBody. It supports single file uploads with 'multipart/form-data' encoding.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
@UseInterceptors(FileInterceptor('file'))
@ApiConsumes('multipart/form-data')
@ApiBody({
  description: 'List of cats',
  type: FileUploadDto,
})
uploadFile(@UploadedFile() file: Express.Multer.File) {}

// FileUploadDto definition
class FileUploadDto {
  @ApiProperty({ type: 'string', format: 'binary' })
  file: any;
}
```

----------------------------------------

TITLE: Running NestJS Application with SWC in Watch Mode
DESCRIPTION: Command to start a NestJS application using SWC builder in watch mode for development.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ nest start -b swc -w
# OR nest start --builder swc --watch
```

----------------------------------------

TITLE: Defining Types for IntersectionType in GraphQL
DESCRIPTION: Definition of two separate types that will be combined using IntersectionType utility.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@InputType()
class CreateUserInput {
  @Field()
  email: string;

  @Field()
  password: string;
}

@ObjectType()
export class AdditionalUserInfo {
  @Field()
  firstName: string;

  @Field()
  lastName: string;
}
```

----------------------------------------

TITLE: Applying Deprecated Directive to GraphQL Query in NestJS
DESCRIPTION: This snippet shows how to apply the @deprecated directive to a GraphQL query handler in a NestJS application using the code-first approach.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/directives.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Directive('@deprecated(reason: "This query will be removed in the next version")')
@Query(() => Author, { name: 'author' })
async getAuthor(@Args({ name: 'id', type: () => Int }) id: number) {
  return this.authorsService.findOneById(id);
}
```

----------------------------------------

TITLE: Injecting Request Object in NestJS Service
DESCRIPTION: Demonstrates how to inject the request object into a service using the @Inject() decorator. This is useful for obtaining the current context identifier within a request context.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/module-reference.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@Injectable()
export class CatsService {
  constructor(
    @Inject(REQUEST) private request: Record<string, unknown>,
  ) {}
}
```

LANGUAGE: typescript
CODE:
```
@Injectable()
@Dependencies(REQUEST)
export class CatsService {
  constructor(request) {
    this.request = request;
  }
}
```

----------------------------------------

TITLE: Configuring Cron Jobs with Options in NestJS
DESCRIPTION: Example of creating a cron job with additional configuration options like timezone and name.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';

@Injectable()
export class NotificationService {
  @Cron('* * 0 * * *', {
    name: 'notifications',
    timeZone: 'Europe/Paris',
  })
  triggerNotifications() {}
}
```

----------------------------------------

TITLE: Property-based Injection in NestJS
DESCRIPTION: Shows how to use property-based injection with the @Inject() decorator. This method can be useful in certain scenarios, especially when dealing with inheritance.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/components.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Injectable, Inject } from '@nestjs/common';

@Injectable()
export class HttpService<T> {
  @Inject('HTTP_OPTIONS')
  private readonly httpClient: T;
}
```

----------------------------------------

TITLE: Defining Global Response for All Endpoints with DocumentBuilder in NestJS
DESCRIPTION: This snippet demonstrates configuring a global response for all routes using DocumentBuilder, adding a 500 Internal Server Error response. It is useful for standardizing certain responses across the API.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/operations.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
const config = new DocumentBuilder()
  .addGlobalResponse({
    status: 500,
    description: 'Internal server error',
  })
  // other configurations
  .build();
```

----------------------------------------

TITLE: Creating a Custom Roles Decorator in TypeScript
DESCRIPTION: Demonstrates how to create a strongly-typed Roles decorator using Reflector#createDecorator. This decorator takes an array of strings as an argument to specify user roles.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
import { Reflector } from '@nestjs/core';

export const Roles = Reflector.createDecorator<string[]>();
```

----------------------------------------

TITLE: WebSocket Authentication Configuration
DESCRIPTION: Implements authentication verification for WebSocket connections using the verifyClient callback.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/subscriptions.md#2025-04-23_snippet_23

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot<MercuriusDriverConfig>({
  driver: MercuriusDriver,
  subscription: {
    verifyClient: (info, next) => {
      const authorization = info.req.headers?.authorization as string;
      if (!authorization?.startsWith('Bearer ')) {
        return next(false);
      }
      next(true);
    },
  }
}),
```

----------------------------------------

TITLE: Creating the CheckPolicies Decorator - NestJS - TypeScript
DESCRIPTION: Implements a custom decorator, CheckPolicies, which assigns policy handlers to route handlers via metadata for later retrieval in guards. Utilizes SetMetadata from @nestjs/common to attach an array of handlers, supporting flexible authorization checks. This decorator requires handlers typed as PolicyHandler and expects to be used with NestJS methods.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_23

LANGUAGE: TypeScript
CODE:
```
export const CHECK_POLICIES_KEY = 'check_policy';
export const CheckPolicies = (...handlers: PolicyHandler[]) =>
  SetMetadata(CHECK_POLICIES_KEY, handlers);
```

----------------------------------------

TITLE: Implementing Middleware with Fastify
DESCRIPTION: Example of creating a middleware class that works with Fastify's raw request and response objects.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/performance.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Injectable, NestMiddleware } from '@nestjs/common';
import { FastifyRequest, FastifyReply } from 'fastify';

@Injectable()
export class LoggerMiddleware implements NestMiddleware {
  use(req: FastifyRequest['raw'], res: FastifyReply['raw'], next: () => void) {
    console.log('Request...');
    next();
  }
}
```

----------------------------------------

TITLE: Defining Author Class for GraphQL Union Type in NestJS
DESCRIPTION: Creates an Author class with TypeScript decorators to represent a GraphQL object type. This class will be used as part of a union type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { Field, ObjectType } from '@nestjs/graphql';

@ObjectType()
export class Author {
  @Field()
  name: string;
}
```

----------------------------------------

TITLE: Saga Implementation with Request Context
DESCRIPTION: Implementation of a saga that handles request context in event processing.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_23

LANGUAGE: typescript
CODE:
```
@Saga()
dragonKilled = (events$: Observable<any>): Observable<ICommand> => {
  return events$.pipe(
    ofType(HeroKilledDragonEvent),
    map((event) => {
      const request = AsyncContext.of(event); // Retrieve the request context
      const command = new DropAncientItemCommand(event.heroId, fakeItemID);

      AsyncContext.merge(request, command); // Merge the request context into the command
      return command;
    }),
  );
}
```

----------------------------------------

TITLE: Configuring Named Configurations for Bull in NestJS
DESCRIPTION: This snippet demonstrates how to use named configurations for Bull queues in NestJS. It shows how to register multiple configurations and reference them when registering queues.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/queues.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
BullModule.forRoot('alternative-config', {
  redis: {
    port: 6381,
  },
});
```

LANGUAGE: typescript
CODE:
```
BullModule.registerQueue({
  configKey: 'alternative-config',
  name: 'video',
});
```

----------------------------------------

TITLE: Registering Date Scalar Provider
DESCRIPTION: Module configuration to register the custom Date scalar as a provider.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@Module({
  providers: [DateScalar],
})
export class CommonModule {}
```

----------------------------------------

TITLE: Creating a Logger Field Middleware in NestJS GraphQL
DESCRIPTION: This snippet shows how to create a simple field middleware function that logs a field value before returning it to the client. The middleware follows the FieldMiddleware interface, receiving context and next function parameters.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/field-middleware.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { FieldMiddleware, MiddlewareContext, NextFn } from '@nestjs/graphql';

const loggerMiddleware: FieldMiddleware = async (
  ctx: MiddlewareContext,
  next: NextFn,
) => {
  const value = await next();
  console.log(value);
  return value;
};
```

----------------------------------------

TITLE: Creating a Specialized Paginated Type in TypeScript
DESCRIPTION: This snippet shows how to create a specialized paginated type using the generic Paginated function. It extends the Paginated type with a specific entity (Author in this case).
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/resolvers-map.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
@ObjectType()
class PaginatedAuthor extends Paginated(Author) {}
```

----------------------------------------

TITLE: Enabling Method-Level ValidationPipe Transformation in NestJS (TypeScript)
DESCRIPTION: This snippet demonstrates enabling object payload transformation at the controller method level in a NestJS application via the ValidationPipe. By setting the transform option to true when applying ValidationPipe with @UsePipes, incoming request payloads will be automatically converted to their respective DTO class instances, enabling property validation and type enforcement. Dependencies include the @nestjs/common ValidationPipe, Controllers, Decorators, and the appropriate DTO class definition.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_10

LANGUAGE: typescript
CODE:
```
@Post()
@UsePipes(new ValidationPipe({ transform: true }))
async create(@Body() createCatDto: CreateCatDto) {
  this.catsService.create(createCatDto);
}
```

----------------------------------------

TITLE: Retrieving Provider from NestJS Standalone Application
DESCRIPTION: Shows how to get a provider instance (TasksService) from the standalone application context using the get() method. This allows accessing services from within scripts or CRON jobs.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/application-context.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const tasksService = app.get(TasksService);
```

----------------------------------------

TITLE: Configuring Database Connection Provider
DESCRIPTION: Sets up the database connection provider using TypeORM's DataSource configuration. Includes MySQL connection details and entity scanning configuration.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-typeorm.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
import { DataSource } from 'typeorm';

export const databaseProviders = [
  {
    provide: 'DATA_SOURCE',
    useFactory: async () => {
      const dataSource = new DataSource({
        type: 'mysql',
        host: 'localhost',
        port: 3306,
        username: 'root',
        password: 'root',
        database: 'test',
        entities: [
            __dirname + '/../**/*.entity{.ts,.js}',
        ],
        synchronize: true,
      });

      return dataSource.initialize();
    },
  },
];
```

----------------------------------------

TITLE: Resolving Request-Scoped Providers in Authentication Strategy Validation
DESCRIPTION: Demonstrates how to use ModuleRef to resolve request-scoped providers within a strategy's validate method. This approach creates a context ID based on the request object for proper dependency resolution.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_28

LANGUAGE: typescript
CODE:
```
async validate(
  request: Request,
  username: string,
  password: string,
) {
  const contextId = ContextIdFactory.getByRequest(request);
  // "AuthService" is a request-scoped provider
  const authService = await this.moduleRef.resolve(AuthService, contextId);
  ...
}
```

----------------------------------------

TITLE: Listing All Intervals in NestJS
DESCRIPTION: Shows how to list all intervals using the SchedulerRegistry's getIntervals method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
getIntervals() {
  const intervals = this.schedulerRegistry.getIntervals();
  intervals.forEach(key => this.logger.log(`Interval: ${key}`));
}
```

----------------------------------------

TITLE: Implementing Multiple Swagger Specifications
DESCRIPTION: Demonstrates how to create multiple Swagger specifications for different modules in a NestJS application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/other-features.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { NestFactory } from '@nestjs/core';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { CatsModule } from './cats/cats.module';
import { DogsModule } from './dogs/dogs.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  /**
   * createDocument(application, configurationOptions, extraOptions);
   *
   * createDocument method takes an optional 3rd argument "extraOptions"
   * which is an object with "include" property where you can pass an Array
   * of Modules that you want to include in that Swagger Specification
   * E.g: CatsModule and DogsModule will have two separate Swagger Specifications which
   * will be exposed on two different SwaggerUI with two different endpoints.
   */

  const options = new DocumentBuilder()
    .setTitle('Cats example')
    .setDescription('The cats API description')
    .setVersion('1.0')
    .addTag('cats')
    .build();

  const catDocumentFactory = () =>
    SwaggerModule.createDocument(app, options, {
      include: [CatsModule],
    });
  SwaggerModule.setup('api/cats', app, catDocumentFactory);

  const secondOptions = new DocumentBuilder()
    .setTitle('Dogs example')
    .setDescription('The dogs API description')
    .setVersion('1.0')
    .addTag('dogs')
    .build();

  const dogDocumentFactory = () =>
    SwaggerModule.createDocument(app, secondOptions, {
      include: [DogsModule],
    });
  SwaggerModule.setup('api/dogs', app, dogDocumentFactory);

  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();
```

----------------------------------------

TITLE: Custom UUID Scalar Implementation
DESCRIPTION: Implementation of a custom UUID scalar type with validation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/scalars.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
const regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;

function validate(uuid: unknown): string | never {
  if (typeof uuid !== 'string' || !regex.test(uuid)) {
    throw new Error('invalid uuid');
  }
  return uuid;
}

export const CustomUuidScalar = new GraphQLScalarType({
  name: 'UUID',
  description: 'A simple UUID parser',
  serialize: (value) => validate(value),
  parseValue: (value) => validate(value),
  parseLiteral: (ast) => validate(ast.value),
});
```

----------------------------------------

TITLE: Defining a Query in NestJS CQRS
DESCRIPTION: Example of creating a Query class for retrieving a hero by ID. The Query class extends the Query<Hero> type to specify the return type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
export class GetHeroQuery extends Query<Hero> {
  constructor(public readonly heroId: string) {}
}
```

----------------------------------------

TITLE: Configuring TLS Security in NestJS TCP Server
DESCRIPTION: Shows how to implement TLS security for TCP microservices by configuring server-side TLS options with private key and certificate.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
import * as fs from 'fs';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { MicroserviceOptions, Transport } from '@nestjs/microservices';

async function bootstrap() {
  const key = fs.readFileSync('<pathToKeyFile>', 'utf8').toString();
  const cert = fs.readFileSync('<pathToCertFile>', 'utf8').toString();

  const app = await NestFactory.createMicroservice<MicroserviceOptions>(
    AppModule,
    {
      transport: Transport.TCP,
      options: {
        tlsOptions: {
          key,
          cert,
        },
      },
    },
  );

  await app.listen();
}
bootstrap();
```

----------------------------------------

TITLE: Using External Apollo Plugins in NestJS
DESCRIPTION: Demonstrates how to import and configure external Apollo Server plugins in the GraphQLModule configuration. This example shows using the ApolloServerOperationRegistry plugin from an external package.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/plugins.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot({
  // ...
  plugins: [ApolloServerOperationRegistry({ /* options */})]
}),
```

----------------------------------------

TITLE: Creating Custom Terminus Logger in TypeScript
DESCRIPTION: Demonstrates how to create a custom TerminusLogger by extending the ConsoleLogger class. This logger can be used to customize error logging behavior for Terminus health checks.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/terminus.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
import { Injectable, Scope, ConsoleLogger } from '@nestjs/common';

@Injectable({ scope: Scope.TRANSIENT })
export class TerminusLogger extends ConsoleLogger {
  error(message: any, stack?: string, context?: string): void;
  error(message: any, ...optionalParams: any[]): void;
  error(
    message: unknown,
    stack?: unknown,
    context?: unknown,
    ...rest: unknown[]
  ): void {
    // Overwrite here how error messages should be logged
  }
}
```

----------------------------------------

TITLE: Installing Joi Package for NestJS Config Validation
DESCRIPTION: Command to install the Joi package which is used for schema validation in NestJS config module.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_17

LANGUAGE: bash
CODE:
```
$ npm install --save joi
```

----------------------------------------

TITLE: Registering Enum Resolver in GraphQL Module
DESCRIPTION: Configures the GraphQL module to use the custom enum resolver by providing it in the resolvers configuration object.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_19

LANGUAGE: typescript
CODE:
```
GraphQLModule.forRoot({
  resolvers: {
    AllowedColor: allowedColorResolver,
  },
});
```

----------------------------------------

TITLE: Composing Multiple Type Utilities in GraphQL
DESCRIPTION: Example of composing multiple type mapping utilities to create a complex derived type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/mapped-types.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
@InputType()
export class UpdateUserInput extends PartialType(
  OmitType(CreateUserInput, ['email'] as const),
) {}
```

----------------------------------------

TITLE: Using Custom Client Proxy for Message Sending
DESCRIPTION: This snippet shows how to create an instance of the custom client proxy and use it to send a message, demonstrating the basic usage of the implemented client.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
const googlePubSubClient = new GoogleCloudPubSubClient();
googlePubSubClient
  .send('pattern', 'Hello world!')
  .subscribe((response) => console.log(response));
```

----------------------------------------

TITLE: Configuring DevtoolsModule in AppModule
DESCRIPTION: Integration of DevtoolsModule into the application's root module with conditional activation based on environment.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/devtools/overview.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    DevtoolsModule.register({
      http: process.env.NODE_ENV !== 'production',
    }),
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
```

----------------------------------------

TITLE: Retrieving Handler Arguments Using getArgs()
DESCRIPTION: Demonstrates how to access the array of arguments passed to a handler using the getArgs() method of ArgumentsHost.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const [req, res, next] = host.getArgs();
```

----------------------------------------

TITLE: Configuring Redis Store in Cache Module (New Version)
DESCRIPTION: Demonstrates the new way of configuring a Redis store for the CacheModule in NestJS v11 using the Keyv adapter.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
// New version - supported
CacheModule.registerAsync({
  useFactory: async () => {
    return {
      stores: [
        new KeyvRedis('redis://localhost:6379'),
      ],
    };
  },
}),
```

----------------------------------------

TITLE: Customizing SWC Builder Options in nest-cli.json
DESCRIPTION: JSON configuration to customize SWC builder options, including specifying a custom .swcrc file path.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/swc.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "builder": {
      "type": "swc",
      "options": {
        "swcrcPath": "infrastructure/.swcrc",
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing an Event-based Handler in NestJS Microservices
DESCRIPTION: Demonstrates how to create an event handler using the @EventPattern decorator in a NestJS microservice for event-based messaging.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@EventPattern('user_created')
async handleUserCreated(data: Record<string, unknown>) {
  // business logic
}
```

----------------------------------------

TITLE: Listing All Cron Jobs in NestJS
DESCRIPTION: Shows how to list all cron jobs and their next execution dates using the SchedulerRegistry's getCronJobs method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
getCrons() {
  const jobs = this.schedulerRegistry.getCronJobs();
  jobs.forEach((value, key, map) => {
    let next;
    try {
      next = value.nextDate().toJSDate();
    } catch (e) {
      next = 'error: next fire date is in the past!';
    }
    this.logger.log(`job: ${key} -> next: ${next}`);
  });
}
```

----------------------------------------

TITLE: Defining GraphQL Interface using Code-First Approach
DESCRIPTION: Creates a basic Character interface using TypeScript abstract class with @InterfaceType decorator from @nestjs/graphql.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Field, ID, InterfaceType } from '@nestjs/graphql';

@InterfaceType()
export abstract class Character {
  @Field(() => ID)
  id: string;

  @Field()
  name: string;
}
```

----------------------------------------

TITLE: Code-First Users Resolver Implementation
DESCRIPTION: TypeScript implementation of Users resolver using code-first approach
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Args, Query, Resolver, ResolveReference } from '@nestjs/graphql';
import { User } from './user.entity';
import { UsersService } from './users.service';

@Resolver(() => User)
export class UsersResolver {
  constructor(private usersService: UsersService) {}

  @Query(() => User)
  getUser(@Args('id') id: number): User {
    return this.usersService.findById(id);
  }

  @ResolveReference()
  resolveReference(reference: { __typename: string; id: number }): User {
    return this.usersService.findById(reference.id);
  }
}
```

----------------------------------------

TITLE: Custom ThrottlerGuard to Extract Client IP behind Proxy - TypeScript
DESCRIPTION: Extends the ThrottlerGuard to override the getTracker method, extracting the client IP address from the 'req.ips' array provided by Express when trust proxy is enabled. If multiple IPs are present, it uses the first; otherwise, the fallback is req.ip. This customization allows correct IP tracking behind proxies to enforce rate limits fairly.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/rate-limiting.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { ThrottlerGuard } from '@nestjs/throttler';
import { Injectable } from '@nestjs/common';

@Injectable()
export class ThrottlerBehindProxyGuard extends ThrottlerGuard {
  protected async getTracker(req: Record<string, any>): Promise<string> {
    return req.ips.length ? req.ips[0] : req.ip; // individualize IP extraction to meet your own needs
  }
}
```

----------------------------------------

TITLE: Enabling automatic entity loading in MikroOrmModule configuration using TypeScript
DESCRIPTION: Illustrates how to configure MikroOrmModule with the autoLoadEntities property set to true. This setting causes entities registered by forFeature() calls to be automatically added to the MikroORM configuration entity array, reducing the need to specify entity paths explicitly. However, it does not affect the CLI or non-registered related entities.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_9

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    MikroOrmModule.forRoot({
      ...
      autoLoadEntities: true,
    }),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: Injecting SchedulerRegistry in NestJS
DESCRIPTION: Demonstrates how to inject the SchedulerRegistry into a NestJS class constructor for managing scheduled tasks.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
constructor(private schedulerRegistry: SchedulerRegistry) {}
```

----------------------------------------

TITLE: Timestamp Logger Implementation
DESCRIPTION: Shows how to enable timestamp logging for service-level logging with time difference calculations.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
import { Logger, Injectable } from '@nestjs/common';

@Injectable()
class MyService {
  private readonly logger = new Logger(MyService.name, { timestamp: true });

  doSomething() {
    this.logger.log('Doing something with timestamp here ->');
  }
}
```

----------------------------------------

TITLE: Schema-First Posts Type Definition
DESCRIPTION: GraphQL schema definition for Posts service with User type extension
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_7

LANGUAGE: graphql
CODE:
```
type Post @key(fields: "id") {
  id: ID!
  title: String!
  body: String!
  user: User
}

extend type User @key(fields: "id") {
  id: ID! @external
  posts: [Post]
}

extend type Query {
  getPosts: [Post]
}
```

----------------------------------------

TITLE: Creating Database Module
DESCRIPTION: NestJS module definition that exports database providers for application-wide access.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-sequelize.md#2025-04-23_snippet_2

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { databaseProviders } from './database.providers';

@Module({
  providers: [...databaseProviders],
  exports: [...databaseProviders],
})
export class DatabaseModule {}
```

----------------------------------------

TITLE: Configuring AuthModule in TypeScript
DESCRIPTION: Configuration of AuthModule to import UsersModule and provide AuthService, setting up the authentication module structure.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { UsersModule } from '../users/users.module';

@Module({
  imports: [UsersModule],
  providers: [AuthService],
})
export class AuthModule {}
```

----------------------------------------

TITLE: Custom Interface Type Resolution
DESCRIPTION: Demonstrates how to provide a custom resolveType function for interface type resolution based on object properties.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/interfaces.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
@InterfaceType({
  resolveType(book) {
    if (book.colors) {
      return ColoringBook;
    }
    return TextBook;
  },
})
export abstract class Book {
  @Field(() => ID)
  id: string;

  @Field()
  title: string;
}
```

----------------------------------------

TITLE: Setting Up a Custom Logger Instance in NestJS Bootstrap
DESCRIPTION: Shows how to directly provide a custom logger instance during NestJS application bootstrap, useful when adding custom logic to logger methods.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_15

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule, {
  bufferLogs: true,
});
app.useLogger(new MyLogger());
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Creating and running a new Nest project
DESCRIPTION: Series of commands to create a new Nest project, navigate to the project directory, and start the application in development mode.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/overview.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ nest new my-nest-project
$ cd my-nest-project
$ npm run start:dev
```

----------------------------------------

TITLE: Creating Dynamic Database Module in TypeScript
DESCRIPTION: Demonstrates how to create a dynamic database module that can be configured at runtime with entities and options. The module exports a Connection provider by default and allows for dynamic provider creation through the forRoot() method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { Module, DynamicModule } from '@nestjs/common';
import { createDatabaseProviders } from './database.providers';
import { Connection } from './connection.provider';

@Module({
  providers: [Connection],
  exports: [Connection],
})
export class DatabaseModule {
  static forRoot(entities = [], options?): DynamicModule {
    const providers = createDatabaseProviders(options, entities);
    return {
      module: DatabaseModule,
      providers: providers,
      exports: providers,
    };
  }
}
```

----------------------------------------

TITLE: Building NestJS Application
DESCRIPTION: Command for compiling a NestJS application or workspace, including path mapping and DTO annotations for OpenAPI and GraphQL if enabled.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/usages.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ nest build <name> [options]
```

----------------------------------------

TITLE: Defining Book Class for GraphQL Union Type in NestJS
DESCRIPTION: Creates a Book class with TypeScript decorators to represent a GraphQL object type. This class will be used as part of a union type.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { Field, ObjectType } from '@nestjs/graphql';

@ObjectType()
export class Book {
  @Field()
  title: string;
}
```

----------------------------------------

TITLE: Handling Internal Events in NestJS Microservices
DESCRIPTION: Demonstrates how to listen to internal events emitted by microservices and servers using the on() method. Shows error event handling for both client and server instances.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/basics.md#2025-04-23_snippet_16

LANGUAGE: typescript
CODE:
```
this.client.on('error', (err) => {
  console.error(err);
});
```

LANGUAGE: typescript
CODE:
```
server.on<TcpEvents>('error', (err) => {
  console.error(err);
});
```

----------------------------------------

TITLE: Enum Definition in Swagger
DESCRIPTION: Various approaches to define and use enums in Swagger documentation.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@ApiProperty({ enum: ['Admin', 'Moderator', 'User']})
role: UserRole;
```

LANGUAGE: typescript
CODE:
```
export enum UserRole {
  Admin = 'Admin',
  Moderator = 'Moderator',
  User = 'User',
}
```

LANGUAGE: typescript
CODE:
```
@ApiQuery({ name: 'role', enum: UserRole })
async filterByRole(@Query('role') role: UserRole = UserRole.User) {}
```

----------------------------------------

TITLE: Disabling Logging in NestJS Application Bootstrapping
DESCRIPTION: This snippet demonstrates how to disable logging entirely when creating a NestJS application instance. It sets the logger property to false in the options object passed to NestFactory.create().
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.create(AppModule, {
  logger: false,
});
await app.listen(process.env.PORT ?? 3000);
```

----------------------------------------

TITLE: Implementing Guard Execution Order in NestJS
DESCRIPTION: This snippet demonstrates how guards are executed in order of binding at different levels (global, controller, route). It shows that Guard1 will execute before Guard2, and both will execute before Guard3.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/request-lifecycle.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
@UseGuards(Guard1, Guard2)
@Controller('cats')
export class CatsController {
  constructor(private catsService: CatsService) {}

  @UseGuards(Guard3)
  @Get()
  getCats(): Cats[] {
    return this.catsService.getCats();
  }
}
```

----------------------------------------

TITLE: Applying Custom Transport Strategy in NestJS Microservice
DESCRIPTION: Example of creating a NestJS microservice using a custom transport strategy instead of a built-in transporter. This demonstrates how to initialize the microservice with the custom strategy.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/custom-transport.md#2025-04-23_snippet_1

LANGUAGE: typescript
CODE:
```
const app = await NestFactory.createMicroservice<MicroserviceOptions>(
  AppModule,
  {
    strategy: new GoogleCloudPubSubServer(),
  },
);
```

----------------------------------------

TITLE: GraphQL Module Configuration with Mercurius Federation
DESCRIPTION: Module configuration for GraphQL using Mercurius Federation driver in NestJS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_12

LANGUAGE: typescript
CODE:
```
import {
  MercuriusFederationDriver,
  MercuriusFederationDriverConfig,
} from '@nestjs/mercurius';
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';
import { PostsResolver } from './posts.resolver';

@Module({
  imports: [
    GraphQLModule.forRoot<MercuriusFederationDriverConfig>({
      driver: MercuriusFederationDriver,
      federationMetadata: true,
      typePaths: ['**/*.graphql'],
    }),
  ],
  providers: [PostsResolvers],
})
export class AppModule {}
```

----------------------------------------

TITLE: Implementing Conditional Module Loading in NestJS with Environment Variables
DESCRIPTION: Demonstrates how to conditionally load modules based on environment variables using the ConditionalModule from @nestjs/config.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/configuration.md#2025-04-23_snippet_27

LANGUAGE: typescript
CODE:
```
@Module({
  imports: [
    ConfigModule.forRoot(),
    ConditionalModule.registerWhen(FooModule, 'USE_FOO'),
  ],
})
export class AppModule {}
```

----------------------------------------

TITLE: SDL Generated for Enum with Descriptions and Deprecation
DESCRIPTION: Shows the GraphQL SDL that gets generated for an enum type with descriptions and deprecation reasons added.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/unions-and-enums.md#2025-04-23_snippet_15

LANGUAGE: graphql
CODE:
```
"""
The supported colors.
"""
enum AllowedColor {
  """
  The default color.
  """
  RED
  GREEN
  BLUE @deprecated(reason: "Too blue.")
}
```

----------------------------------------

TITLE: Updating Local Master with NestJS Upstream
DESCRIPTION: Command to update your local master branch with the latest changes from the upstream NestJS repository using fast-forward merge.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/CONTRIBUTING.md#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
git pull --ff upstream master
```

----------------------------------------

TITLE: Configuring MikroOrmModule with explicit SQLite Driver in TypeScript
DESCRIPTION: Demonstrates importing the SQLite driver and using MikroOrmModule.forRoot() with explicit configuration options including entity paths and database filename within the root AppModule. This allows MikroORM to connect to the SQLite database and manage entities. The configuration object is similar to the native MikroORM init() method options.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mikroorm.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { SqliteDriver } from '@mikro-orm/sqlite';

@Module({
  imports: [
    MikroOrmModule.forRoot({
      entities: ['./dist/entities'],
      entitiesTs: ['./src/entities'],
      dbName: 'my-db-name.sqlite3',
      driver: SqliteDriver,
    }),
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
```

----------------------------------------

TITLE: Accessing and Controlling a Cron Job in NestJS
DESCRIPTION: Demonstrates how to access a named cron job, stop it, and get its last execution date using the SchedulerRegistry.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/task-scheduling.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
const job = this.schedulerRegistry.getCronJob('notifications');

job.stop();
console.log(job.lastDate());
```

----------------------------------------

TITLE: Using a Custom Logger in a NestJS Service
DESCRIPTION: Demonstrates how to inject and use a custom logger in a NestJS service, showing context setting and calling both standard and custom logging methods.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { MyLogger } from './my-logger.service';

@Injectable()
export class CatsService {
  private readonly cats: Cat[] = [];

  constructor(private myLogger: MyLogger) {
    // Due to transient scope, CatsService has its own unique instance of MyLogger,
    // so setting context here will not affect other instances in other services
    this.myLogger.setContext('CatsService');
  }

  findAll(): Cat[] {
    // You can call all the default methods
    this.myLogger.warn('About to return cats!');
    // And your custom methods
    this.myLogger.customLog();
    return this.cats;
  }
}
```

----------------------------------------

TITLE: Installing NestJS CLI as Dev Dependency
DESCRIPTION: Installs the NestJS command-line interface as a development dependency (`-D`) within the current project using npm. Adding `@nestjs/cli` to the project's `devDependencies` in `package.json` ensures that the specific version of the CLI used for 'build' and 'start' commands is managed per project, promoting consistency among team members.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/cli/scripts.md#_snippet_4

LANGUAGE: Bash
CODE:
```
$ npm install -D @nestjs/cli
```

----------------------------------------

TITLE: Creating a LoggerModule in NestJS
DESCRIPTION: Demonstrates how to create a dedicated LoggerModule that provides and exports a custom logger service for use throughout the application.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/logger.md#2025-04-23_snippet_11

LANGUAGE: typescript
CODE:
```
import { Module } from '@nestjs/common';
import { MyLogger } from './my-logger.service';

@Module({
  providers: [MyLogger],
  exports: [MyLogger],
})
export class LoggerModule {}
```

----------------------------------------

TITLE: Customizing Passport Module Options in NestJS
DESCRIPTION: Shows how to pass custom configuration options to the PassportModule during registration. This example enables session support for authentication strategies.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/passport.md#2025-04-23_snippet_29

LANGUAGE: typescript
CODE:
```
PassportModule.register({ session: true });
```

----------------------------------------

TITLE: Implementing a slash command with Necord
DESCRIPTION: Demonstrates how to create a slash command 'ping' using the @SlashCommand decorator in Necord.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/necord.md#2025-04-23_snippet_4

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@nestjs/common';
import { Context, SlashCommand, SlashCommandContext } from 'necord';

@Injectable()
export class AppCommands {
  @SlashCommand({
    name: 'ping',
    description: 'Responds with pong!',
  })
  public async onPing(@Context() [interaction]: SlashCommandContext) {
    return interaction.reply({ content: 'Pong!' });
  }
}
```

----------------------------------------

TITLE: Implementing a gRPC Service Handler with Implicit Method Naming
DESCRIPTION: Example showing how to implement a gRPC service handler with just the service name in the decorator, allowing NestJS to automatically associate the handler with the corresponding RPC method based on the method name.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/microservices/grpc.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
@Controller()
export class HeroesController {
  @GrpcMethod('HeroesService')
  findOne(data: HeroById, metadata: Metadata, call: ServerUnaryCall<any, any>): Hero {
    const items = [
      { id: 1, name: 'John' },
      { id: 2, name: 'Doe' },
    ];
    return items.find(({ id }) => id === data.id);
  }
}
```

----------------------------------------

TITLE: Error Response Format in NestJS
DESCRIPTION: Shows the default error response format when authorization fails and access is forbidden.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/guards.md#2025-04-23_snippet_7

LANGUAGE: typescript
CODE:
```
{
  "statusCode": 403,
  "message": "Forbidden resource",
  "error": "Forbidden"
}
```

----------------------------------------

TITLE: Raw Schema Definitions
DESCRIPTION: Examples of defining complex types using raw schema definitions.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/types-and-parameters.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
@ApiProperty({
  type: 'array',
  items: {
    type: 'array',
    items: {
      type: 'number',
    },
  },
})
coords: number[][];
```

LANGUAGE: typescript
CODE:
```
@ApiProperty({
  type: 'object',
  properties: {
    name: {
      type: 'string',
      example: 'Error'
    },
    status: {
      type: 'number',
      example: 400
    }
  },
  required: ['name', 'status']
})
rawDefinition: Record<string, any>;
```

----------------------------------------

TITLE: Installing NestJS TypeScript Starter with Git
DESCRIPTION: Commands to clone the official NestJS TypeScript starter repository, install dependencies, and start the application. This method provides an alternative to using the Nest CLI.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/introduction.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ git clone https://github.com/nestjs/typescript-starter.git project
$ cd project
$ npm install
$ npm run start
```

----------------------------------------

TITLE: UnhandledExceptionInfo Interface Definition
DESCRIPTION: TypeScript interface defining the structure of unhandled exception information in CQRS.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_14

LANGUAGE: typescript
CODE:
```
export interface UnhandledExceptionInfo<
  Cause = IEvent | ICommand,
  Exception = any,
> {
  /**
   * The exception that was thrown.
   */
  exception: Exception;
  /**
   * The cause of the exception (event or command reference).
   */
  cause: Cause;
}
```

----------------------------------------

TITLE: Defining Cat Interface for Mongoose Document
DESCRIPTION: Creates an interface for the Cat model that extends Mongoose's Document interface, defining the structure of a cat document.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/mongodb.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import { Document } from 'mongoose';

export interface Cat extends Document {
  readonly name: string;
  readonly age: number;
  readonly breed: string;
}
```

----------------------------------------

TITLE: Creating a Custom Apollo Plugin in NestJS
DESCRIPTION: Demonstrates how to create a custom logging plugin for Apollo Server in NestJS by implementing the ApolloServerPlugin interface. This plugin logs when a GraphQL request starts and before a response is sent.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/plugins.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
import { ApolloServerPlugin, GraphQLRequestListener } from '@apollo/server';
import { Plugin } from '@nestjs/apollo';

@Plugin()
export class LoggingPlugin implements ApolloServerPlugin {
  async requestDidStart(): Promise<GraphQLRequestListener<any>> {
    console.log('Request started');
    return {
      async willSendResponse() {
        console.log('Will send response');
      },
    };
  }
}
```

----------------------------------------

TITLE: Comparing Bootstrap Times in Different Node.js Application Types
DESCRIPTION: Four different approaches to bootstrapping Node.js applications: an Express app, a standard NestJS app with HTTP server, a NestJS standalone application without HTTP server, and a raw Node.js script. These examples are used to benchmark startup times in a serverless context.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/faq/serverless.md#2025-04-23_snippet_0

LANGUAGE: typescript
CODE:
```
// #1 Express
import * as express from 'express';

async function bootstrap() {
  const app = express();
  app.get('/', (req, res) => res.send('Hello world!'));
  await new Promise<void>((resolve) => app.listen(3000, resolve));
}
bootstrap();

// #2 Nest (with @nestjs/platform-express)
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, { logger: ['error'] });
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

// #3 Nest as a Standalone application (no HTTP server)
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { AppService } from './app.service';

async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule, {
    logger: ['error'],
  });
  console.log(app.get(AppService).getHello());
}
bootstrap();

// #4 Raw Node.js script
async function bootstrap() {
  console.log('Hello world!');
}
bootstrap();
```

----------------------------------------

TITLE: Configuring Swagger UI with Dropdown Explorer
DESCRIPTION: Demonstrates how to set up multiple Swagger specifications with a dropdown menu in the explorer bar.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/openapi/other-features.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { NestFactory } from '@nestjs/core';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { CatsModule } from './cats/cats.module';
import { DogsModule } from './dogs/dogs.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Main API options
  const options = new DocumentBuilder()
    .setTitle('Multiple Specifications Example')
    .setDescription('Description for multiple specifications')
    .setVersion('1.0')
    .build();

  // Create main API document
  const document = SwaggerModule.createDocument(app, options);

  // Setup main API Swagger UI with dropdown support
  SwaggerModule.setup('api', app, document, {
    explorer: true,
    swaggerOptions: {
      urls: [
        {
          name: '1. API',
          url: 'api/swagger.json',
        },
        {
          name: '2. Cats API',
          url: 'api/cats/swagger.json',
        },
        {
          name: '3. Dogs API',
          url: 'api/dogs/swagger.json',
        },
      ],
    },
    jsonDocumentUrl: '/api/swagger.json',
  });

  // Cats API options
  const catOptions = new DocumentBuilder()
    .setTitle('Cats Example')
    .setDescription('Description for the Cats API')
    .setVersion('1.0')
    .addTag('cats')
    .build();

  // Create Cats API document
  const catDocument = SwaggerModule.createDocument(app, catOptions, {
    include: [CatsModule],
  });

  // Setup Cats API Swagger UI
  SwaggerModule.setup('api/cats', app, catDocument, {
    jsonDocumentUrl: '/api/cats/swagger.json',
  });

  // Dogs API options
  const dogOptions = new DocumentBuilder()
    .setTitle('Dogs Example')
    .setDescription('Description for the Dogs API')
    .setVersion('1.0')
    .addTag('dogs')
    .build();

  // Create Dogs API document
  const dogDocument = SwaggerModule.createDocument(app, dogOptions, {
    include: [DogsModule],
  });

  // Setup Dogs API Swagger UI
  SwaggerModule.setup('api/dogs', app, dogDocument, {
    jsonDocumentUrl: '/api/dogs/swagger.json',
  });

  await app.listen(3000);
}

bootstrap();
```

----------------------------------------

TITLE: Implementing CaslAbilityFactory for User Permissions in TypeScript
DESCRIPTION: Implements the `CaslAbilityFactory` injectable class with a `createForUser(user: User)` method. This method utilizes `AbilityBuilder` from `@casl/ability` to construct an `AppAbility` instance based on the provided `User` object's properties (e.g., `isAdmin`) and specific conditions (e.g., `authorId`, `isPublished`). It defines permissions using `can` and `cannot` rules for `Article` and `User` subjects, including the use of 'all' and 'manage' keywords. Requires `User`, `Article`, `Action`, and types/classes from `@casl/ability`.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authorization.md#_snippet_16

LANGUAGE: typescript
CODE:
```
type Subjects = InferSubjects<typeof Article | typeof User> | 'all';

export type AppAbility = Ability<[Action, Subjects]>;

@Injectable()
export class CaslAbilityFactory {
  createForUser(user: User) {
    const { can, cannot, build } = new AbilityBuilder<
      Ability<[Action, Subjects]>
    >(Ability as AbilityClass<AppAbility>);

    if (user.isAdmin) {
      can(Action.Manage, 'all'); // read-write access to everything
    } else {
      can(Action.Read, 'all'); // read-only access to everything
    }

    can(Action.Update, Article, { authorId: user.id });
    cannot(Action.Delete, Article, { isPublished: true });

    return build({
      // Read https://casl.js.org/v6/en/guide/subject-type-detection#use-classes-as-subject-types for details
      detectSubjectType: (item) =>
        item.constructor as ExtractSubjectType<Subjects>,
    });
  }
}
```

----------------------------------------

TITLE: Creating Global Module in NestJS
DESCRIPTION: Shows how to create a global module using the @Global decorator, making its providers available throughout the application without explicit imports.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/modules.md#2025-04-23_snippet_5

LANGUAGE: typescript
CODE:
```
import { Module, Global } from '@nestjs/common';
import { CatsController } from './cats.controller';
import { CatsService } from './cats.service';

@Global()
@Module({
  controllers: [CatsController],
  providers: [CatsService],
  exports: [CatsService],
})
export class CatsModule {}
```

----------------------------------------

TITLE: JWT Constants Configuration
DESCRIPTION: Configuration file containing JWT secret key constant for token signing and verification.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/security/authentication.md#2025-04-23_snippet_9

LANGUAGE: typescript
CODE:
```
export const jwtConstants = {
  secret: 'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',
};
```

----------------------------------------

TITLE: Updating Fastify Middleware Registration in NestJS 11
DESCRIPTION: Shows how to update the middleware registration syntax for Fastify in NestJS 11, using a named wildcard instead of the previous (.*) syntax.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/migration.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
.forRoutes('*splat');
```

----------------------------------------

TITLE: Implementing Event Dispatch in a Model in NestJS CQRS
DESCRIPTION: Example of updating a Hero model to dispatch the HeroKilledDragonEvent when the killEnemy method is called.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/cqrs.md#2025-04-23_snippet_8

LANGUAGE: typescript
CODE:
```
export class Hero extends AggregateRoot {
  constructor(private id: string) {
    super();
  }

  killEnemy(enemyId: string) {
    // Business logic
    this.apply(new HeroKilledDragonEvent(this.id, enemyId));
  }
}
```

----------------------------------------

TITLE: Defining Photo Entity
DESCRIPTION: Creates a Photo entity with TypeORM decorators defining the database schema structure.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/recipes/sql-typeorm.md#2025-04-23_snippet_3

LANGUAGE: typescript
CODE:
```
import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class Photo {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ length: 500 })
  name: string;

  @Column('text')
  description: string;

  @Column()
  filename: string;

  @Column('int')
  views: number;

  @Column()
  isPublished: boolean;
}
```

----------------------------------------

TITLE: Using Custom @SetMetadata Decorator in NestJS Controller
DESCRIPTION: Shows how to use a custom decorator created with @SetMetadata in a NestJS controller. This example applies the 'admin' role to the create method.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/fundamentals/execution-context.md#2025-04-23_snippet_17

LANGUAGE: typescript
CODE:
```
@Post()
@Roles('admin')
async create(@Body() createCatDto: CreateCatDto) {
  this.catsService.create(createCatDto);
}
```

----------------------------------------

TITLE: Schema-First Post Type Definition with Federation
DESCRIPTION: GraphQL schema definition for Post type with federation directives and User type extension.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/graphql/federation.md#2025-04-23_snippet_10

LANGUAGE: graphql
CODE:
```
type Post @key(fields: "id") {
  id: ID!
  title: String!
  body: String!
  user: User
}

extend type User @key(fields: "id") {
  id: ID! @external
  posts: [Post]
}

extend type Query {
  getPosts: [Post]
}
```

----------------------------------------

TITLE: Stripping Non-Whitelisted Properties with ValidationPipe
DESCRIPTION: This code snippet demonstrates how to strip non-whitelisted properties from the request body using the `ValidationPipe`. By setting the `whitelist` option to `true`, any properties in the request body that are not defined in the DTO or validation class will be automatically removed.
SOURCE: https://github.com/nestjs/docs.nestjs.com/blob/master/content/techniques/validation.md#_snippet_9

LANGUAGE: typescript
CODE:
```
app.useGlobalPipes(
  new ValidationPipe({
    whitelist: true,
  }),
);
```